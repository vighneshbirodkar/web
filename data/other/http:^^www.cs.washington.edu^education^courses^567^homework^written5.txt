date mon dec gmt server ncsa content type text html cse homework assignment cse principles digital systems design carl ebeling fall homework distributed wednesday nov due friday nov class work together teams homework please look problems individually first sketch possible solutions questions meet together formulate solutions assign writeup one team members meet collate review solutions hand whole team responsible understanding solution problems problems involving verilog code hand code simulation log least part really long design two modules one run length encoding input stream bytes another corresponding run length decoding plugging two modules back back reconstruct original byte stream must design protocol optimizations try based image compression context one things must worry fact compressed stream length original stream although generally shorter might longer depending run length coding circuits must handle possibility course design circuits using verilog use simulator show works design circuit performs one level d wavelet transform x image image resulting transform stored two different memory modules store sub images produce four x images x output image memories use simple static rams bit address bit data input writes bit data output reads single r w control signal asserted high reading asserted low writing write verilog model memory note clock input r w asserted read data output address selects address changes data r w unasserted write nothing happens r w changes high time data input written memory problem design test simple cache controller using verilog simulation cache direct mapped read allocate write cache controller sits processor cache memory generates control signals needed processor memory cache controller following o signals inputs read processor asserts request read write processor asserts request write one read write asserted address processor provides memory address word read written hit cache tag memory asserts hit memory address cache reset resets cache controller initial state outputs ready signal processor indicating data present processor continue memread asserted tell memory perform read operation memwrite asserted tell memory perform write operation one memread memwrite asserted time memaddress address main memory word read written addresses word addresses words per cache line cycle processor asserts read write request neither cache controller along memory address word waits ready signal asserted cache tag module checks see address cache asserts hit next cycle read write request asserted design cache tag module assume hit signal asserted appropriately different things happen depending whether read write asserted read hit asserted ready asserted immediately clock cycle hit hit asserted controller must read cache line memory starting requested word time memread asserted takes cycles first word memory available takes one cycle per word read cache line controller issues memread address first word accessed waits cycles issues reads one per cycle addresses remaining words cache line controller assert ready signal soon data requested address available write writes easier since cache lines allocated write miss whether hit asserted controller issues write memory one word ready asserted immediately however without waiting write complete takes cycles read write overlap reads writes go memory cannot overlap two read misses row second set reads memory must wait previous reads completed happen controller asserts ready completing reads first miss read miss write followed read hit however ready asserted right away since memory access required write verilog description cache controller use verilog xl test design provide driver design couple days ebeling cs washington edu