mime version server cern date sunday dec gmt content type text html content length last modified wednesday aug gmt u net packet filter u net packet filter extension u net fast ethernet masters engineering project august jonathan barber barber cs cornell edu professor thorsten von eicken department computer science cornell university abstract u net high bandwidth low latency network communication protocol deliver parallel computing horsepower network pcs case pcs connected via fast ethernet switch original implementation computers connected u net communicated simple communication scheme u net packet filter acts extension original implementation giving u net capability communicate using open standards overview job u net packet filter upf demultiplex coming packets corresponding u net endpoint destinations designed demultiplex connection oriented connection less packets depending protocol field combinations case connection oriented packets channel specifies endpoint endpoint connection e connection one process another process connects process b communicate b b communicate channel wants communicate c must open separate channel case connection less packets program open broadcast multicast channel process listening channel receive packets sent design goals u net packet filter designed two goals mind fast ability communicate open standards useless u net normal network data rates packet filter topology simplistic easily expandable new filters cannot written pseudo assembly interpreted new filters must programmed existing system however packet filter simplistic structure allows certain degree creativity part programmer thereby easing task programming subsequent sections document discuss detail different components structure u net packet filter eye towards demonstrating design goals met implementation current implementation date document allows distinct filter types raw u net simple communication scheme utilized original version u net raw ethernet u net purely data link layer tcp ip udp ip elementary components u net packet filter directed cyclic graph dag made two basic components cell data structure contains twelve bit word entries packet basic structure cell used storing channel information channel field values port numbers addresses used pointer cells hash table cells chained together form doubly linked lists complete details usage information cells upf click hash table provided hashing function tables used spread u net channels range hash size table contains hash size pointers cells cells already mentioned chained together linked list combination cells hash tables creates hashing data structure chaining way hash tables utilized current implementation upf figure elemantary upf components together cells hash tables connected together form directed cyclic graph dag packet comes ethernet wire protocol composite packet header broken fields fields compared information stored cells matches found follow appropriate path dag next section breaks current architecture u net packet filter discusses protocols currently supports protocol hierarchy u net packet filter dag current implementation supports protocols two open standards following protocols broken follows raw u net modified version u net devtulip c backwards compatible original implementation u net packets demultiplexed raw u net channels based following fields u net code u net port number figure raw u net ethernet header types channels part upf system event raw u net channel detected upf system passed packet demultiplexed based strictly u net port number ethernet card running promiscuous multicast mode u net type u net port identify endpoint channel channels guaranteed unique raw ethernet protocol similar raw u net protocol strictly data link layer protocol packets demultiplexed corresponding endpoint channel based following fields ethernet source addr raw ethernet type figure raw ethernet header combination two fields uniquely specify endpoint unless source addr ethernet multicast broadcast address ethernet type bit value provided reserved field e g ip ethernet type x reserved type case open channel consist raw u net dag raw ethernet channels dag merely linked list eth type cells see cell specification page figure raw ethernet upf dag raw ethernet packet received fields ethernet source raw ethernet type compared corresponding cell values element linked list match found case large number raw ethernet channels open performance may improved replacing linked list hash table tcp ip transmission control protocol internet protocol composite point point protocol outer protocol ip inner tcp refer single filter protocols together identify endpoint reality separate protocols combination following fields uniquely identifies tcp ip endpoint ethernet type ethernet protocol ip version ip protocol transmission protocol ip protocol specifies tcp protocol destination port tcp protocol destination address ip protocol source address ip protocol source port tcp figure tcp ip composite header notice fields three different protocols uniquely identify channel corresponds traversal packet filter dag upf designed fast means interests speed want drop packet contention soon realized packet demultiplex endpoint preceding fields know packet ip ethernet type field match ip x optimization ip ethernet cell always located head ethernet level linked list since ip demultiplexing expensive results single ethernet type check point know packet type ip next level dag check protocol ip version number protocol un defined e tcp udp case tcp ip version number match filter ip version number packet dropped results traversing linked list protocol cells referred source code ip proto cells match isn found figure ip protocol level upf dag match found descend another level dag point drop packet destination port tcp protocol exist filter since many possible ports perform lookup hash table hash table connected ip proto cell corresponding tcp protocol hash function defined within source code function hash func port since possible multiple channels exist combination might necessary traverse hash chain ip channel hash cells cells contain destionation port number pointer channel hash table figure tcp ip channel hash level upf dag remaining fields ip source addr ip destination addr tcp source port uniquely identify tcp channel hash function used defined function hash func chan source code hash table connected ip channel hash node one node connected single index hash table hash function meant spread different channel combinations chain ip channel nodes walked figure tcp ip channel level upf dag match found ip channel linked list demultiplex packet corresponding endpoint summary demultiplexing tcp ip packets requires traversing dag protocols note current implementation support ip fragmentation would natural extension tcp ip well udp ip udp ip user datagram protocol traversal dag udp ip nearly identical tcp ip difference two protocols udp ip connection less tcp ip always connection oriented means possible establish unicast channels multicast broadcast channels well traversal dag udp ip requires seven fields used tcp ip difference channel setup time unicast multicast broadcast channel type selected user creates unicast channel traversal dag occurs exactly tcp ip except transmission protocol udp choosing open multicast channel results creating new level dag graph traversal proceeds tcp ip way ip channel node udp ip channel node contains x cast field set either unicast mcast bcast field mcast descend level linked list ip mcast cells figure udp ip mulitcast level upf dag node linked list corresponding ip channel address information pointers different channels event multicast ip channel matched walk entire ip mcast linked list demultiplex ip mcast cell ip channel node type bcast must demultiplex every active channel port dest port results traversal every hash chain every index hash table connected ip channel hash node packet demultiplexed every unicast multicast channel open port another broadcast channel encountered ignored since broadcast already taking place multicast channels result demultiplexing many channels involves copying entire packet multiple regions user memory many multicast channels open broadcast channels result even poorer performance since packet must demultiplexed every open channel port general multicast broadcast channels may useful incur severe performance overhead wild card channels ip tcp ip udp ip composite protocols support wild card channels order demultiplex endpoint minimal requirements specify ip ethernet type ip version number transport protocol destination port must specified remaining fields ip destination address ip source address source port remain un specified declared wild channel creation combination wild card fields results seven distinct wild card priority levels illustrated figure ip channel hash table priority levels combination wild ip source address forms highest priority combination wilds creates lowest priority wildcard channels pick packets matching channel next highest priority level functionality built hash func chan ip channel hash table partitioned hash entries indexed hash buckets graph traversal packet reception packet cannot demultiplexed via indexed hash chain traverse priority level corresponding destination port matching wild card channel found upf demultiplexes channel graph traversal ends upf continues searching next lowest priority level exhausted time packet dropped note udp multicast broadcast channels implemented wild card channels since channels definition connection less ip source address source port fields wild side setup matching multicast broadcast channel requires exactly hash misses missed index preceding wild card priority levels u net parallel program rely heavily ip multicast broadcast scheme may require alteration boost performance using upf u net benchmarks demonstration programs obtain copy upf u net source tree saving link upf code designed run linux system fast ethernet however extremely portable u net system running fast ethernet version tested bench marked linux using u net kernel patch see u net supporting documentation source tree contains following items source code u net packet filter extension dev tulip upf modified u net device driver dev tulip devtulip smc tulip fast ethernet card user level interface library u net libunet libunet upf user level interface routines creating channels libunet conversion program demonstrates functionality upf u net test complex c several bench marking programs minimum latency pingpong completions stand unet eth ip raw unet raw ethernet ip tcp respectively programs also found test directory f supporting documentation document found directory docs performance benchmarks u net packet filter evaluated using mhz pentium mhz pentium connected fast ethernet switch programs pingpong unet pingpong eth pingpong ip used test roundtrip times sending messages using raw unet raw ethernet tcp ip respectively forty byte packets sent per test following results taken several runs roundtrip time raw unet us message roundtrip time raw ethernet us message roundtrip time tcp ip us message raw ethernet performed slower raw unet tcp ip performed slower raw unet slower raw ethernet raw ethernet performance expected traversal dag free requires cycles tcp ip performance little disappointing especially since channel test connection oriented channel open testing however significant performance drain could partially attributed hash lookups implemented ip filter order demultiplex tcp ip channel packet must traverse two hash table lookups current implementation hashing functions use modulo operator modulo hash function taken number available hash buckets use modulo operator incurs large expense might explain significant portion tcp ip performance drain one way hash functions improved would replace modulo operations alternative similar operation order hash packet one available hash buckets rather use modulo could logically result hash function mask corresponding log base size hash table would perform function similar modulo operation enormously reducing computational expense operation undoubtably numerous optimizations one make packet filter enhance performance left future work go adding new filter upf filter combination cells hash tables connected together meeting second design goal integration new filter upf meant modular module requires least routines add protocol routine dynamically add channel prototype dag filter installed channel type filter also installed add protocol routine fails channel creation point error must un done find protocol routine fast responsible demultiplexing packets endpoints deactivate protocol routine dynamically removes channel dag de allocates memory associated channel channel last channel protocol entire protocol deactivated routine important long running processes channels created destroyed based run time conditions important memory recycled accounted routine important short running programs benchmarks since upf shutdown routine de activate entire dag data structure current implementation supports different filters raw ethernet ip tcp udp segmented protocol exactly essential routines see source code aforementioned routines exists every module actually one find protocol upf system upf findchannel however routine broken c case statements essentially breaking task demultiplexing composite headers protocols designer new filter feel free define cell types necessitated new filter designer feel free modify actual cell structure improve overall packet filter design also define new hash functions needed memory management memory allocatation upf system chained together pointer tulip device structure new cells hash tables allocated new wastebucket structure added garbage collecting list wastebuckets wastebucket points towards allocated structure structure turn points back corresponding waste bucket call upf shutdown results traversal wastebucket bucket data structure points de allocated since structure points corresponding wastebucket call upf deactivate results proper maintenance watebucket linked list possible extensions upf througout document possible extensions upf mentioned section discuss current implementation upf handles multicast broadcast channels however order properly join multicast group process needs access ip multicast ethernet address resolver de facto way via igmp therefore addition igmp filter upf might good idea group u net processes need dynamically need create new ip channels would also require way resolve straight ethernet ip address translations addition address resolution protocol arp filter upf would also make logical extension general many extensions made upf required needs u net user conclusions attempt create packet filter used u net successful believe original design goals met however beginning still lot work must done developing u net u net packet filter particulary case upf performance improved improvements current hashing implementation tweaks source code general probably boost overall perforance filters acknowledgments would like thank following individuals advice guidance suggestions designing developing upf gerry toll werner vogels anindya basu theodore wong professor thorsten von eicken references mary l bailey burra gopal michael pagels larry l peterson prasenjit sarkar pathfinder pattern based packet classifier proceedings first symposium operating systems design implementation usenix association november thorsten von eicken anindya basu vineet buch wernel vogels u net user level network interface parallel distributed computing draft sosp cornell university august dawson r engler m frans kaashoek dpf fast flexible message demultiplexing using dynamic code generation association computing machinery inc kamran husain tim parker linux unleashed sams publishing indianapolis chris maeda brian n bershad protocol service decomposition high performance networking carnegie mellon university steven mccane van jacobson bsd packet filter new architecture user level packet capture lawrence berkeley laboratory december matt welsh implementing loadable kernel modules linux loading unloading kernel modules running system dr jobb journal matt welsh thorsten von eicken u net protected user level networking interface cornell university march gary r wright w richard stevens tcp ip illustrated volume addison wesley publishing company new york masonobu yuhura chris maeda brian n bershad j eliot b moss deultiplexing multiple endpoints large messages carnegie mellon university