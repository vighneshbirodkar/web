date tue jan gmt server ncsa content type text html last modified wed nov gmt content length programming www fall assignment programming world wide web homework due november hand code assignment write answers following questions mail grader igor question asks describe situation describe sequence actions one threads might perform example two threads first thread thread two things thread thing point go wrong code condition wait replaced condition wait describe situation problem occurs points complete source code java vector class describe situation following code returns element position static void m vector v return v elementat problem happen code static synchronized void m vector v return v elementat problem happen code static void m vector v int return v elementat problem happen code static void m vector v synchronized v return v elementat point size method vector synchronized bug elementcount long instead int think bug describe situation exhibits bug point assuming elementat method synchronized describe situation call would throw arrayindexoutofboundsexception saying index negative even though index actually positive points lecture mentioned threads could used improve latency balanced binary tree operations rebalancing background design system understand balanced binary trees problem know following balanced binary tree data structure three operations insert delete lookup insert puts item tree delete removes item lookup finds item based key insert delete result unbalanced tree tree still behaves correctly unbalancing becomes severe performance suffer signatures methods public class balancedbinarytree public synchronized void insert string key object value public synchronized void delete string key public synchronized object lookup string key design insert delete return immediately performing respective operations wait around rebalancing happen aside design keep mind might many threads may using many trees submit english language description design clearly specify relevant methods balancedbinarytree class classes might use forget say methods synchronized thread design give approximate priority thread say whether daemon thread may supply code snippets wish must describe everything english completely correct uncommented implementation worth zero solution graded correctness efficiency clarity good object oriented design last updated