date tue jan gmt server ncsa content type text html last modified tue jun gmt content length osa tutorial page object oriented systems analysis osa tutorial page tutorial students computer science software creation individuals wishing learn osa model systems analysis defined study specific domain interacting objects purpose understanding documenting essential characteristics key words used definition study understanding documenting osa object oriented modelling technique study understanding documenting system occur final osa documents contain results study performed convey understaning gained systems analyst document consists brief description model driven analysis discussion temporal logic osa concludes summary different components osa model instance model driven analysis osa model driven analysis technique three different levels osa model hierarchy meta model model instance data instance osa meta model describes valid model instances model instance model specific system air traffic control system plant nursery database data instance system contains real world data examples data instances salt lake city international airport air traffic control system cherry hill nursery database analogy osa model hierarchy programming language world data instance c program model instance c compiler meta model yacc description c programming languages smalltalk allow programmer access meta model modeling techniques allow meta model information model instance level seamless osa seamless analyst access meta model level information model instance also osa meta model described osa model instance power seamless property revealed throughout tutorial model driven analysis vs method driven analysis osa model driven gives meta model valid osa models osa models turn describe valid system data behavior osa give step step procedure analyzing documenting system instead allows analyst create model system example difference model method problem finding way terminal airport people either ask steward way specific terminal receive step step instructions look airport map steward tell person go breezeway turn left cafeteria go escalator turn right however person misread ticket arrived wrong terminal ask another steward get correct terminal contrast person looks airport map gives abstract view airport reference position arrow person able find way terminal misread ticket recall mind terminal f relation terminal c able find way model driven method driven analysis techniques merits tutorial contain hyperlink method driven approach osa future however tutorial chiefly concerned model driven approach describe approach detail temporal logic osa temporal logic incorporated data instance level simply put data instance change time given time certain object may part data instance particular model however object may part data instance time prior may part data instance time reflects temporal nature data files operating systems created used deleted memory programming languages allocated used freed bank customers open checking accounts deposit money take loans cash checks pay loans close accounts temporal logic necessary part modelling technique attempts model real world systems data time osa defined set non negative integers hence time system first begins operating smallest increment time anything occuring smaller time increment considered instantaneous data instance time equal data instance time data instance changed time increment components osa every model instance osa consists three component models object relationship model orm object behavior model obm object interaction model oim high level components hl object relationship model describes different objects object classes relate one another people names airplanes registry numbers husbands married wives leaves parts plants boys scouts earn merit badges relationships binary nature relationships involve two objects classes person could take trip june flight salt lake international airport aboard aircraft na leaves mst arrives chicago cst complex relationships part nearly every system object relationship model allows analyst keep tabs objects related one another object behavior model allows analyst construct abstract computation machine called state net models behavior objects particular object set state net non deterministic machine allows multiple threads processed hence object one states activated one time thread change states passing transitions transition consists trigger action common triggers switch activations key presses mouse clicks receiving message change conditional value example person reaches age person becomes teenager could transition child state teenager state trigger would condition person age greater equal trigger true object also initiate action associated particular state transition key pressed corresponding action trigger character echoed screen trigger actions allow objects able react input generate output object interaction model allows analyst model interaction communication objects various classes person talk another person employee complain boss client request service data server interactions easily modeled object interaction model interaction two object sets name list objects sent source destination another list object returned sender receiver basic form interaction originates action object set state net influences triggers another object set state net however also used general high level communication model order keep track object sets influence one another large projects modeled osa tend become large confusing order combat problem high level components developed high level components abstract arbitrarily large portions information osa diagram high level components exist objects object sets relationship sets states transitions interactions high level components useful quick overview system needed clear understanding system modeled achieved abstraction model kitchen would high level objects oven microwave refrigerator sink cupboards among things within high level objects parts behaviors interactions would modeled however would easy see main parts kitchen along primary functions