mime version server cern date sunday nov gmt content type text html content length last modified wednesday mar gmt incremental compuation deriving incremental programs deriving incremental programs objectives engaged ambitious effort derive incremental programs automatically semi automatically non incremental programs written standard programming languages approach contrasts earlier approaches aimed incrementally evaluate non incremental programs essence every program computes fixed point iteration expressed recursive functions loops loop optimizations important loop body regarded program f parameterized induction variable x incremented iteration change operation efficient iterative computation relies effective use state e computing result iteration using stored results previous iterations strength reduction related techniques crucial performance given program f input change operation program f computes f x y efficiently using result previous computation f x called incremental version f sometimes information result f x needs maintained used efficient incremental computation f x y call function computes information extended version f thus goal computing loops efficiently corresponds constructing extended version program f deriving incremental version extended version input change operation general incremental computation aims solve problem sequence inputs differ slightly one another making use previously computed output computing new output instead computing new output scratch incremental computation fundamental issue relevant throughout computer software e g optimizing compilers transformational program development interactive systems results thus far partitioned problem deriving incremental programs three subproblems p exploiting result e return value f x p caching maintaining exploiting intermediate results computation f x p discovering computing maintaining exploiting auxiliary information x e information computed f x summarize essence methods p systematic derivation incremental programs gave systematic transformational approach deriving incremental version f program f input change basic idea identify computation f x y subcomputations also performed computation f x whose values retrieved cached result r f x computation f x y symbolically transformed avoid re performing subcomputations replacing corresponding retrievals efficient way computing f x y captured definition f x y r p caching intermediate results program improvement gave method called cache prune statically transforming programs cache intermediate results useful incremental computation basic idea extend program f program f bar returns intermediate results ii incrementalize program f bar obtain incremental version f bar f bar using method p iii analyze dependencies f bar prune extended program f bar program f hat returns useful intermediate results prune program f bar obtain program f hat incrementally maintains useful intermediate results p discovering auxiliary information incremental computation proposed novel approach finding auxiliary information auxiliary information definition useful information x computed f x one find key insight proposal consider candidate auxiliary information f intermediate computations incremental version f depend x incremental version obtained using techniques developed solving p p use techniques developed solving p p instead p candidate auxiliary information includes auxiliary information useful efficiently maintaining intermediate results one discover pieces candidate auxiliary information useful used proposed b extend f candidate auxiliary information apply techniques used methods p p obtain extended version incremental extended version together compute exploit maintain useful intermediate results useful auxiliary information thus one hand one regard method p extension methods p p hand one regard methods p p suitably revised different applications aids solving p modular components complement one another form comprehensive principled approach incremental computation therefore also efficient iterative computation generally although entire approach seems complex module step simple cachet interactive incremental attribution based program transformation system deriving incremental programs describe prototype implementation ideas