mime version server cern date tuesday jan gmt content type text html content length last modified friday apr gmt overview seuss overview seuss currently working project called seuss research proposed seuss based two observations applications implemented networks processors future significantly ambitious current applications mostly involved transmissions digital data images many programming concepts developed databases object oriented programming designs reactive systems unified concise model distributed programs serve foundation designing future applications research multiprogramming traditionally attempted reconcile two apparently contradictory goals possible understand module e g process data object isolation without considerations interference modules possible implement concurrent threads fine level granularity process ever locked accessing common data long periods time goals conflict fine granularity general implies considerable interference earliest multiprograms see instance solution mutual exclusion problem dijkstra trivially small impossibly difficult understand behaviors individual processes could understood isolation possible interactions among processes analyzed explicitly since much effort gone limiting even eliminating interference among processes employing variety synchronization mechanisms locks semaphores critical regions monitors message communications constraining programming model specific protocol binary semaphores message communication bounded channels instance prove short sighted designing complex applications general mechanisms interactions among modules include specific protocols required distributed applications future essential devise model distinction computation communication removed particular methods designing reasoning interfaces different employed computations nodes network seuss fosters discipline programming makes possible understand program execution single thread control yet permits program implementation multiple threads consequence possible reason properties program single execution thread whereas implementation specific platform e g shared memory message communicating system may exploit inherent concurrency appropriately central theorem establishes multiple execution threads implement single execution threads e property proven latter property former well major point departure seuss built concurrency commitment either shared memory message passing style implementation specific communication synchronization mechanism except procedure call built model particular notions input output complementary nature rendezvous based communication outside model distinction computation communication process specifications interface specifications distinguished consequently many traditional multiprogramming concepts processes locking rendezvous waiting interference deadlock basic concepts model yet typical multiprograms employing message passing bounded unbounded channels encoded seuss declaring processes channels components program similarly shared memory multiprograms encoded processes memories components seuss permits mixture either style programming variety different interaction mechanisms semaphore critical region phase handshake etc encoded components seuss proposes complete disentanglement sequential concurrent aspects programming expect large sections code written understood reasoned sequential programs view multiprogramming way orchestrate executions sequential programs specifying conditions program executed typically several sequential programs execute simultaneously yet guarantee executions non interfering hence program may regarded atomic propose efficient implementation scheme using user directives interleave individual sequential programs fine granularity without causing interference references e w dijkstra solution problem concurrent programming control communications acm c r hoare communicating sequential processes prentice hall international london r milner communication concurrency international series computer science c r hoare series editor prentice hall international london