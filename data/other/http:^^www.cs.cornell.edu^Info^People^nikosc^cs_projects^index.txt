mime version server cern date sunday nov gmt content type text html content length last modified thursday dec gmt masters engineering projects year projects address issues associated development environment designing specifying implementing testing adaptive mesh refinement amr methods tackling complex problems ex d spiraling coalescence two black holes computational sciences participants development environment opportunity work specific projects developed individually time require degree interaction design validation testing phases thus addition opportunity acquiring specific skills knowledge working narrow interesting problem opportunity see understand procedure designing implementing complex software parallel distributed platforms given projects intelligent graphical user interface amr parallel runtime support system amr dynamic load balancing algorithms amr parallel pde solvers using amr methods parallel structured grid generation d d complex geometries scientific computing benchmarks multithreading parallel distributed platforms study impact restructuring cg scalar algorithms codes terms cg performance mpps intelligent graphical user interface amr gui amr project requires design implement intelligent frond end specifying d geometries operators various parameters required solve numerically time dependent pde problems project consist two components problem specification b visualization existing problem solving environment pse pellpack extended project recommended students interest guis pses o general front ends high performance computing environments parallel runtime support system amr prts amr project requires design implementation communication threaded modules requirted efficient implementation data movement control primitives parallel amr methods existing communication software like mpi ams threaded packages like qt ports utilized project recommended students interests systems parallel o parallel compilers computational sciences interaction bernoulli split c projects expected dynamic load balancing algorithms amr dlb amr project requires development implementation evaluation dynamic load balancing algorithms amr direct like generalized spectral bisection derivatives space filling curves ii incremental objective develop dlb amr module prts amr ii acquire useful knowledge solving instance difficult combinatorial optimization problem dynamic load balancing adaptive computations network time memory sharing heterogeneous workstations mpps existing algorithms software extended new ones build project recommended students interests solution practical optimization problems related parallel distributed computing parallel pde solvers time dependent problems using amr methods project requires implementation library routines discretization solution d d wave equation mpps smps non threaded multithreaded paradigms used evaluated addition accuracy stability multithreaded computations analyzed high performance languages like hpf low level like fortran c plus message passing used project recommented students interests parallel numerical computing scalability analysis interaction prts amr project expected parallel structured grid generation d d complex geometries project requires development parallel algorithms implementation library parallel grid generation modules using algebraic methods elliptic methods moving algebraic methods high performance languages like hpf low level like fortan c plus message passing used project recommented students interests parallel numerical computing existing state art scalar algorithms code used interaction wlib amr expected scientific computing benchmarks multithreading parallel distributed platforms study impact restructuring cg scalar algorithms codes terms cg performance mpps project requires development conjugate gradient algorithm suitable multiprocessors includes implementation cg using typhoon parallel compiler issues related expensive dot product operations studied much algorithm restructuring help improving performance compared well known cg algorithm worth effort possible increase space complexity much code restructuring help improving performance compared straight forward cg code worth extra step exploring functional parallelism top data parallelism much cost use multithreading implementing functional parallelism ii masking global address space overheads overhead worth increase software complexity error stability information contact