date wednesday nov gmt server ncsa mime version content type text html last modified friday oct gmt content length high performance synchronization nsf grant ccr high performance synchronization shared memory parallel programs computer science department university rochester rochester ny increases size availability parallel processors shared memory programming models high performance synchronization becoming increasingly important several groups including demonstrated recent years software synchronization algorithms scale well large numbers processors avoid certain negative interactions high performance scheduling algorithms continuing research several directions including mechanisms cooperative synchronization scheduling minimize unnecessary spinning maximize processor locality avoid contention lock non lock data comparative evaluation alternative mechanisms atomic update shared data structures including locks non blocking synchronization function shipping implementation atomic hardware primitives scalable architectures evaluation interaction synchronization coherence new synchronization algorithms principal investigator michael l scott associate professor department chair scott cs rochester edu recent graduates leonidas kontothanassis bob wisniewski graduate students maged michael galen hunt srinivasan parthasarathy publications project specific papers systems technical report archive pseudocode scalable spinlocks barriers includes test set ticket locks queue locks centralized tree based fft style butterfly barriers tocs paper scalable busy wait reader writer locks includes reader preference writer preference fair locks ppopp paper scalable adaptive combining tree barriers combine local spinning logarithmic critical paths amortization overhead skewed arrival fuzziness ijpp paper variations lamport fast mutual exclusion lock use atomic instructions read write ur tr submitted publication preemption safe scheduler conscious synchronization algorithms includes two queue based mutual exclusion locks test set ticket locks fair scalable queue based reader writer lock competitive optimal time small scale barriers scalable barrier algorithms avoid busy waiting action preempted processes including waiting line fifo queue ticket lock employ widened kernel user interface revised ur tr appear acm tocs highly concurrent multi lock concurrent priority queue uses bottom insertions bit reversal choice among fringe nodes fast concurrent queue algorithms believe algorithms best concurrent queues available almost application executable code basic scalable spinlocks barriers code run sequent symmetry bbn butterfly bbn tc scalable busy wait reader writer locks code run bbn tc scalable adaptive combining tree barriers code run bbn butterfly bbn tc kendall square ksr variations lamport fast mutual exclusion lock code run silicon graphics iris preemption safe scheduler conscious synchronization algorithms code run kendall square ksr silicon graphics challenge highly concurrent multi lock concurrent priority queue code run sgi challenge fast concurrent queue algorithms includes sgi challenge code two lock non blocking queues previous algorithms researchers last change august scott cs rochester edu