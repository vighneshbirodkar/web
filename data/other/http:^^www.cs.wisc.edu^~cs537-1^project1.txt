date tue nov gmt server ncsa content type text html last modified thu oct gmt content length cs programming assignment cs programming assignment due september start class contents introduction suggestions scanning commands using threads exceptions grading stuff introduction purpose assignment introduce java programming implement simple shell command interpreter behaves similarly unix shell type command response prompt create thread execute command entered multiple commands chained together single line separated ampersand characters shell create thread individual command prompt user input finished unlike real shell program deal handful built commands cat file print contents named files system one cmp file file check whether two files identical contents print appropriate message system sort file print lines file sorted lexicographic order exit terminate program also terminate reaching end file system needn implement pipes re direction standard input standard output must able handle arbitrary number commands per line arbitrary number arguments separated arbitrary amounts white space blanks tabs although cat takes two arguments suggestions public static void main procedure primary class quite simple infinite loop prints prompt reads line courses program infinite loop considered bad thing operating systems norm parses breaks constituent commands starts new thread handle different commands waits threads finish printing next prompt scanning scanning may find easier read entire line string object system object type inputstream read either single bytes arrays bytes could represent input line array bytes find much easier use string instead may want look class datainputstream figure read line string tokenizing string made almost trivial using stringtokenizer class found java util commands cat command look class fileinputstream see read data file cmp similar cat time contents two files compared sort efficient sorting algorithm required anything works ok might want adapt insertion sort used introduce java discussion sections classes might help datainputstream class vector class using threads primary class read command user create thread carry command wait thread finished continuing execution two ways start threads java first derive class thread class override run function see pp text second use runnable interface pp create class implements interface pass reference class constructor new thread object former perhaps easier understand conceptually latter general may choose either method assignment exceptions java requires place within try block methods might cause exception following try block catch clause catch clauses used catch exceptions thrown see chapter details syntax statements code deal exceptions appropriate manner example exceptions attempting open file exist result message user continuation program serious exceptions may require error message followed program termination using system exit grading hand source program transcript terminal session demonstrates shell ability perform specified see script sure use test data adequate exercise program capabilities follow principles software engineering learned cs cs including top design good indentation meaningful variable names modularity helpful comments graded basis correctness also programming style completeness test data stuff writing programs solaris machines might consider using makefile aid compilation using dos may want look doskey little program provides easy command manipulation feel free send work saving methods find ta distribute class solomon cs wisc edu thu oct cst copyright marvin solomon rights reserved