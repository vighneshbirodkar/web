date mon nov gmt server ncsa content type text html last modified fri sep gmt content length cs project ideas cs fall term project ideas marvin solomon solomon cs wisc edu last updated fri sep cdt contents general comments due dates project proposal project suggestions naming large computer networks group communication security audit file servers workstations load balancing security authentication random software testing navigating world wide web topology web self perpetuating programs general purpose transaction package distributed shared memory performance study distributed persistent garbage consumer reports condor specialized nfs servers shore uw madison research projects tempest general comments projects intended give opportunity study particular area related operating systems projects require test implementations measurement studies simulations combination require literature search begin project suggestions briefly stated intended guide particular areas expected expand suggestions full project descriptions gives freedom selecting area burden defining project may issues listed project cover would prefer think topic listed might want come talk work reasonable project description projects appropriate groups two upper bound size group beware groups persons hard manage get involved labor disputes hang together hanged separately feel free ask opinions whether size proposed team appropriate given project cases project area straddles boundary operating systems area database architecture artificial intelligence programming languages projects intended students background interests second area explore interface intended substitutes regular courses second area example little background database take cs choosing topic requires database sophistication topics call careful literature search proposal due date due dates project proposal due tuesday october final report due thursday december project proposal hand expanded description project see due date free turn sooner project proposal brief two pages less specific intend must long enough convince reasonable achievable project e trivial large may revise description acceptable project description describe problem addressing go working project steps take results expect expect produce resources need brief schedule project must reasonably well written projects involve implementation simulation indicate resources required make ordered list features together current best guess intend accomplish together contingency plans case unforeseen problems definitely b turns impractical however b instead time allows also c things go especially well would also like try d e f order already done substantial amount background work project writing proposal example intend simulation familiarized available software tools decided appropriate intend build useful tool threads package distributed make tool know tools built described open literature reason shouldn something done main purpose project learning done learn previous attempts learn mistakes rather simply repeating review proposals offer comments sketchy proposals get sketchy comments also indicate opinion quality proposal project report end semester hand project report length vary depending type project paper pages unless get specific prior approval longer report famous person wrote letter please excuse length letter time make shorter cases quality writing factor grade also make short oral presentation class appropriate demonstrate software peer reviewing project report read reviewed least one person class select person person critique paper use critique revise paper project suggestions naming large computer networks consider naming resources e g mail address servers etc distributed environment many computers environment might include universities companies government agencies areas might include environments e g university might include cs department computer center ece department etc name service environment special purpose distributed database server register services registration includes description service provided e g mail delivery information necessary use service e g connect address port client look specific service e g deliver mail host gjetost cs wisc edu make generic request e g find nearby printer allows student access supports postscript design name service environment issues performance local autonomy scope authority reliability protection expandability may discussed names used studies might find limits size environment design able support evaluate design pilot implementation simulation background read grapevine clearinghouse arpanet domain name service see specific references group communication several researchers developed protocols software packages facilitate communication among processes distributed program process supplies information delivering messages system consumes registering requests system forwards message processes expressed interest details differ considerably among various proposals examples include field system brown university isis system cornell linda language university maryland numerous proposals may seen variations theme including past proposed projects dregs condor switchboard among dimensions variability implementation systems implemented central server others fully distributed using broadcasts messages requests possibilities include establishment explicit routing trees using central server introduce processes one another allowing engage bilateral multilateral communication thereafter reliability security systems go great lengths cope process network failures authentication security order delivery others largely ignore problems matching synchronization systems differ criteria matching messages requests simplest approach require exact match message message type request specifies interest messages type schemes involve regular expression string matching general boolean expressions prolog like unification related issue whether message delivered single process perhaps priority ordering multicast interested saved may request future requests blocking non blocking data types messages may simple untyped byte strings may typed structures system may provide type checking facilities make sure receiver interprets data sender intended may even provide automatic data conversion among integer floating point representations character sets etc concrete example linda maintains single conceptually global tuple space linda provides primitives put adds tuple tuple space get waits tuple give first component appear removes space read waits matching tuple remove space security audit properly managed computer system secure illegal entry normal users able obtain privileges beyond given systems everyday security holes normally considered violation standards ethical behavior take advantage holes however tiger team team specifically authorized find many security holes possible report responsible management select facility computer sciences department elsewhere find demonstrate document many security problems possible may attack system either position ordinary user account special privileges point view outsider someone supposed able access facility find many security problems possible problems include system flaws improper management careless users results study report problems suggestions fixes system system design changes management procedures explore denial service attacks jamming networks crashing systems warning project kind must approved advance person responsible facility proposing attack file servers workstations workstations available without local disks bulk storage provided combination remote file servers local disk local ram memory servers provide remote devices remote files abstractions variety schemes providing seamless global file service suggested including remote disk simulation remote file access e g nfs sun microsystems whole file caching local disk carnegie mellon itc system andrew file system use large local ram file caching sprite system berkeley locus system also studied ideas transparent global file naming design scheme file access network workstations specify functionality provided server responsibility client workstation want discuss reliability fault tolerance protection performance compare design designs published literature evaluate design performing simulation see spritely nfs paper srinivasan mogul award winning paper shirriff ousterhout winter usenix see copy examples similar studies see also related papers sosp proceedings last several years load balancing many systems locus sprite condor allows start processes machine move processes execution access files transparently across machine boundaries automatic placement processes system resources could substantially improve overall system performance several interesting issues load balancing including collection data load balancing make load balancing decision might need data machine network many forms data take many designs communicating among machines must decide data needed data must come must communicated problem becomes interesting scope large network computers machines want consume huge amounts system resources making decisions want make decisions based extremely old data policies load balancing decisions decided move process base decision frequently move processes thrashing like environment groups processes cooperating metrics load evaluation load metrics use evaluating individual machine capacity related processing storage communication measure accurate reflections machine performance demonstrate file migration move files well processes move files vs processes one needed better tell warned quite easy suggest many plausible schemes load balancing easy evaluate therefore major component project area evaluation simulation security authentication popek kline paper reading list discusses use encryption authentication distributed systems considers conventional public key schemes one popular implementation based ideas kerberos system mit kerberos used provide secure remote login file transfer remote file access use kerberos ad hoc package enhance security existing system random software testing suggestion prof bart miller past fall cs students work random software testing result pretty nice paper submitted cacm one interesting result utilities gnu linux substantially crash resistant ones seven commercial systems tested sunos solaris aix ultrix hp ux irix nextstep bunch things done work test new bsd unix systems netbsd freebsd bsdi test applications windows macs test system library interfaces d happy help supervise projects area navigating world wide web world wide web growing unbelievable pace tremendous amount information available finding want next impossible quite line search engines created aid resource location web check directory pull menu netscape examples particular note webcrawler written wisconsin alumnus brian pinkerton recently sold america online reputedly million lots ways tackling problem none discovered thus far entirely satisfactory among variables design space server support provider information cooperate advertising search entirely client driven caching search start scratch sort database used guide search latter case database kept client server somewhere created stale information detected updated cache purged valid seldom referenced information search strategy search determine information interest user determine links traverse order know gone far enough topology web project closely related previous suggestion collect analyze information current structure web web viewed vast directed graph gather much information graph analyze average number links page average size page average distance pages two ends link distance number links along shortest path generally distributions statistics things vary time information project would great interest people proposing algorithms traversing web project two distinct parts potentially quite challenging gathering data analyzing self perpetuating programs worm program propagated across many machines automatically repairing parts damaged destroyed worm extremely difficult kill design strategy building worms one systems also need determine might constructively use worm program e applications type program project could involve design test implementation study evaluation implementation generic structure take large class algorithms automatically make worm type programs general purpose transaction package concept transaction sequence actions executed atomicly either commit reliably preserved forever abort completely undone developed context database systems transactions useful many areas outside traditional database applications design implement portable transaction package look camelot developed context mach libtb built margo seltzer described recent usenix proceedings distributed shared memory great deal interest recently architecture called distributed shared memory basic idea simulate shared memory multiprocessor programming model top distributed system local area network altering page fault handler traditional operating system fetch pages network rather local disk sosp contains paper operating system called munin explores tradeoffs page placement replacement policies support variety applications efficiently explore issues constructing simulation see also wisconsin wind tunnel wwt project related research performance study monitor one computer science department machines networks determine characteristics bottlenecks sorts programs producing load causes spikes usage corresponding drops response example recent usenix conference matt blaze describes publicly available program eavesdropping nfs traffic local area ethernet gathering statistics install program use gather statistics compare similar data literature see also suggestions regarding distributed file systems distributed persistent garbage problem garbage collection finding reclaiming space allocated inaccessible objects well studied almost years algorithms roughly classified explicit deletion data ll throw away want reference counting last one please turn lights mark sweep unclaimed goods recycled generational ashtray full time buy new car recently resurgence research garbage collection spurred two developments distributed systems throw away somebody france may still want persistent programming languages pampers problem thing worse garbage persistent garbage well known garbage collection algorithms work fine physical virtual memory terrible pointers cross continents disk cylinders interesting algorithms disk based distributed environment proposed see references study algorithms either suggest improvements implement study performance consumer reports many people generating software making freely available network anonymous ftp often several packages available similar purposes much software worth exactly costs good better expensive commercial products select two related programs careful comparative critical review depending nature programs review might benchmarking study relative performance analysis functionality ease use combination factors one area particular interest file accessing indexing packages cs would call low level database facilities examples wiss exodus storage managers written dbm libdb packages berkeley latter yet released bsd version unix early version code related suggestion compare implementations unix alternative ways achieving function different ways example consider question best way get data one process another various flavors unix use tcp udp unix domain sockets pipes fifo shared memory files least three different flavors remote procedure call answer depends versions unix involved various characteristics communication desired amount data transferred sizes messages whether replies required degree reliability needed etc ve written rough program tests many techniques would like someone polish program bit use evaluation many ipc mechanisms available condor condor locally written utility makes unused cpu power idle workstations available productive use daemon process workstation monitors activity reports central resource manager client wishes run long cpu bound program contacts resource manager obtain name idle workstation contacts selected server workstation sends job executed jobs run condor linked version c library handles system calls specially file o calls turned requests sent back shadow process running submitting host server workstation become non idle job finishes job checkpointed restarted another workstation pool one user condor program successfully complete consuming cpu days period spanned department move new building several enhancements condor considered security server security seems adequate application processes runs non privileged guest user id control trusted starter kill time providing security condor users seems much tricky problem shadow design runs uid job owner person privileges vulnerable spoofing software server machine assume server workstation owned hostile user super user capabilities problem becomes quite difficult design implement mutual authentication protocol perhaps using kerberos package multiprocess jobs currently condor supports jobs consisting single unix process condor support unix fork call design extensions condor support collection processes connected pipes design must deal problems co scheduling making sure processes running time maintaining connections processes checkpointed moved condor lite condor designed single processes consume many hours cpu time fixed overhead makes condor impractical short jobs c compilation consider use condor machinery produce network make facility enhancements suggested mike litzkow principal implementor maintainer condor include execution condor jobs across wide area networks support parallel programming model pipe fork exec e g linda sophisticated matching jobs available resources checkpointing mechanisms require less data movement implementation applications well suited condor capabilities really show power applications trendy areas code decryption genetic engineering obvious choices current implementation condor available anonymous ftp specialized nfs servers unix file system interface provides convenient abstraction variety data beyond ordinary files example classic unix makes o devices communication channels pipes look like files flavors unix support kinds objects look like files including network connections named pipes shared memory regions network file system nfs provides convenient path adding new kinds file like objects without modifying operating system kernel nfs server running user level process mounted unix name space requests open read write files space forwarded server trick used capitl program development environment shore object oriented database system allow access database objects legacy applications compilers editors grep etc without need modify even re link written package c classes encapsulate messy details nfs protocol create nfs server kit implement necessary data structures simulate unix file behavior use kit provide unix compatible veneer service representative example ftp write server allows navigate space files accessible via anonymous ftp part local file system shore shore experimental object oriented database developed department combines many features traditional databases concurrency control recovery high speed bulk operations object oriented databases fine grained strongly typed objects identity file systems hierarchical name space secure protection objects unix compatibility write persistent application using facilities shore critically evaluate well served needs work extend improve shore way see ideas uw madison research projects detailed descriptions several research projects mentioned available via cs department home page projects listed would welcome participation interested students tempest markhill reggiano cs wisc edu mark d hill date mon feb cst project think would interesting background future parallel computers must execute efficiently hand coded applications also programs written high level programming languages today machines limit programs single communication paradigm message passing shared memory results uneven performance address problem developed tempest interface supports shared memory message passing hybrid applications tempest enhances portability parallel programs allowing low cost networks workstations provide abstractions e g shared memory high performance parallel machines tempest interface consists low level communication memory system mechanisms policies shared memory implemented user level software allows programmers compilers customize policies application semantics sharing patterns experiments show custom cache coherency policies produce upto order magnitude performance improvement wisconsin wind tunnel project developed implementations tempest cm cluster workstations cow sun ss running solaris complete portability story facilitate program development would like see tempest run single workstation either uniprocessor multiprocessor project implement tempest processes run single two processor node cow key challenge implementing messaging functionally looks exactly version sends messages nodes interested groups read paper talking solomon cs wisc edu fri sep cdt