date thu nov gmt server ncsa content type text html last modified fri nov gmt content length vis ad data visualization based lattices vis ad data visualization based lattices bill hibbard brian paul chuck dyer defining foundation data visualization based idea visualization process function set data objects called data model set displays called display model prototype system called vis ad implemented based upon ideas guided following principles scientists develop mathematical models nature data objects represent objects mathematical models mathematical objects frequently contain infinite precision real numbers functions infinite domains whereas computer data objects contain finite amounts information thus approximations mathematical objects represent computer displays contain finite amounts information e contain finite numbers pixels colors chosen finite palettes animation sequences contain finite numbers frames etc thus approximations ideal displays close relationship data computation data model appropriate data objects computational model programming language purpose data visualization communicate information content data objects particular define expressiveness conditions mapping data objects displays displays encode facts data objects facts visualization system complete sense implements function data objects displays satisfying expressivenss conditions define order relation data objects based precisely approximate mathematical objects define order relation displays based precisely approximate ideal displays e based voxel resolution etc order relations define lattices data objects displays therefore model visualization process function d u v lattice u data objects lattice v displays interpret expressiveness conditions context show d satisfies expressiveness conditions lattice isomorphism define particular lattice us appropriate scientific data objects data objects built primitive variables call scalars e g time latitude radiance temperature tuple array data type constructors e g array time temperature data type appropriate time series temperatures thus lattice us contains data objects scientific programming language also define particular lattice vv displays display set voxels voxel specified set graphics primitives call display scalars e g pixel location size volume color place animation sequence show functions d us vv satisfying expressiveness conditions class functions defined mappings scalars used primitive variables data objects display scalars specify graphics primitives voxels course designers scientific displays already assume primitive variables mapped graphics primitives example given data object type array time temperature natural display graph time along one axis temperature along another remarkable thing take way designing displays assumption consequence fundamental expressiveness conditions developing implementing system called vis ad allows scientists experiment algorithms steer computations visualize data objects create programs lattice us defines data objects vis ad programming language system implements lattice vv displays data displayed using function satisfies expressiveness conditions however implementation quite precise data flow systems define user interface controlling data display based abstraction rendering pipeline vis ad system defines user interface controlling data display based abstraction mappings scalars display scalars possible define data lattices recursively defined data types e complex linked types trees used general purpose programming languages abstract data types object classes object oriented programming languages lattices provide rigorous foundation visualization particular help us develop analytical alternative usual approach defining visualization process d constructively writing special purpose program computing display d u specific data object u