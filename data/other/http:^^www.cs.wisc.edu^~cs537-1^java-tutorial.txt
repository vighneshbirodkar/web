date tue nov gmt server ncsa content type text html last modified thu oct gmt content length java c programmers java c programmers contents introduction first example values objects pointers garbage collection static final public private arrays strings constructors overloading inheritance interfaces casts exceptions threads input output goodies introduction purpose notes help students learn enough java course projects students experience programming c practically none used java java turn details worth considering java created stir much nothing language per se way intended used understand point know little bit world wide web web consists set servers scattered around internet maintains set pages page name called universal resource locator url uniquely distinguishes page world url starts name server example url document http www cs wisc edu cs java tutorial html says retrieved using hypertext transfer protocol http connect server www cs wisc edu ask page calls cs java tutorial html page written combination text formatting directives called hypertext markup language html browser program runs personal computer workstation knows display html documents netscape navigator currently popular browser far microsoft others trying change html fairly simple example directive p used start paragraph text set italics surrounding important directive precedes text name url follows browser underlines text user clicks mouse browser goes gets page named url displays see examples html take look document using netscape navigator select document source view pull menu top window sooner html caught people wanted extend directives added show text different colors sizes make blink set directives added display tables images next came sound movies possibilities seemed endless one big problem however created document using new feature couldn displayed browser didn understand feature thus feature useful implemented least substantial fraction millions browsers someone got bright idea including document program capable displaying browser wouldn understand document could run executable code came code would know display document unfortunately idea two serious problems first problem browsers run sorts computers running sorts operating systems include document program designed run sparcstation solaris useless pentium running windows second program concerns security running programs random untrusted sources computer asking trouble viruses instead displaying document program may clear disk look private information send back network bad guy fortunately another idea solves problems instead including machine language program document send program written virtual machine simulated software interpreter arrange browser include interpreter virtual machine sense re introduces previous problem requiring new feature implemented everyone browser one last time ve convinced browser vendors implement interpreter virtual machine won implement extensions interpreter also include security safeguards example doesn implement operation open files worry mischievous program stealing data difficult impossible build safeguards around machine language programs programs contain bugs actually devious tricks circumvent security restrictions subscript bounds may actually attempt read data stored outside memory space allocated program java language specially designed cleaned version c loopholes removed assign random garbage c pointer variable dereference get whatever stored memory address example following fetches whatever happens store location memory int p int int x p java prevents sort thing whether accidentally purpose combination strong type checking runtime checks pointer variable always initialized null assign pointer values integers data attempt dereference null pointer get runtime exception java designed primarily build active multimedia interactive documents standard runtime library lots features aid creating user interfaces standard classes create scrollbars pop menus etc special facilities manipulating url network connections using features hand one thing operating systems user interfaces common require multiple cooperating threads control using features course applications vs applets first thing decide writing java program whether writing application applet applet piece code designed display part document run browser response html directive document writing applets course application stand alone program programs applications first example large parts java identical c example following procedure sorts array integers using insertion sort exactly c java sort array ascending order using insertion sort void sort int int size int size sorted insert proper place int x int j j j j j x break j j j x j x j x note syntax control structures assignment statements variable declarations comments java c test procedure c program might use main program like include iostream h include stdlib h extern c int random test program test sort int main int argc char argv argc cerr usage sort array size endl exit int size atoi argv int test new int size int size test random cout endl int size cout test endl sort test size cout endl int size cout test endl return java program test sort procedure different ways complete java program using sort procedure import java io import java util random class sorttest sort array ascending order using insertion sort static void sort int int size int size sorted insert proper place int x int j j j j j x break j j j x j x j x test program test sort public static void main string argv argv length system println usage sort array size system exit int size integer parseint argv int test new int size random r new random system println math atan int size test int r nextfloat system println int size system println test sort test size system println int size system println test system exit copy program available cs public examples sorttest java try create new directory copy example file named sorttest java directory file must called sorttest java mkdir test cd test cp cs public examples sorttest java sorttest java javac sorttest java java sorttest also grab copy source net browser visit cs public examples sorttest java use save option file menu javac command invokes java compiler source file sorttest java goes well create file named sorttest class contains code java virtual machine java command invokes java interpreter run code class sorttest note first parameter sorttest sorttest class sorttest java name class file several things note program first java top level global variables functions java program always set class definitions thus make sort main member functions called methods java class called sorttest second main function handled somewhat differently java c c first function executed always function called main two arguments return integer value return value exit status program convention status zero means normal termination anything else means something went wrong first argument number words command line invoked program second argument array character strings denoted char argv c containing words invoke program typing sort find argc argv sort argv java first thing executed method called main indicated class case sorttest main method return value type void ignore words public static preceding void return later main method takes one parameter array strings denoted string argv java array one element word command line following name class executed thus example call java sorttest argv separate argument tell many words java tell big array using length case argv length meaning argv contains one word third difference note way o done java system java roughly equivalent cout c stdout c system println whatever even roughly equivalent cout whatever endl c program used three functions standard library atoi random exit integer parseint thing atoi converts character string integer value ten system exit thing exit immediately terminates program returning exit status meaning something wrong library class random defines random number generators statement random r new random create instance class r nextfloat uses generate floating point number cast int means thing java c converts floating point argument integer throwing away fraction finally note include directives c replaced import declarations although roughly effect mechanisms different c include iostream h pulls source file called iostream h source library compiles along rest program include usually used include files containing declarations library functions classes file could contain c source code whatever java declaration import java util random brings pre compiled class random package called java util declaration import java io bring classes defined package java util package sort like library won worry much packages course values objects pointers sometimes said java doesn pointers true fact objects referenced pointers precisely variables hold primitive values integers floating point numbers pointers objects variable cannot hold object cannot make pointer primitive value since choice java doesn special notation like c indicate want use pointer exactly eight primitive types java boolean char byte short int long float double similar types name c mention differences boolean value either true false cannot use integer boolean required e g statement automatic conversion boolean integer char value bits rather bits c c allow sorts international alphabets practical matter however unlikely notice difference byte type bits short bits int bits c c modern machines c size machine dependent java guaranteed java long c bits long types float double like c bit bit floating point c objects instances classes prefix operator infix operator example consider class declaration c java class point int x y c java point origin point origin new point point p q r point p q r origin x origin x p new point p new point p y p y q p q p r origin possible garbage collection new objects create new operator java like c except argument list required class name even constructor class doesn take arguments list empty however delete operator java system automatically deletes objects references remain much important convenience may first seem delete operator extremely error prone deleting objects early lead dangling reference p new point q p much later delete p q x oops deleting late lead garbage also known storage leak static final public private c possible restrict access members class declaring private syntax different c class c private int double d public int j void f java class c private int public int j private double d public void f c private members accessed inside bodies methods function members class outside thus x instance c x legal accessed body x f protected also supported means thing c default neither public private specified member accessed anywhere package giving facility rather like friends c probably putting classes one package default essentially public keyword static also means thing java c word implies ordinary members one copy per instance static members one copy shared instances effect static member lives class rather instances class c int x way isn legal c static int y void f int n x n static int g return y c p new c c q new c p f q f system println p x prints system println q x prints system println c y prints system println p y means thing system println c g prints system println q g prints static members often used instead global variables functions exist java example math tan x tan static method class math math pi static field class math integer parseint used href sort sorting example keyword final roughly equivalent const c final fields cannot changed often used conjunction static defined named constants class card int suit clubs default final static int clubs final static int diamonds final static int hearts final static int spades card c new card c suit card spades card suit value clubs shared instances card needs stored since final doesn need stored arrays java arrays objects like objects java point unlike c variable treated like pointer first element array java array variable points array object way point particular member array array read final field length tells many elements elements numbered starting zero c length create array using new change size need space create new larger array copy elements see library class vector int x value int pointer array object initially null int means exactly thing new int points array object accesses one slots array new int assigns different array old array inaccessible garbage collected int b b share array object system println length prints strings since make array anything make array char array byte java something much better type string operator overloaded strings mean concatenation concatenate anything string java automatically converts string built types numbers converted obvious way objects converted calling tostring methods library classes tostring methods something reasonable likewise classes define great debugging string hello string world system println prints hello world system println hello system println hello system println hello system println value x x work x system println system system system java io printstream string numbers int numbers system println numbers strings lots useful operations string whatever whatnow charat w charat substring substring substring substring compareto value less zero precedes lexicographic dictionary order compareto value greater zero follows compareto whatnow zero substring substring false different string objects substring equals substring true equal indexof w indexof indexof lastindexof w endswith true modify string make string variable point new string numbers see stringbuffer want string scribble constructors overloading constructor like c method name class constructor arguments supply corresponding values using new even arguments still need parentheses unlike c multiple constructors different numbers types arguments true methods called overloading unlike c cannot overload operators operator overloaded strings various kinds numbers user defined overloading allowed class point int x y point int u int v x u x u y v point int x x x x x y point x y class test public static void main string argv point p new point point p new point new point point p new point error nb bodies methods defined line right headers shown write class foo double square double d return d d rather class foo double square double double foo square double d return d d ok c java inheritance interfaces casts c write class derived public base mean two things derived anything base perhaps derived things way base unless specified otherwise first called interface inheritance subtyping second called method inheritance java specified differently method inheritance specified keyword extends class base int f void g int x class derived extends base void g int x double h class derived three methods f g h method derived f implemented way executable code base f derived g overrides implementation base g call base super class derived derived subclass base every class one exception exactly one super class single inheritance leave extends specification java treats like extends object primordial class object lone exception extend anything classes extend object either directly indirectly object method tostring every class method tostring either inherits method super class overrides interface inheritance specified implements class implements interface like class except methods bodies two examples given built interfaces runnable datainput interface runnable public void run interface enumeration public boolean hasmoreelements public object nextelement object runnable method named run public arguments results enumeration public member hasmoreelements returns boolean public member nextelement returns object class claims implement interfaces either inherit via extends define class words extends stringtokenizer implements enumeration runnable public void run string nexttoken null return system println words string super perhaps something else well class words needs methods run hasmoreelements nextelement meet promise implement interfaces runnable enumeration inherits implementations hasmoreelements nextelement stringtokenizer give implementation run implements clause tells users class expect w instance words know write w run w hasmoreelements class extend one class implement number interfaces way constructors inherited call super class words calls constructor stringtokenizer takes one string argument explicitly call super java automatically calls super class constructor arguments constructor must exist case note call nexttoken words run short nexttoken since instance words nexttoken method one inherited stringtokenizer cast java looks like cast c type name parentheses preceding expression already seen example cast used convert primitive types cast also used convert object reference super class subclass example words w new words test object o w nextelement string string o system println first word length length know w nextelement ok since words implements interface enumeration tells us value returned type object cannot call o length class object length method case however know o kind object string particular thus cast o type string wrong type o would get run time error sure type object test instanceof note lower case o find method object getclass o instanceof string n string o length else system err println bad type o getclass getname exceptions java program never core dump matter buggy compiler excepts something goes wrong run time java throws exception default exception causes program terminate error message also catch exception try foo bar catch indexoutofboundsexception e system err println oops e try statement says re interested catching exceptions catch clause appear try says indexoutofboundsexception occurs anywhere try clause case print error message tostring method exception generates string containing information went wrong well call trace caught exception terminate program kind exception occurs divide zero exception thrown back caller function function doesn catch thrown function caller back main function terminate program isn caught similarly function foo bar throws indexoutofboundsexception doesn catch catch catch clause actually catches indexoutofboundsexception subclasses including arrayindexoutofboundsexception stringindexoutofboundsexception others exception another kind object rules inheritance hold exceptions king class define throw exceptions class sytaxerror extends exception int linenumber sytaxerror string reason int line super reason linenumber line public string tostring return syntax error line linenumber getmessage class someotherclass public void parse string line throws syntaxerror throw new syntaxerror missing comma currentline public void parsefile string fname try nextline readline parse nextline catch syntaxerror e system err println e function must declare header keyword throws exceptions may thrown function calls doesn declare exceptions catches exceptions indexoutofboundsexception common java makes exception sorry doesn require declared rule applies runtimeexception subclasses never define new subclasses runtimeexception several catch clauses end try statement catch various kinds exceptions first one matches exception e super class executed also add finally clause always executed matter program leaves try clause whether falling bottom executing return break continue throwing exception threads java lets several things using threads computer one cpu may actually run two threads simultaneously otherwise switch back forth among threads times unpredictable unless take special precautions control two different ways create threads describe one thread new thread cmd start start running cmd wait finish something else perhaps start threads later join wait finish running cmd constructor built class thread takes one argument object method called run requirment specified requiring command implement runnable interface described earlier way thread runs command simply calling run method simple project supposed run command separate thread thus might declare something like class command implements runnable string thecommand command string c thecommand c public void run command says parse command string either constructor start run method main program loop reads command line breaks commands runs commands concurrently separate thread waits finish issuing next prompt outline may look like system print system flush string line inputstream readline int numberofcommands count many comands line thread new thread numberofcommands int numberofcommands string c next command line new thread new command c start int numberofcommands join main loop main method main class necessary class implement runnable although won need project next project require synchronize thread two reasons need prevent threads interferring allow cooperate use synchronized methods prevent interference built methods object wait object notify object notifyall thread yield support cooperation method preceded word synchronized well public static etc rule two threads may executing synchronized methods object time java system enforces rule associating monitor lock object thread calls synchronized method object tries grab object monitor lock another thread holding lock waits thread releases thread releases monitor lock leaves synchronized method one synchronized method calls contains call another thread may lock multiple times java keeps track correctly example class c public synchronized void f g public synchronized void g thread calls c g outside grabs lock executing body g releases done calls c f grabs lock entry f calls g without waiting releases lock returning f sometimes thread needs wait another thread something continue methods wait notify defined class object thus inherited classes made purpose called within synchronized methods call wait releases monitor lock puts calling thread sleep e stops running subsequent call notify object wakes thread sleeping longest time lets start running thread sleeping object notify nothing awakened thread wait monitor lock starts precedence thread trying enter synchronized method outside method notifyall similar wakes threads sleeping object class buffer private queue q public synchronized void put object o q enqueue o notify public synchronized object get q isempty wait return q dequeue class solves call producer consumer problem assumes queue class defined elsewhere producer threads somehow create objects put buffer calling buffer put consumer threads remove objects buffer using buffer get something problem consumer thread may call buffer get discover queue empty calling wait releases monitor lock producer threads call put add objects keeps place line get object consumer threads arrive later time producer adds object calls notify case consumer waiting object example correct stands java compiler reject wait method throw interruptedexception exception get method must either catch declare throws interruptedexception well simplest solution catch exception ignore class buffer private queue q public synchronized void put object o q enqueue o notify public synchronized object get q isempty try wait catch interruptedexception e return q dequeue also version object wait takes integer parameter call wait n return n milliseconds nobody wakes thread notify notifyall sooner may wonder object get uses q isempty rather q isempty particular case either would work however complicated situations sleeping thread might awakened wrong reason thus always good idea wake recheck condition made decide go sleep continue input output input output described chapter java book complicated looks get pretty far writing system type printstream methods println print input probably want wrap standard input system datainputstream provides handy method readline datainputstream new datainputstream system string line readline line null break something next line datainputstream lots methods probably expect example datainputstream readint reads four bytes raw data concatenates form binary integer next four bytes input ascii characters readint return want read file rather keyboard standard input use fileinputstream probably wrapped datainputstream fileinputstream rawinput new fileinputstream somefile datainputstream new datainputstream rawinput string line readline line null break something next line similarly use new printstream new fileoutputstream filename write file goodies library pre defined classes several handy tools see online manual details integer character etc java makes big distinction values integers characters etc objects sometimes need object value classes integer character etc serve convenient wrappers purpose example integer new integer creates version number wrapped object value retrieved intvalue classes also serve convenient places define utility functions manipulating value given types often static methods defined constants integer max value largest possible int integer parseint int value integer tohexstring b hex new double e doublevalue double value see also page java book character isdigit true character isuppercase false character touppercase vector vector like array grows necessary allow add many elements like unfortunately one kind vector vector object thus insert objects type take objects use cast recover original type vector v new vector empty vector int v addelement new integer contains integer objects print squares int integer n integer v elementat int n n intvalue system println n n v setelementat hello like v hello object o v elementat like o v v insertelement world set v world first shifting element v v right make room v removeelementat remove v shift v left fill gap class vector implemented using ordinary array generally partially filled vector runs space allocates bigger array copies elements variety additional methods shown let give implementation advice manage extra space efficiently example know gonig add elements v call v trimtosize tell system repack elements array big enough hold forget import java util vector import java util using vectors hashtable hashtable implements mapping objects called keys objects called values hashtable h new hashtable empty table h put seven new integer key string seven value integer object object o h put seven new double binds seven double object returns previous value int n integer o intvalue n h containskey seven true h containskey twelve false o h get seven get current binding double o h remove seven get current binding remove h clear remove bindings stringtokenizer stringtokenizer handy breaking string words separated white space separator characters following example java book string str gone forgotten stringtokenizer tokens new stringtokenizer str tokens hasmoretokens system println tokens nexttoken prints gone forgotten second arguement constructor string containing characters considered separators case space comma omitted defaults space tab return newline common white space characters much complicated class streamtokenizer breaking input stream tokens many features seem designed aid parsing java langauge surprise considering java compiler written java utilities random number generator random presented see chapter java book information handy classes solomon cs wisc edu thu oct cst copyright marvin solomon rights reserved