date tue dec gmt server ncsa content type text html last modified fri jun gmt content length practical data sheet w derrick weathersby practical data sheet many years software development experience platforms ranging ibm mainframe computers running mvs tso vm cms risc workstations personal computers hosting unix aix ultrix osf linux bsdi nt os dos windows additionally ve developed significant web applications including online transaction management system distributed document server take look resume postscript form list signifcant projects amassed experiences last decade shared x server project led team developers building distributed user interface control sharing x applications project centered around shared x server developed aix ibm rs boxes x server enabled multiple clients share interface arbitrary x applications re written user interface also distributed shared application since reflect changing state x server entire system shared session whole interesting challenges asynchronously changing state clients session allowing clients synchronously change state session cloning user interface late arriving client defining interface intuitively display session state participating clients useful skills languages entire project designed c x xwindows xt intrinsics motif os aix internals signals sockets udp tcp network programming misc developed user interface prototype generator data parallel array langauge compiler project begun result thesis work done dr calvin lin direction professor larry snyder larry spent many research cycles parallel computation bringing field level sequential computation started defining realistic machine model parallel computers captured salient features influence performance machines machine model called cta candidate type architecture larry contended order achieve peak performance parallel machines applications written perform well cta basically said cta general architecture programmers utilize developing estimating performance applications compiler writers could use model generate better code calvin demonstrated applications following cta better predictive qualities terms performance fact would perform equivalently relative similar applications machine implementing cta following machine model orca language orca c conceived help programmers abstract notions cta calvin work done hand translating c code orca c orca c defined three levels abstraction assist programmer x y z x level specified task parallelism z level encompassed data parallelism y level defined distribution data realize parallelism zpl stands z programming level name implies purpose fulfill data parallel level abstraction zpl designed two major goals efficiency portability goals often conflict brought together matrimony given design methodology language basically language initially started features could compiled effectively language idioms included ones highest degree parallelism language targeted one level three level abstraction therefore pressure completeness x level would offer completeness since task parallelism much general data parallelism event language grew carefully much deliberation full features zpl fully functioning language compiler useful skills ve worked many internals compiler including interprocedural analysis aliases statically determining index sets zpl allows index inherited runtime region stack code generation ast traversal minipulation routines however research focused collective communication routines broadcasts scans reduces