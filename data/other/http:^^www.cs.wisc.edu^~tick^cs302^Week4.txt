date wed dec gmt server ncsa content type text html last modified fri sep gmt content length cs section lecture notes week lecture notes week topic user defined functions subroutines input output arguments text chp notes user defined functions fortran pre defined built mathematical functions x sqrt y sin x y nint functions small independent program modules compute commonly used values highly reusable y sqrt y functions take one input values called arguments produce single output value called result y cos x c mod b function arguments result cos x cosine x mod b remainder b functions simplify break larger problem series smaller problems called top design user defined functions define functions use program resemble mini programs similar structure function header argument declarations local variable declarations main executable section return end example compute area circle real function areac radius c computes area circle c radius radius c declare radius argument real radius c declare local variables constants real pi parameter pi c compute result areac pi radius return end calling user defined functions user defined functions written main program program test c c main program c real twrad twarea areac print enter radius tower read twrad print area areac twrad stop end c c user defined functions c real function areac radius return end user defined functions called main program like function e part arithmetic expression user defined functions called inside functions exception functions cannot call called recursion important function type must declared like variable main program wherever called real areac function header function header specifies name function type value returns name number input arguments functype function funcname arguments real function areac radius integer function mod divid divis also zero arguments unusual integer function foo argument names listed function header argument declarations type arguments specified immediately function header local variables declare arguments like declaring variables real radius integer divid divis also called dummy arguments actual arguments value dummy arguments initialized corresponding values function call called actual arguments y x areac y print areac y stop end real function areac radius return end actual argument dummy argument y radius y radius number type actual arguments must correspond number type dummy arguments specified order actual arguments may variables literals expressions local variables main program user defined functions may need store intermediate results variables variables declared within function called local variables used locally within function important variables declared another function main program cannot used within function re assign argument variables within function called side effects integer function fact n integer n integer count temp right temp count n temp temp count end fact temp wrong count n n n count end fact n function result purpose function compute return result result function last value assigned function name using normal assignment statement funcname value integer function fact n fact temp return end return statement return statement exits function resumes execution main program wherever called normally last statement function end end statement always last statement function specifies end function definition order execution program executes statements program header end program foo end v statement branches execute different sections code bar ne o else loop goes back re executes code bar call function jumps execute function statements return back main program return print fact y main function stop end real function fact n subroutines functions return single value usually number implement mathematical function integer function fact n c computes factorial n subroutines return number values perform sort operation subroutine graph min max power c print graph y x power x min x max subroutines also take one input values e arguments may may return results min max graph power user defined subroutines subroutines resemble functions subroutine header argument declarations local variable declarations main executable section return end note subroutine header return value example split real number whole fractional parts subroutine break x whole frac c break real number c whole fractional parts c declare arguments real x frac integer whole whole int x frac x real int x return end calling subroutines subroutines written functions main program subroutines explicitly called main program using call statement call graph call break ipart fpart subroutines called inside subroutines functions recursion subroutine header subroutine header specifies name subroutine name number arguments subroutine subname arguments subroutine graph min max power subroutine break x whole frac also zero arguments unusual subroutine menu argument declarations functions type arguments specified immediately subroutine header local variables functions subroutines may need store intermediate results variables local variables used locally within subroutine subroutine results subroutines return values e g graph draws graph screen subroutines return one values e g break takes one input value returns two output values result returned main program arguments re assigned inside subroutine arguments pass values subroutine well min max graph power whole x break frac note unlike functions subroutine name assigned value input arguments input arguments pass values subroutine like functions input arguments re assigned functions actual arguments subroutine call may literals variables expressions call graph x x call break output arguments output arguments pass values back main program similar function results except multiple values passed unlike input arguments output arguments must re assigned new value pass back important actual arguments subroutine call must always variables variables re assigned inside subroutine hence new values get passed back main program call break ipart fpart print ipart fpart stop end subroutine break x whole frac whole int x frac x real whole return end dummy arguments whole frac re assigned actual arguments ipart fpart re assigned actual dummy argument names need name output arguments pass values original values ipart fpart ignored input output arguments arguments pass values subroutine called input output arguments subroutine sort num num c sorts two numbers num copyright copy modified fromgareth bestor bestor cs wisc edu last modified september