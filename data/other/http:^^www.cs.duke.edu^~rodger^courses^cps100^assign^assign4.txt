date tue jan gmt server ncsa last modified wed oct gmt content type text html content length cps assignment fall cps fall assignment due monday oct last date turn monday nov points cps directory create directory called assign using mkdir command change assign directory order assignment need copy files using following cp command forget trailing period dot cp rodger cps assign command copy files directory use type ls see following files makefile ladder cc ladder h ladderq cc queuear h queuear cc template cc assignment ll using database english five letter words stanford graphbase knuth dat list compiled knuth list words smaller file data work also called words dat ladder directory create link data files typing ln rodger data knuth dat knuth dat ln rodger data words dat words dat access files without specifying long path name files programming problem follows use style rules discussed class includes meaningful variable names indentation comments pre postconditions top file function also include name date course purpose comment top program problem word ladder turning stone money input program name word file user prompted two words length characters output sequence words consecutive words share one letter starting first word ending last one letter changed another letter resulting symbols form valid word example turn stone money one possible ladder replace h replace o etc stone shone shine chine chins coins corns cores cones coney money words found knuth file dictionary user continue enter words word ladders searched either words entered letters length assignment part write program ladderq cc uses file letter words find shortest ladder one word another using process outlined must develop class class ladder started need add member functions public private program read store words file specified user prompt user enter two five letter words continue prompt pair words output shortest ladder first word second one words length program halt sample run ladderq enter filename words dat enter two letter words length end smart brain ladder smart start stark stack slack black blank bland brand braid brain enter two letter words length end angel devil path angel devil enter two letter words length end file knuth dat extraneous information ignore lines begin process first characters lines knuth asks file altered hence restrictions code read file included member function loadwords already written use algorithm find shortest ladder use templated queue class provided queuear modified queue class weiss book first store words file vector type wnode done loadwords struct wnode string word wnode prev assumes use class string cpstring h use kind string want ladder found putting starting word rather pointer queue putting words letter away word queue putting words letters away queue words letters away etc word taken queue last target word found process stop may words queue ll ignored word w isn actually stored queue pointer struct containing w stored field struct pointer word one letter away w caused w put queue word predecessor example w house pointers structs containing mouse louse douse horse enqueued struct pointing house since word preceeded others caused enqueued first word doesn predecessor field cannot null since used another purpose easy fix make pointer self referential points struct need checked printing ladders details first word entered user looked list words pointer struct containing word enqueued extra credit program able handle first word even word list words words ladder except perhaps last must list words put pointer struct containing word onto queue queue wnode pointers repeat dequeue enqueue process dequeue element pointer find words one letter apart dequeued word one target word re done one words one apart target word re done stop early otherwise enqueue words found hasn queued use prev pointer fields wnode determine word enqueued initially prev fields set null helps determine word enqueued means word enqueued target word derived ll need print ladder first word target word prev pointer wnode stores information allow ladder recreated may need use recursion vector since ladder backwards printed properly alternatively store words array vector print reverse without using recursion using loop vector ladder member functions must implement functions described ll find useful implement member functions sometimes functions private case member function helper function member functions shouldn called user making helper function private ensures member functions access helper function client programs cannot clear sets prev fields null findladder tries find ladder two words parameters function findladder returns boolean value true ladder found false otherwise pass strings function const reference parameters printladder prints word ladder private data may needed store last node ladder prev field last node used access ladder nodes first node ladder self referential pointer ll probably find useful write function isoneapart used determine two strings one letter apart count letters equal one less total number letters words words one apart function need member function two strings parameters const reference returns true strings one letter apart define function ladder cc use ll probably want debugging code member functions verify going build helping debugging member functions class ll save time long run since member functions used help debug code may want write separate function find word vector words pointers words read write code inline rather making function function useful debugging developing advisable test function write make sure works correctly order would helpful create small data file words containing small ladder size testing using templates use templated queue class ll need use file called template cc template code needs seen compiler end h cc files included separate file template cc file illustrated include queuear h include queuear cc include ladder h template class queue want several kinds queues put another definition template cc file template cc file compiled template o need relink recompile every time make change ladder cc make recompiles much faster extra credit pts write new version ladderq cc called ladxtra cc program process words good matches tried ladders found preprocessing step take long time word ladders found quickly idea word words one letter away determined stored somehow words loaded looking candidate words enqueue words one letter away already known checked previous use saves searching entire list words checking whether one letter away submitting program programs compile produce correct output create readme file please use capital letters include name date estimate long worked assignment readme file must also include list names people students prof tas tutor consulted assignment see rules collaboration cps syllabus submit programs electronically type leave ladxtra cc didn extra credit submit assign readme ladderq cc ladder h ladder cc template cc ladxtra cc receive message telling program submitted correctly doesn work try typing rodger bin submit place submit submit typing make submit make submitx extra credit program correct readme file directory submit always edit makefile command submit submitx add change filenames