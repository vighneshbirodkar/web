mime version server cern date sunday dec gmt content type text html content length last modified thursday may gmt regular language sql query translation translation regular questions sql constructs com final project report spring alfred hong may table contents problem description general approach results evaluation discussion conclusion future references problem description web sites today provide query front end backend database done mostly via keyword categorical search forms search parameters preselected usually inhuman since query parameters preselected answers fixed static user replacing fixed query forms natural language query front end could make things human natural flexible middleware mechanism converts natural language question backend database language perform user query request might job since relational databases popular sql target database language conversion table contents general approach approach general involves identifying target domain testing concepts researching possible techniques dealing problem implementation using questions author came testing implementations refinement retesting identifying target domain natural language processing difficult subject tackle focus project specific domain chosen ideas code testing domain querying flight schedules thus chosen using sample schedule information usair flight schedule database following relational database table definition record shows type information dealt flts tocity fromcity begindate enddate leavetime arrivetime flightnum frequency stops stopcities meals fare san francisco ca ithaca ny e x phl b domain specified certain assumptions made simplify task natural language question sql construct translation focus simple queries user usually ask complex sql queries involve exists groupings instance time dates need special treatment variety complexity formats used query one database table dealing multiple tables complex task ambiguity resolution difficulties table joins punctuations dealt one sentence questions techniques researched several possible concepts techniques tackle problem looked wh gap semantic features bottom chart parsing semantic features procedural semantics question answering conversational agents information retrieval concepts template matching techniques although tests initially done using wh gap features flight schedules extra wh gap features really necessary problem simple bottom chart parsing semantic features suffice idea using combination question answering conversational agents information retrieval concepts template matching came realization number synonyms phrasings possible asking flight schedule actually quite diverse requiring rather large lexicon small domain table contents results evaluation bottom chart parsing semantic features nice structured format sql queries flight schedule questions directly mapped parts sql queries shown table san francisco mapped destcity san francisco construct may mapped departdate construct table translation mapping sentence flights available san francisco ithaca may sentencesql flights availableselect flights schedules san franciscowhere destcity san francisco ithacadepartcity ithaca may departdate following result parsing sentence departure times houston tomorrow select time v v depart tomorrow v v iah wh pro vp sample questions testing solicited users given need purchase ticket san francisco tomorrow ithaca following example questions available arrival times miami tomorrow departure times houston tomorrow many stops san francisco flight flight e arrive orlando today cheapest flight available san francisco tomorrow book cheapest flight take san francisco tomorrow need stay saturday night get lowest fares many flights available going san francisco tomorrow check tomorrow flight schedule san francisco need fly san francisco tomorrow flights available question types parsed others reasons mainly anticipating certain words different sentential structures results see results documentation grammar lexicon code note questions involve realization cheap concept means select min fare operation needed question yes type question question involves count operation question sentences violates defined assumptions question answering conversational agents information retrieval template matching results bottom chart parsing method could improved refinement non anticipated sentential constructs discovered ideal however motivates search means tackling problem questions often asked bits pieces quite true querying flight schedules requires flight schedule answering system aware asked session results refined user several questions viewed way multiple sentences would major problem since allowed even though number synonyms required quite large lexicon need exhaustively cover possibilities user may present system example flight flight schedule schedule reservation refer thing inferences possible combinations words helper words different word arrangements instance go miami context flight schedules implies flying miami parse possible combinations questions also require large number rules sentences need fly san francisco tomorrow flight available sentence flight available san francisco tomorrow queries notice however key phrases san francisco tomorrow flight idea identified maybe sentence boundaries syntactic structure important lexicon need concentrate key words phrases fig interface flight schedule query application test idea tcl tk application written fig shown several parts interface user inputs queries clicks analyze button key words phrases extracted input stored extraction key concepts done regular expression matching built lexicon ignores irrelevant words akin stop lists information extraction context flight schedule query figure history text box shows concepts flights atlanta tomorrow extracted q sentence shown directly q line actually extraction atlanta instead atlanta would better indicating atlanta destination city q followup question requests flights houston instead extracted information used template matching sql syntax implemented yet user input successively refine change queries reset button chosen restart new session using tcl tk also makes easy interface web page backend relational database engine evaluation application done since completely developed yet however pattern matching key concept extraction component certainly show promise point thus combination question answering conversational agents information retrieval template matching techniques maybe flight schedule query problem dealt feasibly table contents discussion conclusion future problems overlooked user mistype questions user follow correct english grammar rules case current forms based methods flight schedule query web definitely advantage web sites limited return relatively large sets data require interpretation part user general natural language processing difficult subject even specific domain chosen problems abound terms bottom chart parser method lexicon deals possible flight schedule scenarios used dates times flight numbers given special identification parameters city names multiple words given special treatment grammar rules refined repeated testing full proof flight schedule query system could possible however even sentences could parsed parsed result used readily integrating system web front end straightforward resident lisp back end used chart parsing even done rather resource intensive led researching possible ways make feasible hopefully alternative method embodied tcl tk application discussed previous section prove promising future work interface lisp grammar lexicon web page continue work tcl tk application summer table contents references allen james natural language understanding nd ed benjamin cummings redwood city ca almasi g et al web technology make information available web proceedings fourth workshop enabling technologies infrastructure collaborative enterprises wet ice apr berkeley springs west virginia ieee computer society press los alamitos ca pp table contents