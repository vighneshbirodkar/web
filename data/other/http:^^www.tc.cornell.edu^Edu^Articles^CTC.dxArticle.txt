date sun nov gmt server ncsa content type text html last modified fri oct gmt content length forefronts teaching computer graphics dx article cornell theory center article originally appeared cornell theory center forefronts newsletter teaching computer graphics scientific visualization using dataflow block diagram language dataexplorer bruce land visualization project leader cornell theory center abstract scientific visualization language dataexplorer dx ibm found useful undergraduate education vehicle teaching computer graphics introductory level although designed scientific data visualization dx used construct student lab exercises computer graphics dx used two years environment emphasizes graphics manipulations e g rotation perspective requiring programming overhead traditional computer languages introduction computer graphics topic requires mathematical programming artistic skills among others content computer graphics fundamentals course cornell focuses mathematical skills must include programming illuminate math course covers following topics construction surfaces explicit polygon lists parametric operations hierarchical grouping simple objects form complex surfaces modification objects d geometric transforms order position space animate viewing group objects including clipping window perspective parallel projection d screen space rendering polygonal parametric surfaces hidden surface removal shading lighting anti aliasing well surface property modifications texture bump mapping use global illumination models render interactions surfaces modeling scientific data scientific visualization programming aspect course attempts give students practical experience many techniques taught lecture lab exercises written dx cover nine computer graphics topics exercises include construction polyhedra vertex face descriptions construction parametric surfaces including quadric surfaces e g ellipsoids figures rotation tensor product surfaces e g bilinear hierarchical modeling animation complex objects writing perspective viewing transforms comparing lighting techniques wire frame flat shaded gouraud shaded objects illuminated ambient point illumination producing variations standard phong lighting model including spotlights bump mapping surfaces image techniques including production texture mapped surfaces image filtering anti aliasing visualization d scalar field heights landscape d vector field flow field design project produce animation based techniques learned exercises example programs introduce concepts descriptions manipulations required student first two exercises deal construction objects introduction dx first exercise students introduced notion polyhedron construction vertex face lists expected design couple polyhedra perform simple animation one object experiment determining normals surface second exercise introduces parametric surfaces students design quadric surfaces figures rotation bilinear patches lab design quite complex single objects exercise three teaches hierarchically combine objects concatenate d transforms make complex motion design either wagon rolls forward stops turns front axle wheels helicopter main tail rotors starts rotors takes flies away prop aircraft behaves like helicopter done correctly exercise shows design parts complicated object e g props wheels move duplicate re use several times final construction exercise four students turn perspective dx write pseudo perspective transform simple scene introduces use homogeneous coordinates matrix manipulation dx calculation complicated enough introduce various structuring aids dx make code readable exercises five six explore lighting students first design landscape lit two simulated suns white dwarf red giant two different orbits turn default lighting model dx phong illumination gouraud shading design lighting code lighting model based light positions viewer position object normals extend model produce spotlight depth cueing based intensity exercise seven introduces image manipulation filtering students asked anti alias simple scene using postfiltering determine best scheme based available filters system resource e memory cpu time edge enhance image finally texture map image onto quadric surface parametrically modifying image pixel coordinates dx image extent world space pixel position exercise eight introduces scientific visualization students make judgments based graphical representation fields first part exercise identify geographic location landscape height field enhance slope exposure modifying program second part identify sources sinks d vector flow field shown draw flow lines vector arrow icons isosurfaces speed combine techniques find sources sinks final design project produce animation hierarchically modeled objects typical projects included robot stands ocean turns fires projectile tower far shore seagull flies plucks fish water castle waving flags drawbridge car driving town rotating signs street lights human walking simulation deformation tennis racket strings ball impact morphing faculty face images complexity sophistication many projects amazing dx programming language introductory level lack programming tools often interferes learning graphics operations typically graphical operations either provided large library routines students must learn derive relatively simple programming projects students must code scratch block diagram interface dx customized make visual subroutine library often used graphics routines students construct complex scenes including camera lighting control short time also open various visual subroutines modify extend graphical nature user interface easy extensibility make possible students rapidly prototype graphics operation see effects modify program structure dx allows easy interaction described next dx block diagram point click programming language designed producing high quality images based d data may represent objects walls stars fields density electric field dx easily extended construct objects perform operations needed introductory graphics class block diagram program built modules wires connecting module primitive program function appears screen block input output tabs wires dragged mouse outputs inputs group modules hidden inside another module form user macro system supplied dx modules include vector scalar field rendering geometric operations rotate translate addition x y plotting direct programming support producing custom motif control panels theory center added modules make parametric surfaces texture maps bumpmaps spotlights variety graphically oriented functions students expected design visual programs perform particular assigned task expected produce working programs readable documented visual language different style organization readability text based code programs bigger one screen wide organization less important module comment field theory center encourages comment obvious modules programs tend build object kind e g house defining parts combining moving position section code tends small perhaps modules cryptic unless designer minimally labels output code block dx supports labeling wires document flowing many cases small code block made macro appears another module user chosen name point objects combined make higher order structures careful arrangement hierarchical structure visual helps program tracing debugging found programming providing examples programming manual effective way introducing students subject matter conclusions dx allows students concentrate learning graphics content course rather investigating details programming environment students generate code make images fraction time required c language environment encouraging experimentation time writing course evaluations yet available students article appears forefronts preliminary student feedback indicates satisfaction dx vehicle learning graphics acquired background computer graphics using dx already put use scientific visualization students incorporate class skills research projects across campus year students course mostly upper division computer science engineering majors possible construct freshman level course using dx introduces computer graphics visualization appropriate mathematical level whets appetites instruction downside dx use classroom requires graphics workstation iris indigo sparc station hp workstation risc system mac pc hardware readily available college university students hopefully trend cheaper workstations powerful personal computers continue open new possibilities designing complex scenes dx easy enough many projects put large demand workstations cpu memory final project many students ran memory using mbyte machines cases scaling resolution texture maps solved large size cases objects motions became complex lab exercise software plus student lab instructions available line anonymous ftp site cornell university info tc cornell edu contact bruce land bruce tc cornell edu information