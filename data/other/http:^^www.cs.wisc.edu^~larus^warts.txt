date tue nov gmt server ncsa content type text html last modified tue oct gmt content length warts warts wisconsin architectural research tool set mark d hill james r larus alvin r lebeck madhusudhan talluri david wood computer sciences department university wisconsin west dayton st madison wi warts cs wisc edu wisconsin architectural research tool set warts collection tools profiling tracing programs analyzing program traces warts currently contains qpt qpt program profiling tracing system cprof cache performance profiler tycho dineroiii cache simulators eel library editing executable files fast cache framework memory system simulators warts distributed full source small amount documentation tools warts copyrighted distributed license copy license available ftp cs wisc edu ftp pub warts license ps obtained writing address warts available without charge university researchers available researchers modest research donation contact warts cs wisc edu details also maintain list changes improvements warts programs cprof cprof system cache performance profiler written alvin r lebeck david wood annotates source listings identify source lines data structures cause frequent cache misses cprof system consists two programs cprof uniprocessor cache simulator xcprof x windows user interface cprof processes program traces generated qpt see annotates source lines data structures appropriate cache miss statistics xcprof provides generalized x windows interface easy viewing annotated source files performance current risc processors sensitive cache miss ratios programmers compiler writers language designers must explicitly consider cache behavior fully exploit program performance potential cprof provides detailed information program cache behavior full cache simulation annotating lines source code data structures corresponding number cache misses cprof helps user focus problematic data structures algorithms cprof aids programmer identifying types transformations improve program cache behavior classifying cache misses compulsory capacity conflict note product contains software developed university california berkeley contributors experience using cprof tune subset spec benchmarks detailed alvin r lebeck david wood cache profiling spec benchmarks case study ieee computer vol oct pp tycho dineroiii tycho dineroiii uniprocessor cache simulators written mark hill simulators report behavior one alternative cache designs response input trace provided user e g qpt trace list memory references program workload makes executing simulators written c use ascii trace format distributed dozens companies universities first simulator tycho simultaneously evaluates many alternative uniprocessor caches severely restricts design options may varied specifically one pass address trace tycho produce table miss ratios caches many sizes associativities provided caches block line size prefetching use lru replacement tycho used example spec benchmark suite examine numerous caches tycho useful reducing size large cache design space second version tycho tychoii provides higher performance option binary trace input several optimizations madhusudhan talluri tychoii however complex tycho widely used second simulator dineroiii evaluates one uniprocessor cache time produces performance metrics e g traffic memory allows cache design options varied e g write back vs write lru vs random replacement demand fetching vs prefetching dineroiii distributed instructional use popular graduate computer architecture textbook dineroiii useful carefully studying alternative cache designs mark d hill alan jay smith evaluating associativity cpu caches ieee trans computers c december p jeffrey d gee mark d hill dionisios n pnevmatikatos alan jay smith cache performance spec benchmark suite appear ieee micro august john l hennessy david patterson computer architecture quantitative approach morgan kaufmann san mateo california last modified may james larus larus cs wisc edu