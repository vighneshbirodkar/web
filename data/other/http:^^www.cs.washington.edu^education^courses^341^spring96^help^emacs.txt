date wed jan gmt server ncsa content type text html using emacs using emacs brief introduction executive summary document designed help get started using emacs contains listing emacs commonly used helpful features well general overview emacs emacs emacs editor perhaps portable easy use one unix systems however also one completely flexible user programmable vast programming environments imagine engine behind emacs lisp interpreter uses different dialect lisp learned class allows users code routines customize environment nicely intimidating beast feeling huge overly complex full options ll never discover key pretend know won hurt use find useful use ll learn example today learned bind control arrow key specific function specific emacs mode purposes class shouldn learn much recommend spend much time trying figure intricacies emacs example today spent hours figuring bind control arrow key specific function specific emacs mode need know something figure quickly ask notation talking emacs ll use notation c indicate key pressed holding control key emacs requires lot example c h means hit h holding control key similarly m means use meta key key called meta usually alt alt function escape use example m x means hit x holding meta key lots emacs functions take two keystrokes complete example exit emacs use c x c c control x followed control c running emacs emacs run two ways one work sort character terminal makes assumptions hardware set could run emacs home vic mode example assumes x terminal allows fun stuff like use arrow keys mouse latter recommended whenever available much easier use logging onto mscc account run emacs simply typing emacs haven set display environment variable emacs take terminal window re typing ll look like little text editor use c x c c get back run emacs taking advantage x need two things first tell display ok machine re running use display done using xhost followed name machine ll running emacs example m sitting d spirit wanting run emacs mscc machine would type xhost mscc ms next tell machine re running display re using setenv display followed display name example situation mscc prompt would type setenv display spirit cs run emacs show window display able use mouse ll assume mode operation remainder document emacs orientation start emacs come empty buffer top window pull menus contain common operations right side scroll bar near bottom status bar line called mini buffer figure small emacs window status bar tells buffer re looking double asterisk indicates buffer modified since created last saved disk case typed test sometimes ll see means current buffer read type next bar says emacs tells name buffer scratch default buffer starting next tells mode buffer operating lisp interaction mode default starting tells part buffer re looking case contains word test seeing minibuffer small buffer emacs uses report error conditions prompt information necessary cursor indicates text appear type reposition using mouse buffers basic unit emacs file edit buffer also buffers purposes example minibuffer used emacs user interactions buffer re running minischeme lisp interpreter etc given time emacs session multiple buffers around although may visible given time buffer associated mode controls behavior everything example edit file ml extension emacs realize ml file put sml mode knows ml programs indented similarly open c file cl file buffer c mode common lisp mode respectively know syntax language addition indentation rules changing based buffer mode control key sequences may different actions additional pull menus typically added different sorts syntax checks done like balancing parenthesis lisp scratch buffer scratch space type anything want without associating file cancelling exiting two important key sequences know lisp c g c x c c c g used cancel action ve started excellent way get mysterious features accidentally got typing wrong thing rule thumb doubt use c g sometimes use several times row make sure thing ll want know exit use c x c c lisp prompt haven saved buffers ve left processes like lisp ml interpreter running pull menus recent version emacs version came pull menus years everyone using control key sequences get things done control key sequences engrained mind much easier since go mouse time usually forget menus lots things m explain bound menus well know sure anyway play along read check see exist ignore control key sequences m tell reading writing files think emacs primarily editor load file disk start editing new file use c x c f find file minibuffer ll prompted filename exists loaded otherwise ll create new file re sure filename hit space time get list files match ve typed point use tab file completion save file use c x c changes file written disk save different filename use c x c w write file ll prompted new name buffer renamed although original file still exist disk moving around time move emacs cursor around using arrow keys mouse sometimes however won work ll use keys c f c b c p c n move forwards back previous line next line respectively jump beginning screen line use c first letter alphabet jump end line use c e move quickly use c v move screenful m v move screenful use c move beginning buffer c move end never use get really fine grained use c move paragraph c move paragraph m move beginning previous sentence m e move end next sentence m b move back word m f move forward word m left m right picky picky marking region use mouse emacs mark region text way would system clicking dragging highlight tends disappear let go button region still marked otherwise mark region moving one end hitting c space emacs respond mark set move end whatever operation want pretty important emacs always notion last mark set lots operations set mark wherever cursor operation initiated thus always notion current region namely everything mark cursor problem accidentally hit delete example half file disappear without understanding thank goodness undo read cutting copying pasting one way cut text emacs use c k kill may alone way cut text c k takes text cursor end line text takes linefeed moves next line lines kill accumulate pasted conventional way cutting would highlight use c w wipe re machine use mouse set region described pasting done using c y yank copying done x windows way namely highlight region mouse click middle mouse button paste use m w undoing emacs phenomenal undo feature c x u undo fingers turn blue slowly undoing lots lots recent keystrokes commands remembers quite lot ve recently done working buffers start emacs ll typically see one buffer minibuffer view multiple buffers however useful viewing multiple files simultaneously c x divide buffer window half vertically giving two buffers status bar move buffers using c x c o mouse similarly cut buffer horizontally using c x editing lisp ml recommend dividing window way edit one run interpreter second hide buffer cursor use c x make buffer cursor fill whole window use c x view buffers emacs session use c x c b switch different buffer use c x b emacs prompt name normally viewing buffer still though visible really drop one emacs session use c x k supply name modified emacs check killing useful need get rid bunch changes file ll notice emacs uses buffers report information typically surrounded show files associated switch kill like buffer functions key bindings every function emacs implemented somewhere using lisp routine common routines bound control meta key sequences ve describing emacs lets bind function key sequence part way customizable example preparation working lisp ml ve bound common functions keys detailed elsewhere also call functions unbound using m x allows type name function executed example c v bound scroll function could therefore also scroll using m x scroll searching replacing search forward string use c search backwards reverse use c r replace occurrences string buffer use m x replace string replace instances string use m x query replace ll prompted every location string line help emacs lot help available using c h follow single letter indicating sort help want gives list options takes string lists emacs functions related string k lets type key sequence explains briefly function key bound f lets type name function describe detail m gives information mode current buffer e g common lisp mode sml mode etc takes tutorial somewhat poorly written comparison document conclusions think right feel free email want something haven explained questions ve put together summary information clip n save page shamelessly stolen cse winter cse webmaster cs washington edu last update pm