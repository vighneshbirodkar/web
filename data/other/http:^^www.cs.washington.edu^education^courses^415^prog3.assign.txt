date mon dec gmt server ncsa content type text html cse prog assignment cse programming project due may pm use turnin directed details covered class thursday precise description last message included heuristic selection best transformation proving trigonometric identities due friday may project involves symbolic problem solving creation representation facilitates implementation learning learning part simply involves able use problems solved program improve problem solving power later problem start five simple trigonometric identities tan x sin x cos x cot x cos x sin x cosec x sin x sec x cos x sin x cos x use operators transform left side new trig equation right side produced problem solved point first thing find way represent problem operators including operators added problems solved programming simple possible features left right sides operators problem identities chosen help deciding operator apply apply cover class think example given five trig identities operators would solve problems prove tan x cot x etc also write lisp functions deal possible cases implement problem solver would start five basic identities prove new identities add identities set available solving future problems would require programming could short time going given set initial identities standard form write lisp program select best transformation identity given problem identity make three possibly different selections based three different heuristics standard form replace sin x symbol cos x b tan x c cot x d cosec x e sec x f remove signs moving terms side identity remove signs multiplying throughout denominator remove exponents repeated multiplication remove integer coefficients repeated addition example sin x cos x would become aa bb final step lexically order side identity switch sides necessary left side lexically right side thus tan x sin x cos x would become c b bc identities restricted trig functions single variable standard form sum products form product terms lexically ordered form greatly reduces variability representation equivalent identities good example general rule ai transform problem standard form variety equivalent forms reduced far possible program assume inputs trig identities given standard form given list identities used transforms one identities problem identities write three functions one three heuristic methods defined function select best transform identity first applied solving problem ie proving left side problem identity transformed right side three functions usually pick different transform identities three heuristic methods named simplification familiarization effectiveness heuristic simplification heuristic scoring function difference number symbols left right sides transform identity identity selected one sides must applicable left side problem identity eg problem prove sin x tan x cos x sec x standard form aa bb cc ff transform identity aa bb applied left side problem p simplification score symbols left side including sign one symbol right side applying left side p reduce number symbols p greatest score selected program print scores identities given problem identification numbers identities familiarization heuristic transform identities first identities list table given packet id numbers also listed use list numbers indicate familiarity score transform identities first id list show familiar identity second next familiar etc transform identity chosen one closest head list applied left side problem identity effectiveness heuristic one complex supposed provide score called e measure applicability either left right sides identity left side p identity also degree identity likely make left side p identity like right side p identity thus approximate measure degree make left side p current problem become closer right side p goal define feature set left side p set single trig objects pl p left side set different pairs trig objects product terms pl set pairs product terms pl common objects taken away divided make feature set left side p right side p left side right side feature sets already available feature use weight indicate complexity w sum symbols feature give added importance matching features lots symbols eg p aa bb cc ff flp b c aa bb cc aa bb aa cc bb cc w feature set left side p corresponding weight feature frp f ff w available similar feature sets available identities e score computed adding together weights features present weight multiplied desirablity factor d intended show single feature associated given w going help hinder finding solution compute e feature flt frt examined compared feature set left right sides p feature fi weight wi desirability factor di e sum wi di features flt frt find di various possibilities feature could left side right side could left side p right side p situation described desirable situation since applying left side left side p remove feature left side p feature right side p help solve problem situations d scores d factors quite arbitrary using example p aa bb cc ff flp b c aa bb cc aa bb aa cc bb cc w frp f ff w let assume following scored aa bb flt b aa bb aa bb frt w features scored one time giving situation w d feature adds e features b aa bb aa bb considered e feature considered d contributes e effectiveness score e applying p e notes familiarity heuristic use list l integers list correspond first identities list packet problem identities used program find best identity using three heuristics separately following identities program print scores computed id selected problem first found