date tue nov gmt server ncsa content type text html last modified thu oct gmt content length cs fix project fix project mentioned class suggested algorithm project algorithm small change deadlocking preemptive scheduling effect couple teams actually experienced problem showing murphy law valid something go wrong eventually deadlocks due bug reported windows java implementation built preemptive scheduling know anybody observed solaris even threadscheduler disclaimers problem applies second hygienic algorithm algorithm deadlocks bug program required fix bug get full credit assignment m telling case re problems tracking cause deadlock suspect might due problem likely deadlock re seeing due problem ordinary bug program program deadlocks solaris without threadscheduler certainly bug turn threadscheduler simply comment line sched start deadlocks windows likely certain bug caused problem problem arises synchronized methods contain calls synchronized methods possible set circular pattern calls distinct objects example b neighboring philosopher objects takeforks calls b requestfork b putforks calls givefork suppose thread preempted active waiting takeforks thread allowed enter b putforks point locking locking b calls givefork block waiting mutex subsequently resumed calls b requestfork block b mutex point deadlocked today class oct joni baker pointed particular scenario cannot occur code carefully written prevent duplicate requests sample code wrote blackboard b putforks calls givefork b previously requested fork b takeforks calls b requestfork previously requested class said complicated scenario could devised show deadlock still possible couldn think one spot seems require least three philosophers consider circular pattern philosophers b c pair sharing one fork e three philosopher version original dining philosophers problem assume b eating forks shares c fork shares c let ta tb tc represents threads philosophers b c suppose c gets hungry b finishes eating gets hungry following sequence events possible c gets hungry thread ta enters c takeforks calls b requestfork returns false b eating thread tc preempted b finishes eating tb enters putforks seeing request c tries call c givefork thread tb blocked tc still active c takeforks gets hungry ta enters getforks already fork shares c ta tries call b requestfork blocked tb still active b putforks thread tc resumed tries call getfork point three threads deadlocked example couldn show morning projector original version takeforks ta solution project private synchronized void takeforks state hungry int forkshave number forks currently owned forkshave forks length int forks length forks forkshave else forks haverequested phil forks neighborid requestfork forks forkid forks clean true forks true forkshave else forks haverequested true forkshave forks length forkshave try wait catch interruptedexception e state eating trick split takeforks two pieces first called forksneeded synchronized procedure necessary manipulation shared variables remaining code touch shared variables ever change synchronized procedure finds fork philosopher doesn needs request returns index fork exists forks returns sets local state eating fork exists absent forks already requested waits tries private synchronized int neededfork state hungry int forkshave number forks currently owned int forks length forks forkshave else forks haverequested forks haverequested true return forkshave forks length state eating return try wait catch interruptedexception e private void takeforks int neededfork return phil forks neighborid requestfork forks forkid givefork forks forkid give fork end class patrick gaffney pointed still danger race condition happens thread ta preempted takeforks call b requestfork returned true gets chance call givefork point neither b thinks fork call b requestfork updated b data structure indicate b givefork chance update variables show necessarily problem code carefully written cope unusual situation example tb allowed run next may become hungry seeing longer fork may call requestfork find doesn fork requested point neither philosopher thinks fork copyright marvin solomon rights reserved