date tue jan gmt server ncsa content type text html last modified fri jul gmt content length split c split c uc berkeley cs division split c parallel extension c programming language supports efficient access global address space current distributed memory multiprocessors retains small language character c supports careful engineering optimization programs providing simple predictable cost model stark contrast languages rely extensive program transformation compile time obtain performance parallel machines split c programs programmer specifies compiler takes care addressing communication well code generation thus ability exploit parallelism locality limited compiler recognition capability need second guess compiler transformations optimizing program language provides small set global access primitives simple parallel storage layout declarations seem capture useful elements shared memory message passing data parallel programming common familiar context split c currently implemented thinking machines corp cm intel paragon ibm sp meiko cs development cray d versions built using free software foundation gcc message passing systems available machine faster implementations underway meiko cs using elan libraries networks workstations using active messages used extensively teaching tool parallel computing courses hosts wide variety applications split c may also viewed compilation target higher level parallel languages available documentation split c includes following parallel programming split c introduces language example postscript version introduction split c tutorial introduction split c implementing split c meiko cs preliminary results split c releases download split c distribution platform meiko platforms soon added related projects include mantis parallel debugger applications include connected components sorting back cs division home page