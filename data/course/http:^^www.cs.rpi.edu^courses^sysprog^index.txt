date wed nov gmt server apache content type text html content length last modified wed nov gmt systems programming home page systems programming home page fall last updated november optional final exam course scheduled monday afternoon dec pm minutes open book open notes alert made modifications spec project read changes clicking contents course information grading schedule projects sample programs first half class sample motif programs code text motif x resources exam information kerberos resources afs notes miscellaneous resources course information instructor robert ingalls executive officer computer science dept amos eaton phone email ingalr rpi edu ingallsr cs rpi edu office hours tu th texts advanced programming unix environment w richard stevens addison wesley x window system programming applications xt douglas young prentice hall teaching assistants lakshmi bhat amos eaton email bhatl cs rpi edu office hours m w corey bufi amos eaton email bufic cs rpi edu office hours m w course introduces students basic concepts systems programming including system calls files o process management interprocess communication networking concurrent programming graphics using x windows particular emphasis placed implementation concepts unix operating system implementations also covered prerequisites students assumed able program c basic understanding data structures assembler language programming grading two tests six programming assignments tests count course grade program assignments varying weights depending degree difficulty total make exams however optional comprehensive final exam used replace missing test project lowest test project academic integrity programs submitted must work expected develop programs independently may receive much help wish use operating system text editors debuggers file transfer protocols may consult members class interpreting assignment may get help finding bugs fixing bugs allowed look copy another person code discuss design decisions others cannot show code others students found violation guidelines fail project reported dean programming assignments programming intensive course students expected strong c programmers assignments may done either c c may use whatever platforms compilers wish develop code code submitted must run sun aix platforms rcs must compile without errors significant warnings using gcc wall assignments submitted e mailing source code ta multiple files bundled using shar must submit make file assignment ten point per day penalty lateness schedule schedule tentative taken literally sometimes ahead sometimes behind sometimes completely schedule topics date topics reading tu aug unix standards posix debugging shar stevens ch th aug structure c program compiling linking make libraries concept system call errno stevens ch tu sep o files file system calls stevens ch th sep files directories system calls stevens ch tu sep process concepts fork exec etc stevens ch th sep process group relations daemon processes stevens ch tu sep signals stevens ch th sep interprocess communication pipes fifos stevens ch tu sep concurrency concepts none th sep concurrency unix semaphores file locks shared memory stevens ch tu oct examples postscript printer database library stevens ch th oct client server model sockets online reading tu oct sockets internet review none th oct exam none th oct design clients servers tu oct intro networking protocol stacks th oct internet ip tu oct tcp udp th oct security kerberos tu nov overview x window system young ch th nov primitive motif widgets young ch tu nov manager widgets young ch th nov menus dialogs young ch tu nov events young ch th nov graphics color fonts bitmaps young ch tu nov creating widgets young ch tu dec review th dec exam projects general project guidelines projects follow guidelines good programming practices list program comment top name login id brief description program special compiling instructions main like executive company work delegate work functions functions short one thing function ever lines function brief comment describing necessary comment every line code well written require lot line commenting however use comments describe unusual code hard follow code complicated code describe non obvious variables variables functions meaningful names use single letters like loop counters check return code system call fail appropriate error handler code enough error checking matter user program seg fault loop forever strange things hard make program idiot proof idiots clever code must written alone except use modify sample code text class long provide credit source project project project project project project problems suggestions send mail sysprog cs rpi edu miscellaneous resources request one students link list rfcs request comments contains protocols many common network services well standards internet