date tue jan gmt server apache content type text html content length last modified fri nov gmt cs programming assignment cs computer science ii fall programming assignment assigned friday november nd e mail proposal due wednesday november th external documentation due tuesday december nd program listing due tuesday december th scheduled demonstrations tuesday december th following note standard late penalties apply dates however work accepted last day classes friday december th last programming assignment semester design implement c program visually demonstrates ideas underlying one advanced sorting techniques studying class requirements program must written c required use sac computers rather use computer systems readily available campus including limited sac computers ibm pc macintoshes library microlabs next computers would like use computer system one check first whatever system choose must way proving able compile c program example creating program listing must available campus demonstrate program must choose one advanced sorts studying class namely quicksort heapsort shellsort show program must design method visually demonstrating c program ideas underlie chosen sort many possible different designs three ideas using ibm pc graphics capabilities along microsoft c borland c could demonstrate heapsort first could construct list randomly chosen integers graph cloud points list index positions plotted along horizontal axis values plotted along vertical axis apply heapsort list show cloud gradually changes shape first triangular heap nearly straight diagonal line signature sorted list first points could drawn red unsorted swap two points could briefly blink yellow back red finally point known reached final position sorted list could permanently become green could show running statistics many total comparisons swaps made much time sort taking like showing cloud points sorted say shellsort using sac unix gnu c g curses screen control library curses library used demonstrate interactive workings mazecrawler program won able show many points cloud limited maximum standard monitor screen columns effect would similar instead color could use special hilighting features made available curses using sac unix gnu c g regular cout statements demonstrate quicksort first could ask user choose several possible pivot picking strategies ll discuss lecture soon include picking st middle last item list item chosen random median value three items chosen random etc could ask user enter unsorted list numbers say user entered numbers could visually display list screen series text bars xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xxxxxxxxxxxx far left hand number position item list next number value item program could pause user signals ready continue pressing enter key would inform user next step involved performing quicksort pick pivot namely item position use partition list would visually display list could display entire list time could special way marking portion list currently undergoing partitioning say drawing using capital x drawing rest list using small x process drawing pausing explaining re drawing would continue entire list sorted could provide statistics good chosen pivot picking strategy particular list e g partitioning average size larger two partitions formed contained available list items optimal value encourage come design may use one two listed goals creative innovative show knowledge programming c chosen sort produce attractive informative demonstration program program must actually implement chosen sort say must capable applying chosen sort many different lists numbers old list program must means acquiring diverse lists numbers allowing user enter list creating list randomly different fashion time run etc however place reasonable constraints size list range values list program must also teach sort indicating strategy used sort order entire list also strategy used sort single sort pass ll need submit complete assignment must e mail proposal specifies computer system chosen use make version c compiler software using three sorts chosen work going visually demonstrate way chosen sort works must turn standard external documentation including specifications algorithm justification place proposed testcases must include extensive visual samples hand drawn ok demonstration program look run must turn listing program method indicating program compiled errors place program executions must schedule minute demonstration program must submitted proposal external documentation program listing prior demonstration ll talk class go scheduling demonstration extra credit add demonstrations additional sorts program interesting aspects one sort seen studied good luck