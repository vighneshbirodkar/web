date wed dec gmt server ncsa content type text html last modified thu sep gmt content length cs section lecture notes week lecture notes week topic introduction computers programming use microsoft windows microsoft fortran hewlett packard vectra text chp notes introduction fortran brief history one first high level programming languages circa forula translator good engineering scientific applications fortran revision standard widespread version fortran revision additional functionality widespread learn fortran instead c pascal basic easier write complex formulas equations still widely used engineering lots existing engineering program libraries written fortran easy learn similar basic use fortran pc click compiling steps source program fortran sent compiler compiler translates fortran machine language couple holes left spits obj file program may broken lots segments may obj around rate objs must linked together plus things needed fill holes worry holes obj files read spits exe file runnable machine language inside computer input keyboard mouse output monitor printer inside cpu central processing unit computations memory data program data removable storage take things disk onto memory back must put things memory order run memory binary tune ebony ivory kidding cell memory called bit either charge charge call charge charge bits one byte string combo eight since bit one things bits one things bits one things e n byte lets us store different patterns binary counting decimal counts ones place tens place hundreds place e digit one things binary example uses powers binary ones place two place four place e take example decimal x x x binary x x x machine language assembly fortran dark ages since everything stored everything written way example might stand add might mean add whatever memory location whatever store result memory location note last three sets digits refer memory locations actually add memory locations quite real example gives idea going machine code hard read saw code like d go nuts esp since add takes arguments move takes arguments etc hard tell sets numbers stand commands like add stand memory locations solution assembly language add every machine lang statement corresponds one assembly statement vice versa problem takes loooong time write also worry lots details programmers noticed many times sequences steps repeated quite lot load r load r add r r r store r worry won know show tedious things assembly language says take two memory locations stick values registers register place computations separate memory cs explains order compute grab values memory stick registers add two registers third register store back memory somewhere else whew instead d nice say sum term term fortran statement translated compiled assembly instructions see worry memory sum term term located compiler takes care worry registers compiler four statements get compacted one even deal binary copyright copy modified fromjeff lampert tick cs wisc edu last modified september