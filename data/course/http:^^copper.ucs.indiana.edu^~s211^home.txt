date wed nov gmt server ncsa content type text html last modified wed nov gmt content length c h course description c h introduction computer science fall contents general information get network id account copper zinc list tutors c motivation description course materials syllabus lecture scripts assignments communication evaluation gradebooks policies new old help review sessions final exam student chapter acm first meeting wednesday november scheme interesting letter disney studios solutions second midterm examination general information instructors david leake section email leake cs indiana edu office lh d phone mark leone section email mleone cs indiana edu office lh g phone george springer section email springer cs indiana edu office b phone jonathan sobel erik hilsdale section discussion section new home page section email jsobel cs indiana edu ehilsdal cs indiana edu office phone associate instructors eugene byon sections email ebyon cs indiana edu office phone peter drake sections email pedrake cs indiana edu office phone brian eyster sections email beyster cs indiana edu office phone steve ganz sections email sganz cs indiana edu office phone byron long sections email bylong cs indiana edu office phone prerequisites years high school algebra m credit hours lectures section tr lh david leake section mwf lh mark leone section tr lh george springer section mwf bh jonathan sobel erik hilsdale discussion sections lecture sections section r sb steve ganz section r sb steve ganz section f sb byron long section f sb byron long discussion sections lecture section section r bh eugene byon section r sb eugene byon section f sb brian eyster section f sb brian eyster discussion sections lecture sections section r lh peter drake discussion sections lecture sections section f opt jonathan sobel erik hilsdale local newsgroups ac csci c ac csci h cs students office hours monday mark leone brian eyster jonathan sobel lh steve ganz tuesday peter drake george springer lh b david leake lh d erik hilsdale lh wednesday mark leone byron long eugene byon lh thursday george springer lh b david leake lh d erik hilsdale lh difficult make times appointments times may made contacting instructors ais course description programming general art solving problems study computer programming therefore study solving problems computer also much programmer writes program actually constructing model process something model called algorithm furthermore programmer concerned whether program simply works also well works interacts users programs class designed mainly teach art computer programming end shall try develop sense style aesthetics help guide programming efforts shall try develop intuition things work learn design principles go engineering good programs shall teach little computer science give way analyzing programs algorithms finding means improve learn number standard algorithms programming idioms standard ways performing certain kinds tasks programming need choose language whichever choose language place limits programs look like provides us framework organize ideas processes problem solving programming language use class scheme chosen provides convenient mechanism describing idioms processes programmers found useful won spend much time teaching details language find easy pick go along often helpful first program using simple powerful language like scheme even one must translate solution traditional programming language like c simplicity scheme allows us treat many computer science topics depth would possible c c used traditional languages inessential detail must mastered scheme allows us give better impression true joys challenges programming better position study c next computer science course c finally computer programming still fairly young field hasn lost sense fun lots people including us hope enjoy much goals end course student expected know following concepts able write good scheme programs students able use following data types symbols numbers booleans lists vectors matrices strings characters students know write programs recursive iterative imperative styles students able write recursive programs lists containing top level items containing nested sublists tree recursion students able use procedures first class objects pass arguments also write programs whose values procedures includes currying composing procedures students understand concept scope environment able use locally defined procedures students able use abstraction data making programs independent data representation also procedures abstracting structure programs students able use input output routines write convenient user interfaces programs students able handle binary representation numbers students know standard sorting routines e g insertion sort o n mergesort quicksort o n log n understand advantages disadvantages also able write linear binary search programs students know mutate various data structures including lists vectors strings addition understand side effecting variables students able read programs appreciation constitutes good programming style aware relative efficiency programs certain topics included time permits include things writing using syntactic extensions developing object oriented programming package scheme using streams literate programming every programmer knows programs must comprehensible computer programming language implementation complains practice generally easy solve problems less appreciated programs must also comprehensible programmer otherwise programmer cannot confidence program correct program may easily comprehensible computer intended programmer knows intended cases also essential programs comprehensible programmers though typical student programming experience real world programmers spend time modifying huge programs developed long period time many programmers modifying someone else code even months later may joy nightmare depending clearly program written thus emphasize importance literate programming writting programs easy understand relative difficulty problem solve literate programming almost always important programming goals efficiency code compactness though efficiency compactness often byproducts literate programming course materials required g springer d friedman scheme art programming mit press mcgraw hill cover first three quarters text source code available c course packet available white rabbit indiana ave packet contains tutorial software systems course uses first assignment recommended d p friedman m felleisen little schemer fourth edition mit press little book best introduction recursive programming know designed self study recursion used throughout course students require extra material feel comfortable using difficulty mastering recursion strongly recommend get book study interpreters macs pcs fairly beautiful scheme package available macintosh less beautiful one dos syllabus lecture scripts first three quarters text scheme art programming covered approximately one week devoted chapters listed links following list script files drive line lecture presentations script file chapter n may also accessed machine copper file c www scriptn prof leone uses separate script lecture based scripts sometimes examples chapter data operators emacs keybindings chapter procedures recursion chapter data abstraction numbers chapter data driven recursion chapter locally defined procedures poly alg ss poly rep ss poly rep ss binary notation chapter interactive programming chapter abstracting procedures chapter using vectors chapter sorting searching chapter mutation chapter object oriented programming assignments programming assignment due almost every week assignments appear assigned assignment n also available plain text file c www anf txt links answer files names form c www ansnf ss added appropriate assignment due answers getting started pm simple procedures pm answers simple recursion pm answers recursion pm answers deep recursion fri pm answers iteration pm answers locally defined procedures polynomials pm answers binary numbers data abstraction trees pm answers encodings interactive programming fri pm answers procedures arguments building huffman trees pm answers procedural abstraction strings vectors tue pm submitted programs must run chez scheme recommended use ucs university computing services machines named copper zinc new students network id instructions creating copper zinc accounts soon account configure run emacs scheme within emacs handin program done entering c setup hitting return logging login next time account configured c configure copper zinc accounts assignments posted wednesday afternoon due electronically p m wednesday following week written material due beginning lecture thursday friday late assignments accepted computing semester assignment average lowest assignment grade dropped although assignments count final grade essential assignments master material computer programming like playing musical instrument mastered lots practice programming assignments submitted using program c handin directory c bin copper zinc handin program evaluates grades program behavior results returned almost immediately via email since zinc allows e mail sent received read grading results machine normally read mail may correct resubmit programs many five times announced deadline highest grade recorded assignment one entered class gradebook course may discuss assignments students assume true courses expect actually think fully understand assignment solutions found students copy someone elses work turn something fully understand usually fail examinations added good assignment grades insufficient pass course teamwork assignments good long member team contributes fully understands programs certainly means put name file written someone else submit work final submission assignment electronically graded associate instructor also grade assignment style good programming style makes easier get programs working also develops habit literate programming already noted great importance developing large programs course good style also rewarded evaluation exams scheme programming consistent use suitable style program indentation essential violation first cardinal rule indentation automaticaly result loss credit communication course newsgroups ac csci c ac csci h used post announcements assignments exams exceptions usual office hours also encouraged use post questions related course share related information class make habit looking new notes times week individual personal matters please feel free contact instructor associate instructor via email another newsgroup check regularly cs students contains important announcements computer science department students also contains interesting dialogs various topics course description accessible html hypertext markup language file www world wide web url universal resource locator http copper ucs indiana edu c home html updated additional information programming assignments course progresses view resource given url use netscape program networked pc mac netscape underlines html hypertext links follow link click url computer science department home page http www cs indiana edu home page html sorts information obtained evaluation assignments exam p m tuesday october th study guide room assignments first midterm examination sample exam first midterm examination solution first midterm examination exam p m tuesday november th sample exam second midterm examination study guide room assignments second midterm examination solution second midterm examination final exam sections p m thursday december th sections m p m monday december th help review sessions final exam mid term final exams locations announced gradebooks electronic gradebook course updated assignment exam gradebook section gradebook section gradebook section gradebook section policies attendance class attendance monitored although regular attendance class participation strongly recommended attendance examinations compulsory make examination normally given special assignments projects given help students raise grades academic integrity read computer science department statement academic integrity sure understand rules computer science courses operate cases academic dishonesty reported office student ethics branch office dean students withdrawal withdrawal wednesday october th requires concurrence dean based extenuating circumstances incomplete grade incomplete final grade given prior arrangement exceptional circumstances conforming university departmental policy bulk course work completed passing fashion