date tue dec gmt server ncsa content type text html last modified thu oct gmt content length etch overview instrumentation optimization win intel executables etch application program performance evaluation optimization system developed intel x platforms running windows windows nt linux operating systems system allows annotate existing binaries arbitrary instructions example trace perform coverage analysis rewrite existing binary executes efficiently etch works directly x executables require program source code either measurement optimization results d like see traces ve generated popular windows programs x click uses etch etch targeted two different user groups developers wish understand performance programs development cycle users wish understand improve performance common applications executing environment etch provides groups measurement tools evaluate performance several levels detail optimization tools automatically restructure programs improve performance possible etch works etch reads executable binaries win dlls application modifies image writes new one enhanced measurement optimization transformations performed binary etch change program correctness although program transformed performance measurement collection run slowly etch require changes operating system modified etch binary may utilize os facilities software timers even implementation specific facilities intel pentium performance counters using etch three key concepts using etch instrumentation instrumentation transforms binary according arbitrary criteria example program may instrumented count instructions count occurrence instruction simulate cache tracking memory references data collection instrumented executable run time instrumentation routines collect data program data processing run data generated instrumented executable processed trace based optimization typical data processing phase made possible etch instrumentation instrument program etch invoked name executable dll dll provides set routines invoked instruction executable roughly etch operates instruction executable instrumentbefore instruction instrumentafter instruction end instrumentbeforemainprogram instrumentaftermainprogram instrumentation tool provides implementations functions call back functions turn direct etch modify executable respect specific instruction directions effect say instruction runs please call specific function specific set arguments example count instructions instrumentbefore procedure would direct etch insert code incremented counter runtime inserted instructions change correctness program entire executable scanned instrumented etch writes new version executable run functions referenced callback routines well etch runtime library included new executable data collection executable written etch run instrumentation routines run side effect running program instrumentation routines program running inspect state program example contents registers effective addresses addresses whether text data relative original binary collection routines compensate fact part modified executable data processing etched program terminates data collection routines save information executable disk later post processing utilities examine data example predicted execution time determined fact based hypothetical processor cache memory speeds lower level detailed information program performance obtained shown graph instruction cache performance collection popular win programs graph shows miss penalty first level instruction cache second level unified cache perl interpreter three commercial c compilers ms word optimization etch also provides facilities rewriting executable order improve performance example instrumentation phase rather adding new instructions direct etch write executable according different code layout optimized cache vm behavior impact optimization graph shows reduction instruction cache misses execution time cycles collection popular win programs optimized code layout using etch mhz pentium etch first used discover programs locality executing training set rewritten order achieve tighter cache vm packing infrequently executed basic blocks moved line frequently interacting basic blocks laid contiguously executable results measured using inputs different used training user interface addition programming interface etch also offers graphical user interface performing common instrumentation optimization operations user interface drive measurement process runs etch original binary produce new binary modified collect necessary behavioral data executes modified binary produce data feeds data analysis tools produce graphs charts help pinpoint problems problem identified user may instruct etch perform performance optimization transformation example etch may rewrite original binary change layout data code order improve cache virtual memory performance sample dialog box user interface sample results showing distribution instruction opcodes requirements etch runs intel pentium p processors least mb memory etch works bit win binaries used programs built msvc borland intel compilers availability interested obtaining information etch please contact etch info cs washington edu project members etch due efforts people harvard university university washington include dennis lee ted romer geoff voelker alec wolman wayne wong brad chen brian bershad hank levy