date mon nov gmt server ncsa content type text html last modified tue jan gmt content length cs project suggestions spring cs project suggestions spring list suggested topics project also welcome come project see projects listed open ended research questions definitely discover interesting stuff end projects excited projects need read additional papers list papers online copies otherwise give references either find library ask copies file systems cache management disk performance continues lag behind microprocessor performance file system increasingly becoming performance bottleneck many systems file system performance often determined effectively file cache used unfortunately operating systems today still use lru approximation two hand clock caching strategy decide file data kept cache lru algorithm unfortunately always perform well due following problems flushing one time scan large file wipe entire content file cache file larger cache loops sometimes group files always accessed order files bigger cache lru would perform well research topic consists three projects trace driven simulation study write trace driven simulator takes sprite file system traces dec src epoch file system traces input study hit ratio file cache different replacement policies lru replacement baseline algorithm lbn replacement file replace block largest logical block number first sequence detection trace detect situations file almost always read immediately file b case file b blocks replaced file blocks lru replacement deciding replacement blocks consider times last two references file instead last reference like done lru algorithm suggested database researchers might good application file cache management well policy might discover along way papers might want read project ftp ftp cs princeton edu cd reports get ps z inproceedings dewitt buffer policy evaluation author hong tai chou david j dewitt title evaluation buffer management strategies relational da tabase systems booktitle proceedings eleventh international conference ver y large databases year month aug pages inproceedings db lru k author elizabeth j o neil patrick e o neil gerhard weikum title lru k page replacement algorithm database disk buffer ing booktitle sigmod year month may pages file system trace replay good file caching algorithm could prove performs better existing ones sometimes use benchmark programs often small capture long term effects file caching traces hand seems good simulations unless replay real system project investigates emulate trace events actual file os system simulate different caching policies traces writing special device driver implements buffer cache result would comparison different buffer caching policies terms elapsed time real systems instead file cache hit ratios papers might want read project http www eecs harvard edu keith papers realloc ps gz better file caching solaris two projects kernel level one digs tries find needs done change solaris file caching policy fact may need change vm paging algorithm well pick policies listed policies come implement solaris kernel measure performance using benchmark programs papers might want read project ftp ftp cs princeton edu cd pub people pc osdi get paper ps z virtual memory page replacement algorithms past years dram price dropped much result dram still fairly expensive people spend half cost computer memory hand operating systems managed memory well although operating systems provide virtual memory many applications cannot run machines relatively small memory paging performance poor research topic tries find demand paging performance poor many large memory applications techinques applied improve situation three projects memory intensive applications instrument solaris kernel collect information related vm system page fault information pid memory address time etc cost page faults long disk operation take cleaning dirty pages often done cost disk writes information collect set applications think important usually require much memory run workstation run anyway collect paging information traces figure exactly cause paging thrashing simply enough memory definition enough memory less working set application vm system prefetching policy hurt rather help performance writeback policy two hand clock policy particularly bad page replacement policy application might want feed page fault traces cache simulator purpose multi user workload similar study use multi user workload instead single application spec server benchmarks desktop bench examples multi user workload vm system performs poorly find improve situation particular pay attention interaction virtual memory system file buffer management compete memory resource would better solaris used fixed partition memory among vm file cache also see messages project leader solaris vm system memory intensive applications finally really kernel hacking another oppurtunity messages project leader solaris vm sun madvise usage solaris implements madvise system calls many applications use project take utilities tar ar ld grep etc modify use madvise see performance differences project also see implementation madvise seg vn c improved new madvise calls needed g paging algorithm solaris uses global clock algorithm better one thresholds used paging better tuned interaction swapping paging thresholds kicks appropriate better implemenation h page coloring various cpu cache types types cpu caches pipt vipt pivt vivt two levels caches even combinations physical freelist page management try page coloring various ways improve cache utilizations well reduce cache flushes pick various processors machines see better page coloring algorithms two projects try study questions trace analysis project actually change kernel experiment issues papers might want read projects inproceedings anderson oopsla author keith krueger david loftesness amin vahdat tom erson title tools development application specific virtual memor y management booktitle oopsla year month oct pages inproceedings harty appcontrol author kieran harty david r cheriton title application controlled physical memory using external page cache management booktitle fifth international conference architectural support programming languages operating systems year month oct pages www regional cache management web grows expands traffic network backbones quickly approaching capacity limit network one attractive method reducing network traffic regional caching e department wise campus wisc shared information resource project seeks build regional information cache need cache management layer keep track documents cached member machines need modify client browser intercept url requests make request go cache management layer first cache management layer return document request another workstation knows document cached region otherwise request forward real server cache actually sit one machine rather collection cached documents member machines region cache management maintains directory documents cached region authenticates cached copy document keeping fingerprints addition cache manager needs coordinate servers maintain consistency cached documents e keeping date investigate implementation tradeoff various cache management policies consistency protocols papers might want read projects http excalibur usc edu http www das harvard edu users faculty margo seltzer papers hotos ps gz http www eecs harvard edu vino web usenix databases cow clusters workstations clusters smp support database systems effectively scalable fashion project small step investigating big question goal take house database storage manager shore port onto node cow cluster project involves making shore true smp program applying fine grained software dsm technique binary running node cow cluster kernel documentation debugging binary instrumentation projects area kernel documentation messages solaris vm project leader e documentation folks might good project look code document works example vm system hat layer scheduler o system even portions easy h fork fork typically heavy weight operation speeded kernel reliability b kernel reliability another project would look panics system see handled gracefully note many panics invariant system e assert interested truly errors handle one interesting one kmem alloc nosleep caller supposed able handle return null free memory system many cases caller panics good test would kmem alloc return random failures kmem alloc nosleep see system still works fixed file systems behave random disk error occurs binary instrumentation investigate whether binary rewriting techniques e g eel applied successfully kernel probably number routines shouldn instrumented eel find usually instrumenting crashing machine parallel o systems applications would one build parallel o system partly depends application needs collect parallel applications require large data sets charaterize o demands port applications message passing architecture observe performance parallel file system prototype