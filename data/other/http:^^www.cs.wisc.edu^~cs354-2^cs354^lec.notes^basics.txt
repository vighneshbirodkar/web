date tue nov gmt server ncsa content type text html last modified fri aug gmt content length lecture notes chapter basics chapter basics administrative stuff introduce self goals course provide basic understanding future courses introduction computer architecture learn low level details computers work hand policy sheet lab acct forms first assignment academic misconduct policy form brochure text bookstore go policy sheet detail go academic misconduct detail unix tutorials log soon introductory material basic concept within computer science engineering levels abstraction hierarchy models used purposes design programs computers problem large needs broken divide conquer one way introducing hierarchy level solving problem level example design computer transistors available gates flip flops components like registers adders cpu memory system o devices computer system cpu computer system memory o stuff components gates transistors top vs bottom design another example software levels abstraction writing large program lines code top divide modules design module separately define procedures functions accomplish task specify interfaces parameters procedures implementation function independent interface specification different level abstraction program design big picture computer software running hll computer pascal c fortran hardware get one wanted write nice abstract hll stupid computer knows execute machine language machine language binary sequences interpreted computer instructions human readable help situation introduce assembly language human readable form machine language uses mneumonics instruction type operands need something translate assembly lang machine lang assembler lastly program translated hll programs assembly language d made compiler complete picture hll compiler assembly assembler machine language language course deals software aspects assembly language assemblers machine language also deals hardware aspects computer execute programs introduction study computer architecture interface hardware software computer architecture relation hardware stuff touch software programs code design computer hardware executes programs programming language example computer directly executes pascal experience engineering community know hardware executes hll programs directly slower execute simple basic set instructions usability machine everyone wants pascal machine high level language translated assembly language class whatever language writing programs look like machine executes programs directly hll sal mal tal assume know hll give sal later semester learn mal tal hll sal mal abstractions defines computer architecture tal happens real manufactured architecture basic computer operation simplified diagram computer system hardware cpu memory o cpu controls running programs executes instructions makes requests memory memory programs program variables stored handles requests cpu stored program computer concept interaction cpu memory execute instruction cpu must able request things memory instruction fetch operand variable load load operand variable store store memory really needs able operations read fetch load write store label specifies unique place memory label often identified address read cpu specifies address read operation memory responds contents address write cpu specifies address data stored write operation memory responds overwriting data address specified discussion computers operate wrt execution instructions discussion generic assembly language instruction example mult b c instructions operands stored memory used cpu must fetched loaded cpu steps involved fetch instruction questions later instruction address figure instruction decode mult instruction also reveals many operands since number operands fixed given instruction operands load operand operands b c operation specified instruction multiply b c together store result result goes variable next step suppose want execute multiple instructions like program except branch instructions execute instructions sequentially cpu must keep track instruction executed use extra variable contained within maintained cpu called program counter pc contents variable address next instruction executed modify cpu steps fetch instruction address given pc added step modify pc contains address next instruction execute added step could come time step convenient think step set steps works fine instructions except branch instructions branch instructions example beq x y label fetch instruction address given pc update pc decode beq instruction fetch operands x y compare operands equality equal overwrite pc address implied rd operand label cpu steps involved fetch instruction update pc decode load operand operation specified instruction store result notice series steps gets repeated constantly make computer useful needed way give pc initial value first instruction program way knowing program done pc given starting address another program cycle steps important forms basis understanding computer operates cycle steps termed instruction fetch execute cycle