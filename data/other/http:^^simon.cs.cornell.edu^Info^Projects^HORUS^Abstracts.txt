mime version server cern date monday dec gmt content type text html content length last modified tuesday nov gmt abstracts horus papers abstracts software reliable networks kenneth p birman robbert van renesse scientific american may failure single program single computer sometimes crash network intercommunicating machines causing havoc stock exchanges telephone systems air traffic control operations two software designers explain done make networks robust horus flexible group communication system robbert van renesse kenneth p birman silvano maffeis communications acm april emergence process group environments distributed computing represents promising step towards robustness mission critical distributed applications process groups natural correspondence data services replicated availability part coherent cache used support highly available security domains group mechanisms fit well emerging generation intelligent network collaborative work applications masking overhead protocol layering robbert van renesse proceedings acm sigcomm conference stanford september layering protocols advocated way dealing complexity computer communication also criticized performance overhead paper present insights design protocols insights used mask overhead layering way similar client caching file system techniques achieve order magnitude improvement end end message latency horus communication framework atm network able send deliver messages varying levels semantics microseconds using protocol stack four layers written ml high level functional language world wide failures werner vogels proceedings acm sigops european workshop connamoran ireland september one issue unites almost approaches distributed computing need know whether certain components system failed otherwise unavailable designing building systems need function global scale failure management need considered fundamental building block paper describes development system independent failure management servcies allows systems applications incorporate accurate detection failed processes nodes networks without need making compromises particular design framework protocol composition horus robbert van renesse kenneth p birman roy friedman mark hayden david karr august horus system supports communication architecture treats protocols instances abstract data type approach encourages developers partition complex protocols simple microprotocols implemented protocol layer protocol layers stacked top variety ways run time first describe classes protocols supported way next present horus object model designed technology interface layers makes work present example layer implements group membership protocol next show given set required properties appropriate stack constructed look example stack protocols provides fault tolerant totally ordered communication group processes work contributes standard framework protocol development experimentation provides high performance implementation virtual synchrony model introduces methodology increasing robustness protocol development process trading consistency availability distributed systems roy friedman ken birman tr april paper shows two important classes actions non left commuting strongly non commuting cannot executed concurrent partitions system provides serializable services result indicates inherent limitation ability systems provide services consistent manner network partitions deciding partitionable networks roy friedman idit keidar dalia malki ken birman danny dolev tr november motivated chandra toueg work study decision protocols model closely approximates real distributed systems results show weakest failure detector associated consensus algorithm adapted network omission failures occur periods processes suspect one another faulty protocols majority subset participants reach decisions behalf system whole also characterize series stages necessarily arise execution jointly findings establish direct relationship extended version three phase commit protocol makes progress even traditional three phase commit would block consensus protocol chandra toueg although explore linkage results also applicable agreement protocols systems sort leader election dynamic group membership strong weak virtual synchrony horus roy friedman robbert van renesse august formal definition em strong virtual synchrony capturing semantics virtual synchrony implemented horus presented definition nice property every message delivered within view sent however shown order implement strong virtual synchrony application program block messages view changes alternative definition called em weak virtual synchrony implemented without blocking messages presented definition still guarantees messages delivered within view sent uses slightly weaker notion view message sent implementation weak virtual synchrony block messages view changes developed shown use system provides weak virtual synchrony even strong virtual synchrony actually needed capture additional ordering requirements definition em ordered virtual synchrony presented finally discussed extend definitions order cope fact process become member one group packing messages tool boosting performance total ordering protocols roy friedman robbert van renesse july paper compares throughput latency four protocols provide total ordering two protocols measured without message packing used technique buffers application messages short period time sending messages packed together main conclusion comparison message packing influences performance total ordering protocols high load overwhelmingly optimization checked paper terms throughput latency improved performance attributed fact packing messages reduces header overhead messages contention network load receiving cpus using virtual synchrony develop efficient fault tolerant distributed shared memories roy friedman march paper shows define consistency conditions distributed shared memories virtually synchronous environments definitions allow develop fault tolerant implementations distributed shared memories normal execution operations performed efficiently operations take place configuration change must delayed three well known consistency conditions namely linearizability sequential consistency causal memory redefined virtually synchronous environments shown provide efficient fault tolerant implementations definitions protocol composition horus robbert van renesse kenneth p birman march horus communication architecture treats protocol abstract data type protocol layers stacked top variety ways run time paper starts describing many classes protocols supported way next describe horus object model designed technology interface layers makes work present example layer implements group membership protocol look example stack protocols provides fault tolerant totally ordered communication group processes conclude presenting remaining challenges project horus flexible group communications system robbert van renesse kenneth p birman bradford b glade katie guo mark hayden takako hickey dalia malki alex vaysburd werner vogels march horus system offers flexible group communication support distributed applications extensively layered highly reconfigurable allowing applications pay services use groups different communication needs coexist single system approach encourages experimentation new communication properties incremental extension system enables us support variety application oriented interfaces achieving critical reliability unreliable components unreliable glue mark hayden kenneth p birman march even aggressive quality assurance procedures yield best probabilistic confidence reliability complex systems distributed systems large numbers components enormously complex engineering artifacts hence may appear inherently unreliable despite best efforts researchers developers cellular distributed systems architecture offers hope drastically improving reliability current technologies settings reliability critical approach combines stateful style distributed computing within cells loosely coupled probabilistic inter cell computing model based probabilistic broadcast primitive give implementation primitive called pbcast demonstrate use implement methodology approach compatible use popular distributed computing reliability technologies offering considerable isolation spread failures among cells preserving privacy network mobile computers david cooper kenneth p birman march even wireless networks create potential access information mobile platforms pose problem privacy order retrieve messages users must periodically poll network information user must give network could potentially used track user however movements user also used hide user location protocols sending retrieving messages carefully designed developed replicated memory service allows users read memory without revealing memory locations reading unlike previous protocols protocol efficient use computation bandwidth paper show protocol used conjunction existing privacy preserving protocols allow user mobile computer maintain privacy despite active attacks incorporating system resource information flow control takako m hickey robbert van renesse february upcall based distributed systems become widespread recent years upcall based systems provide obvious advantages experiences systems exposed unanticipated problems unpredictability inefficiency incorporating system resources information flow control essential solving problems variants window based flow control suitable distributed systems investigated next message packing improves network bandwidth usage efficiency consequently message throughput presented finally back pressure mechanism controls admission messages system blocking applications high load presented combination window mechanism back pressure mechanism provides end end management system resources former manages network resources latter manages operating system resources combination maintains good throughput even high load design performance horus lightweight group communications system robbert van renesse takako m hickey kenneth p birman december horus project seeks develop communication system addressing requirements wide variety distributed applications horus implements group communications model providing among others unreliable reliable fifo causal total group multicasts extensively layered highly reconfigurable allowing applications pay services use architecture enables groups different communication needs coexist single system approach permits experimentation new communication properties incremental extension system enables us support variety application oriented interfaces initial experiments show good performance support complex multi media applications using horus system werner vogels robbert van renesse december distributed multi media application involves protocols dissemination video audio data distributed application protocols necessary guarantee consistency fault tolerance security shared data objects horus system offers framework buildin g complex distributed systems involve number protocols well variety protocols diffe rent aspects distributed application including protocols specific multi media applications believe integrated approach superior combining different toolkits illustrate detailed example existing video demand application security architecture fault tolerant systems michael k reiter kenneth p birman robbert van renesse june process groups common abstraction fault tolerant computing distributed systems present security architecture extends process group security abstraction integral parts architecture services securely fault tolerantly support cryptographic key distribution using novel techniques detail design implementation services secure process group abstraction support also give performance figures common group operations preserving privacy network mobile computers david cooper kenneth p birman october even wireless networks create potential access information mobile platforms pose problem privacy order retrieve messages users must periodically poll network information user must give network could potentially used track user however movements user also used hide user location protocols sending retrieving messages carefully designed paper describe set protocols developed allow user mobile computer communicate without compromising privacy uniform actions asynchronous distributed systems dalia malki kenneth p birman aleta m ricciardi andre schiper september develop necessary conditions development asynchronous distributed software perform em uniform actions events performed process must performed processes paper focuses em dynamic uniformity differs classical problems processes continually leave join ongoing computation first treat static version problem lacking joins extend results obtained also include joins results demonstrate contrast consensus cannot solved asynchronous systems even single faulty process dynamic uniformity solved using failure detection mechanism makes bounded numbers mistakes dynamic uniformity arises systems maintain safety within primary partition network paper provides rigorous characterization framework upon several existing distributed programming environments based understanding partitions partition assumption aleta m ricciardi andre schiper kenneth p birman june paper discusses partitions asynchronous message passing systems systems slow processes slow links lead virtual partitions indistinguishable real ones raises following question partition asynchronous system overcome impossibility detecting crashed processes asynchronous system system model incorporates failure suspector detect possibly erroneously process failures based failure suspicions give definition partitions acccounts real partitions well virtual ones show certain assumptions process behavior incorrect failure suspicion inevitably partitions system show interpret absence partition assumption virtually synchronous communication based weak failure suspector andre schiper aleta m ricciardi april failure detectors accurately failure suspectors fs appear fundamental service upon build fault tolerant distributed applications paper shows fs weak semantics e delivers failure recovery information specific order suffices implement virtually synchronous communication vsc asynchronous system subject process crash failures network partitions vsc paradigm particularly useful asynchronous systems greatly simplifies building fault tolerant applications mask failures replicating processes suggest three component architecture implement virtually synchronous communication lowest level fs component top component defines new views b component reliably multicasts messages within view issues covered paper also lead better understanding various membership service semantics proposed recent literature process membership asynchronous environments aleta m ricciardi kenneth p birman february development reliable distributed software simplified ability assume fail stop failure model discuss emulation model asynchronous distributed environment solution propose called strong gmp supported highly efficient protocol implemented part distributed systems software project cornell university focus precise definition problem protocol correctness proofs analysis costs keywords asynchronous computation fault detection process membership fault tolerance process group comments werner vogels