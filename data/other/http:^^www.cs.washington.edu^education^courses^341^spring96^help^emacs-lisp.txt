date wed jan gmt server ncsa content type text html using gnu emacs common lisp interface using gnu emacs common lisp interface executive summary document designed help get started using lisp emacs mscc accounts isn complete set available rather designed get started using minimal set useful functions introduction first part course programming lisp although historically versions language would even want know recent years convergence one language definition commonlisp even book common lisp language considered bible lisp using implementation called allegro commonlisp allegrocl short one heavy duty industrial implementations allegro cl sold franz incorporated historical note origin name franz product originally called franz lisp people thought pretty darned funny time one nice things allegrocl comes nice package integrating process writing debugging code within single emacs session basic idea one process buffer open lisp constantly running one editor buffers one shows file lisp code interface allows things like point function definition editor buffer send automatically lisp process get online entries commonlisp manual find particular function defined automatically pop editor window worth experimenting package bit really make life lot easier ll try show cool features class getting started use environment must following create file called emacs home directory doesn already exist put following line load c emacs create file called clinit cl home directory put following line load c clinit cl start emacs edit lisp file lisp file must extension cl lisp automatically put emacs mode called commonlisp mode mode things like balance parentheses indent code automatically also allow send function definitions directly lisp process example typing emacs foo cl open file foo cl editing special common lisp mode buffer allows things like skip forward backward expressions look definition symbol online common lisp manual get list functions call particular function important emacs commands know note following commands c means hitting control key following commands work regardless mode current emacs buffer type c x c c exit emacs saved file ask want save type c x c save changes current file type c x c w save current file new file prompted file name type c x b switch another buffer already worked session type c x c f open another file type c x split emacs window two panes type c x o go back forth window type c x go revert display single window commands special buffers common lisp mode mode assigned buffer open file extension cl type c c l go lisp file lisp interpreter also start lisp interpreter already running type c c e go lisp interpreter lisp file recently edited type c c b send currrent buffer lisp interpreter evaluated type c c c b thing c c b switch lisp buffer type c c d evaluate current defun lisp interpreter type c c c compile current defun lisp interpreter type c c c go beginning current defun type c c c e go end current defun type c c control c followed period find function defined type esc x fi clman get common lisp manual entry symbol lisp interpreter buffer c c c p recalls previous expression typed lisp c c c n recalls next expression earlier one example begin session typing emacs foo cl emacs start lisp session display buffer editing foo cl type c c l start lisp session put switch back forth editing buffer inferior lisp buffer using c c l well emacs prompt several things first start lisp session buffer host process directory image name image arguments time hit return take default values questions go back edit buffer c c l type following code simply counts number items list defun foo x cond null x atom x foo car x foo cdr x passing function definition lisp either typing c c c b evaluate entire buffer putting cursor somewhere within foo function definiton typing esc c x evaluate single defun either command send defun lisp interpreter switch lisp process buffer c c l test function typing foo b c done exit lisp emacs typing exit c x c c information information interface appears uw cse lab note steve hanks hanks cs washington edu