mime version server cern date monday dec gmt content type text html content length last modified thursday mar gmt cs project proposals cs project proposals thorsten von eicken wednesday mar th proposals sp related projects splash benchmarks cc sp splash benchmark suite consisting parallel applications shared memory machines developed stanford splash latest version splash containing several new applications well original ones suite divided two categories kernels applications kernels routines commonly used applications sample kernels complex d fft blocked lu decomposition blocked sparse cholesky factorization integer radix sort applications barnes hut ocean simulation water simulation spatial data structure water simulation without spatial data structure others implement kernels listed one two applications depending level difficulty cc split c implementation judged correctness performance careful explanation results expected along detailed timing breakdowns source code benchmarks shared memory machines available web choose port existing code cc split c write scratch understand problem also read paper entitled splash programs characterization methodological considerations published isca obtained web project expose parallel programming using state art languages shared distributed memory machines splash benchmarks widely accepted research community besides cc parallel extension c become popular years project available platform suggest sp languages currently well supported us pvm active messages sp pvm parallel virtual machine popular software package supports parallel computing networked workstations provides user library routines e g pvm send pvm recv communication processes pvm communication baed tcp udp protocols hence coarse grained parallel applications get reasonable performance try improve performace pvm implementing major communication routines active messages sp benchmark split c well mpi parallel vmrl renderer sp split c cc implement parallel renderer vrml virtual reality modelling language would allow complex vrml documents downloaded scenes rendered hopefully near real time system sp would also need way send rendered image quickly desktop workstation simple x connection works prototype sending rendered image back atm parallel povray raytracer split c cc implement parallel povray raytracer similar probably less real time feel unless manage quickly povray freely available raytracing package runs wide range unix systems try parallelizing aspects say dividing rendering space cpus implementing system sp parallel file system sp implement parallel file system top regular filesystem node easily done user level library within split c split c benchmark comparison survey high end parallel systems department run programs written split c parallel language sp atm cluster fast ethernet cluster multiprocessor sparcs berkeley ucsb groups number nice split c benchmarks would like get understanding relative performance systems well scale say running opposed cpus linda active messages sp linda simple six operations yet powerful extension existing sequential languages allows parallel execution programs computing model slightly different ve shown far course messages new tasks executed put tuple space retrieved process one specify address sender receiver tuple space shared processes reception messages based pattern matching based simple concept tuple space one program kinds synchronization blocking non blocking communication point point multicast message passing etc project implement linda run time system active messages sp extension c work include understanding linda model using fast communication subsystem threads order get efficient run time system u net related projects projects specifically deal u net system low latency user level networking four implementations u net exist three atm cards one fast ethernet projects augment existing u net system either one implementations combining several cusee atm network fast ethernet implement demo high speed version cuseeme atm network fast ethernet requires independence since nobody group knows cuseeme works idea explore methods long range video teleconferencing using u net approach opposed sending video two workstations side side atm fiber protocols designed robust multicast video conferencing alternative cuseeme would system mbone using vat free video conferencing package ivs gateway fast ethernet atm using u net design build gateway fast ethernet atm using u net either raw u net level ip level kernel endpoint u net one problem u net doesn allow existing applications kernel facilities easily share network device u net idea implement kernel level u net endpoint data generated ip sockets kernel sent received endpoint way treating kernel endpoint kind ethernet driver say communication using kernel endpoint doubt slower user level endpoints idea allow many applications multiplex one kernel endpoint existing socket based apps least run would need implement ip high level protocols essentially would replace low level kernel functions sending data atm ethernet card routines read write kernel endpoint best platform atm fast ethernet implementation u net linux expert project best undertaken someone linux kernel hacking experience ip packet filter sba atm adapter u net fast ethernet atm currently use simple protocol compatible ip implement simple ipv packet filter either u net fast ethernet atm packets correct ipv format may wish implement aspects ip protocol would plus flow control active messages fast ethernet fast ethernet poses interesting flow control problems acks compete regular packets bandwidth design good flow control algorithm active messages works well shared medium fast ethernet fast rpc pick last year fast rpc project actually make work distributed shared memory pick last year dsm project make work run splash benchmarks network performance tool netperf u net implement standard network performance tool netperf u net gang scheduling u net cluster gang scheduling processors working single parallel application schedule synchronously communication computation phases coordinated reduce latency data exchange might require kind interesting modifications kernel scheduler sort clock synchronization processes say split c application run time across network machines expert project best undertaken someone linux kernel hacking experience usit related projects usit toolkit developed help build parallel distributed programming environment atm cluster currently utility programs set daemons set machines within cluster start running split c programs forwarding o local machine cluster using cluster run split c programs application programs may also find toolkit useful lower level usit provides c tcl tk interfaces job control o forwarding job scheduling u net channel allocation etc within cluster interfaces used customize particular execution environment application requires pvm u net using usit pvm popular software package allows heterogeneous network parallel serial computers appear single concurrent computational resource pvm consists two parts daemon processes users install machines use pvm user library mainly communication processes project explore possibility implementing basic pvm daemon functionalities u net using interfaces usit provides necessary implement additional interfaces usit benchmark liedtke microkernel system jochen liedtke published paper microkernel construction last sosp abstract included project read paper thoroughly understand problems proposed solutions download described code benchmark abstract software technology point view microkernel concept superior large integrated kernels hand widely believed microkernel based systems inherently inefficient b sufficiently flexible contradictory belief show support documentary evidence inefficiency inflexibility current microkernels inherited basic idea mostly overloading kernel improper implementation based functional reasons describe concepts must implemented microkernel illustrate flexibility analyze performance critical points show performance achievable efficiency sufficient respect macro kernels published contradictory measurements evident furthermore describe implementation techniques illustrate microkernels inherently portable although improve portability whole system return cs home page