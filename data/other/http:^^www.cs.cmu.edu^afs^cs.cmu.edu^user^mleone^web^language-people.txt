date wed jan gmt server apache content type text html content length last modified mon jan gmt researchers programming languages compilers researchers programming languages compilers home pages researchers working programming language theory design implementation related areas disclaimer list exhaustive please let know would like added list would like existing entry modified deleted back language research page related pages sel hpc list home pages functional language researchers sel hpc list home pages compiler researchers oscar nierstrasz list useful home pages web formal methods researchers logical frameworks semantics based program analysis manipulation researchers home pages mart n abadi dec src security distributed systems specification verification methods principles programming languages samson abramsky university edinburgh semantics programming languages concurrency game semantics program analysis gul agha university illinois urbana champaign logic object oriented programming formal semantics actors alex aiken berkeley program analysis type theory optimization constraint theories functional programming instruction scheduling hassan kaci simon fraser university constraint based programming object orientation logical functional programming design compilation techniques maria alpuente technical university valencia spain logic programming semantics extensions applications integration functional logic programming languages abstract interpretation program manipulation thorsten altenkirch chalmers type theory categorical logic program verification saman amarasinghe stanford compilers parallel machines suif jennifer anderson stanford compilers scalable parallel machines suif peter holst andersen diku university copenhagen partial evaluation c mix andrew appel princeton standard ml new jersey compilation optimization garbage collection mostly functional programming languages zena matilde ariola university oregon principles programming languages formal semantics arvind mit aspects parallel computing declarative programming languages dynamic dataflow architectures implicitly parallel programming language id compilation languages id parallel machines mike ashley university kansas program analysis program transformations language design implementation mikhail auguston new mexico state university programming languages design implementation design compiler writing language rigal software engineering testing debugging automation assertion languages lennart augustsson chalmers functional programming implementation henry baker independent researcher consultant garbage collection gc storage management programming languages lisp ada apl ml functional programming compilers linear types reversible computation parallel languages quantum computation carlos baquero minho university concurrent object oriented programming inheritance concurrency control code c extensions transactions distributed mobile computing gerald baumgartner purdue functional object oriented languages type systems object types modules fran oise bellegarde oregon graduate institute program transformation rewriting functional programming automatic demonstration use formal methods software development edoardo biagioni carnegie mellon functional languages parallel computing architectures compilers networking operating systems o lars birkedal carnegie mellon type theory modules standard ml compilation ml ml kit partial evaluation sml mix sandip k biswas university pennsylvania compilers type theory module systems separate compilation configuration management program slicing michael r blair mit dynamically adaptive profile guided specialization partial evaluation program analyisi compilation type theory subtyping guy blelloch carnegie mellon parallel languages compilers nesl matthias blume princeton implementation mostly functional languages particular sml scheme efficient data representation separate compilation compilation management cross module optimizations language design alan borning university washington constraint based languages systems lee braine university college london functional programming object oriented programming visual programming language implementations preston briggs rice jean pierre briot university tokyo object oriented programming concurrency parallelism meta programming reflection artificial intelligence artificial life computer music kim b bruce williams college semantics design programming languages type theory object oriented languages models higher order lambda calculus including subtypes bounded polymorphism barrett r bryant university alabama birmingham compiler design formal semantics object oriented technology tim budd oregon state programming languages leda implementation techniques oop peter buhr university waterloo polymorphism persistence concurrency concurrent monitoring visualization debugging margaret m burnett oregon state university visual programming languages design theory implementation ftp able papers rod burstall edinburgh computer aided proof relation type theory development correct programs respect specification applications category theory computer science philippe canalda inria rocquencourt pagode generator optimizing code generators compilation techniques cosy optimizing compiler platform software engineering automatic term rewriting system generation term dag normalization problem non deterministic finite state automata non linear unification pattern constraints dynamic programming reentrant programming pattern matching luca cardelli dec src theory programming languages polymorphism subtyping objects recursion modularization typechecking distribution modula obliq ml steve carr michigan technological university compilers instruction level parallel architectures nicholas carriero yale systems issues development deployment software tools parallelism giuseppe castagna liens laboratoire d informatique de l ecole normale sup rieure type theory object oriented programming manuel m chakravarty technical university berlin design implementation functional logic programming languages emphasis integration paradigms parallel implementations craig chambers university washington design implementation advanced object oriented languages cecil thomas christopher illinois institute technology parallel programming languages compilers experimental programming models message driven computing icon mark chu carroll university delaware programming languages environments general purpose parallel programming compiler analysis high level optimization wayne citrin university colorado visual programming languages environments chris clack university college london language design programming environments techniques especially functional programming high performance computing william d clinger northeastern higher order functional languages design specification optimizations correctness generational garbage collection chris colby carnegie mellon program analysis via abstract interpretation aliasing synchronization communication behavior concurrent languages concurrent ml jean francois collard cnrs laboratory prism static analyses dataflow analyses automatic parallelization scheduling data parallel functional programming charles consel university rennes irisa static program analysis compilation compiler generation programming environment prototyping program transformation robert constable cornell systems computer assisted problem solving programming mathematics nuprl models program refinement polya programming language gordon v cormack university waterloo parsing text processing attribute grammars data types concurrency patrick cousot ens paris static program analysis abstract interpretation program development verification semantics dirk craeynest k u leuven semantics directed compiler construction integrated environments programming language ada software engineering roger crew microsoft research semantics program analysis verification transformations ron cytron washington university st louis program optimization program transformation intermediate representations mads dam swedish institute computer science first higher order modal temporal logics compositional verification techniques process specification languages applications computer based systems cooperative work laurent dami universit de gen ve hop calculus integration functional object oriented languages olivier danvy aarhus university programming languages partial evaluation continuations rowan davies carnegie mellon type systems ml refinement types partial evaluation computation staging program analysis jeffrey dean university washington practical whole program analysis partial evaluation interprocedural optimization object oriented languages cecil project mourad debbabi laval university quebec programming languages integration paradigms semantics formal methods andr eacute dehon mit quasistatic computing specialization feedback adaptation arie van deursen cwi amsterdam language prototyping algebraic specifications language specific tools program understanding software reengineering stephan diehl universitaet des saarlandes university saarbruecken semantics programming languages semantics directed generation compilers abstract machines meta programming www programming languages b dinesh cwi object oriented programming algebraic specifications theorem proving visual languages partial evaluation asf sdf static program analysis amer diwan university massachusetts garbage collection inlining memory system performance optimization memory hierarchies partial evaluation program analysis compilers object oriented languages simon dobson rutherford appleton laboratory programming abstractions parallel distributed systems compilation program transformation semantics scott draves carnegie mellon partial evaluation abstraction vs performance bruce f duba microsoft research design implementation programming languages dominic duggan university waterloo type systems type inference ml object types dynamic types operational semantics higher order unification explicit substitutions partial continuations application frameworks dirk dussart katholieke universiteit leuven belgium program specialization techniques susan eggers university washington dynamic compilation code scheduling parallel optimizations locality michael ernst rice university static analysis slicing debugging including optimized code serialization parallel programs game theory intellectual property david espinosa mit columbia monads compiler operating system architecture leonidas fegaras oregon graduate institute functional programming database programming languages query optimization program transformation verification matthias felleisen rice principles programming languages mary fernandez research improving software development design high level special purpose programming languages development tools efficient implementation new jersey machine code toolkit jeanne ferrante university california san diego intermediate representations optimizing parallelizing compilers optimization parallel memory hierarchy machines andrzej filinski edinburgh continuations cps category theory sigbjorn finne glasgow lazy functional languages specifically haskell use implementation graphical user interfaces cormac flanagan rice analysis implementation high level parallel programming languages ian foster argonne national laboratory parallel languages compilers runtime systems applications christopher w fraser bell laboratories retargetable code generation optimization including lcc retargetable compiler ansi c timothy freeman carnegie mellon refinement types ml dan friedman indiana university principles programming languages svend fr lund hp labs object oriented languages language support coordination distribution concurrency persistence fault tolerance david gelernter yale linda parallel programming software ensembles artificial intelligence adaptive parallelism programming environments parallelism realtime data fusion expert databases shai geva carnegie mellon semantics intensional aspects computation domain theory concurrency functional programming reasoning programs giorgio ghelli pisa university database programming languages type theory object oriented languages object oriented database programming language fibonacci anwar m ghuloum carnegie mellon compilers optimizing parallelizing sequential languages parallel algorithms languages architectures andy gill glasgow using equational reasoning perform non trivial proofs deforestation purely functional finite maps parsing combinators christopher glaeser nullstone corporation methodologies evaluate compiler optimization run time performance joseph goguen oxford software engineering formal methods object oriented relational functional programming combinations concurrent computer architecture based rewriting algebraic specification theorem proving hardware verification philosophy computation benjamin goldberg new york university functional programming memory management program optimization andrew gordon cambridge operational semantics o concurrency mechanised verification john k gough queensland university technology code generation optimization implementation programming languages strongly typed imperative languages c nicholas graham york university functional programming languages languages developing user interfaces multi media groupware visual programming environments john greiner carnegie mellon language models complexity type theory parallel algorithms dave grove university washington design implementation optimization advanced object oriented languages cecil carl gunter university pennsylvania domain theory semantics polymorphism computational aspects linear logic structure representation partial information rajiv gupta university pittsburgh parallelizing optimizing compilers parallel architectures distributed real time fault tolerant computing software testing debugging sandeep k gupta colorado state university parallelizing compilers parallel program synthesis parallel computing mary hall stanford interprocedural optimization parallelizing compilers suif thomas hallgren chalmers type systems subtypes graphical user interfaces functional languages kevin hammond glasgow design implementation pure functional languages haskell john hannan penn state operational semantics type theory compiler verification mathematical logic program transformation abstract machines david r hanson princeton lcc retargetable compiler ansi c programming languages compilers programming environments michael hanus rwth aachen type systems implementation logic programming languages integration functional logic programming languages alf system abstract interpretation logic functional logic constraint logic programming languages james harland royal melbourne institute technology foundations logic programming linear logic proof theory deductive databases computational logic robert harper carnegie mellon logical frameworks machine assisted proofs ml ml modules lambda calculus type theory category theory semantics logics programs functional programming applications functional languages systems programming john hatcliff diku university copenhagen operational semantics correctness program transformations continuations logics type theory logical frameworks partial evaluation computational monads static analysis programs chris haynes indiana type systems control abstraction symbolic computation scheme fritz henglein diku university copenhagen type inference systems program analysis algorithmic computational complexity global program optimization jonathan m d hill oxford bulk synchronous parallel model data parallel non strict functional programming implementation hpf library fortran michael hind suny new paltz visiting ibm research compiler optimizations programming languages c r hoare oxford programming methods languages proof techniques programs distributed computing category theory computing science c mos switching circuit design richard c holt university toronto object oriented programming languages teaching programming urs h lzle university california santa barbara object oriented programming languages compilers object oriented languages run time compilation james hook oregon graduate institute application formal methods software development theory practice specification programming languages type theory jim horning intertrust technologies language design implementation specification languages tools e g larch c standard template library susan horwitz university wisconsin madison language based programming environments program slicing differencing merging static analysis programs interprocedural dataflow analysis antony l hosking purdue university programming language design implementation compilation interpretation optimization run time systems e g garbage collection object oriented database systems database persistent programming languages systems empirical performance evaluation prototype systems brian howard kansas state programming language design theory particularly functional languages semantics type theory logic computation natural language processing paul hudak yale functional programming haskell parallel programming haskell modular interpreters mutable abstract datatypes graham hutton university nottingham functional programming relational programming polytypic programming programming calculi recursion operators categorical methods graham hutton utrecht university netherlands functional relational programming category theory computer science algebraic approaches programming purushothaman iyer north carolina state university abstract interpretation concurrency formal methods daniel jackson carnegie mellon tractable representations analyses designs code specifications design methods static analysis model checking quinn tyler jackson lambda systems ltd pattern matching language language translation oo non oo modeling suresh jagannathan nec research institute advanced language compiler technology scheme programming language incorporation formal methods continuation models type inference abstract interpretation etc foundation technology parallel distributed computing symbolic irregular applications sverker janson sics swedish institute computer science foundations design implementation technology multiparadigm languages offer combination concurrency distribution constraints mutable state johan jeuring chalmers program calculation programming methodology type systems programming languages polytypic programming functional programming trevor jim university pennsylvania semantics compilers type inference cliff b jones manchester university compositional formal methods parallel environments support systems formal methods lpf mark p jones university nottingham programming language design implementation type theory module systems program transformation analysis functional programming simon peyton jones glasgow design implementation application lazy functional languages practical terms means spend time implementation haskell glasgow haskell compiler ramifications jesper j rgensen diku university copenhagen semantic based program manipulation program analyses program specialization e g partial evaluation deforestation supercompilation flow binding time analysis representation analysis martin jourdan inria rocquencourt france attribute grammars esp fnc system program analysis compiler construction generation bill kalsow dec src modula programming languages environments compilers runtime systems jasper kamperman cwi compilation term rewriting systems algebraic equational functional languages lazy rewriting algebraic specifications uwe kastens university paderborn germany methods tools language implementation compilation parallel machines dinesh katiyar sun microsystems programming languages object oriented languages multi language systems interface definition languages type theory richard kelsey nec research institute compiling scheme scheme continuation passing style andrew kennedy university cambridge type systems type inference dimension types extension programming languages support physical dimension functional programming david keppel university washington abstractions architectures binding times caches compilers dynamic compilation emulation operating systems performance analysis runtime code generation runtime systems self modifying code instruction set simulation threads tracing value specific optimization maurice van keulen university twente type systems polymorphy functional programming database specification object orientation semantics languages gregor kiczales xerox parc object oriented programming reflection metaobject protocols open compilers efficient compilation high level programs david king glasgow expressing graph algorithms haskell algorithm design correctness imperative functional programming edgar knapp purdue formal methods concurrent program development tool support program design retargetable implementation concurrent programs todd knoblock microsoft research d graphics interactivity program specializaton run time code generation partial evaluation high level programming languages program analysis optimization type theory dattatraya kulkarni university toronto compiler optimizations program transformations kwangkeun yi korea advanced institute science technology compile time program analysis programming environments program analysis tools safe programming monica lam stanford compiler optimizations computer architectures parallel computing suif leslie lamport dec src tla temporal logic actions writing proofs james larus university wisconsin madison programming languages compilers particular languages compilers parallel machines design programming shared memory parallel computers compiling symbolic languages program profiling tracing program executable editing konstantin l ufer loyola university chicago programming languages compilers functional object oriented programming type systems type inference software engineering john launchbury oregon graduate institute functional programming functional algorithms semantics lazy evaluation incorporating destructive updates haskell partial evaulation program analysis programming specification language design semantics formal methods program specification verification programming methodology object oriented programming functional programming distributed computer systems peter lee carnegie mellon semantics based compiler generation program analysis optimization ml compiler support advanced systems software k rustan m leino dec src programming program design technologies programming languages systems specification verification program semantics object orientation modularity mark leone indiana university run time code generation partial evaluation compiling functional programs program analysis optimization type theory xavier leroy inria rocquencourt type systems module systems operational semantics implementation ml caml light compiler michael leuschel katholieke universiteit leuven partial evaluation partial deduction meta programming ground representation specialised integrity checking raph levien uc berkeley compilers higher order languages analysis memory access patterns closure representations avoiding need garbage collection sean levy allen dutoit eric gardner eswaran subrahmanian carnegie mellon n dim group engineering design research center cmu object oriented languages environments embeddable languages toolkits support evolutionary prototyping user interfaces collaboration sheng liang yale design implementation modern programming languages modular semantics compiler generation portable common back ends leonid libkin university pennsylvania functional database query languages semantics programming languages partial information karl lieberherr northeastern university adaptive software adaptive architecture description languages jim lipton wesleyan university logic programming type theory intuitionistic semantics programming relations categorical logic bj rn lisper kth dept teleinformatics theory efficient implementation declarative languages data parallel functional programming program transformations y annie liu indiana university program analyses transformations efficiency improvement optimizing compilers language based interactive systems algorithm design program development methods luc maranget inria rocquencourt lazy ml compilation pattern matching parallel implementation strategies term rewriting systems dave mason waterloo compilation functional programming languages particularly standard ml systems programming purposes literate programming aspects text formatting florian matthes hamburg university germany persistent programming environments extensible syntax higher order type checking static dynamic code optimization object store interfaces bernd mathiske hamburg university language implementation portable multi threaded runtime systems code generation distributed persistent languages code mobility thread mobility autonomous network agents bidirectional language interfacing cross language exception handling david mcallester mit ai laboratory automated reasoning type inference erik meijer utrecht university functional programming semantics directed compiler generation constructive algorithmics marjan mernik university maribor slovenia design implementation programming languages formal language definition compiler generators attribute grammars dale miller university pennsylvania computational logic proof theory design theory logic functional programming languages unification typed lambda calculi lambda prolog robin milner cambridge mathematical models computation models calculi concurrent computation present logics machines semantics high level programming constructs john mitchell stanford programming language analysis design including module systems object oriented programming type systems reasoning programs applications mathematical logic programming languages automated reasoning algorithms static analysis programs greg morrisett cornell systems hacking high level languages compilers analysis via types modeling garbage collection concurrency threads christian mossin diku university copenhagen type inference analysis functional programs program analysis type systems logic lambda calculus extent category theory frank mueller humboldt university berlin compiler optimizations concurrent programming prediction execution time robert muller boston college compilers higher order languages program representation program analysis optimization extensible parsers uwe nestmann university erlangen formal semantics concurrency theory translation correctness pi calculus kristian nielsen diku university copenhagen deforestation partial evaluation supercompilation program analysis implementation functional programming languages lazy evaluation oscar nierstrasz university berne semantics object based concurrency software composition languages rishiyur nikhil dec crl parallel computing languages implementations runtime systems architectures functional languages implementations especially parallel implementations tobias nipkow technische universit m nchen automatic interactive theorem proving system verification rewriting unification lambda calculus type systems steve novack university california irvine compiling fine grain parallelism lars nyland university north carolina chapel hill high level languages prototyping parallel algorithms development complex parallel algorithms transformation high level code parallel implementations john o donnell glasgow using functional programming specify reason parallel systems digital circuits data parallel architectures nondeterminism debugging functional programming environments peter o hearn syracuse university semantic logical foundations imperative computation bryan o sullivan glasgow parallel computing operating systems compilers partial evaluation functional programming languages sorts odd permutations topics james o toole mit storage systems design information retrieval persistent object applications atsushi ohori kyoto university type inference polymorphic record calculus compilation parallelism martin odersky university karlsruhe formal methods definition programming languages design manipulation programs special areas interests program calculi type systems semantics programming languages programming language implementation john ophel la trobe university melbourne australia polymorphic programming languages first class modules mehmet orgun macquarie university sydney logic programming applied temporal logic dataflow computation temporal databases jens palsberg mit theory implementation programming languages didier parigot inria rocquencourt attribute grammars fnc system algirdas pakstas agder college distributed programming system architect language aladdin integrated compiler development environment gdt pc grammar debugging tool parser constuctor krishna palem new york university optimizing compilers instruction level parallelism instruction scheduling register allocation compiling embedded systems george papadopoulos university cyprus term graph rewriting systems coordination models logic functional object oriented programming larry paulson cambridge isabelle theorem prover formalizing axiomatic set theory formalizing induction coinduction principles set theory higher order logic standard ml frank pfenning carnegie mellon type theory application language design particular logic functional programming languages logic automated theorem proving formal program development programming environments michael philippsen icsi berkeley languages compilers parallel distributed machines benjamin c pierce indiana university static type systems subtyping bounded quantification type inference lambda calculus intersection types concurrency john plevyak university illinois urbana champaign concurrent object oriented programming language design compilation type inference structure analysis concurrent c illinois concert project gordon plotkin edinburgh applications logic especially denotational operational semantics programming languages semantics type systems monadic theories computation general proof theory semantics natural language particularly type free intensional logics situation theory lori l pollock university delaware optimizing compilers high performance architectures compiler phase integration language compiler support cluster computing optimizing explicitly parallel programs parallel compilers salil pradhan northeastern university adaptive architecture description languages vaughan pratt stanford semantics parallel distributed computing jan f prins university north carolina chapel hill high level programming languages formal techniques program development parallel algorithms parallel computation compilation programs parallel execution william pugh university maryland algorithms data structure design analysis skip lists compilers massively parallel architectures integer programming array data dependence analysis j ramanujam louisiana state university parallelizing compilers high performance computing programming languages computer architecture programming environments norman ramsey university virginia machine code tools retargetability literate programming debugging chris reade brunel university functional programming functional o theory programming languages type theory formal methods jonathan rees mit scheme user defined data types lexically scoped macros modules categories monads scheme based operating systems jakob rehof diku university copenhagen type systems type inference logical computational aspects type systems type systems program analysis alastair reid glasgow use implementation functional languages graphics garbage collection user interfaces debugging formal program development transformation implementation algebraic specifications abstract data types john reif duke parallel algorithms compilers parallel machines formal methods synthesis parallel algorithms mark reinhold nec research institute garbage collection compilation techniques type systems semantics visualization analysis program performance didier remy inria rocquencourt type systems object oriented programming thomas reps university wisconsin madison language based programming environments program slicing differencing merging interprocedural dataflow analysis incremental algorithms jon g riecke bell laboratories theory programming languages operational denotational semantics logics programs formal methods type systems inference abstraction higher order languages state control polymorphism kristoffer rose diku university copenhagen semantics lambda calculus rewrite systems explicit substitution abstract machines sharing graph reduction guido van rossum cwi centre mathemathics computer science amsterdam object oriented languages scripting languages prototyping languages designed implemented python co implemented abc francois rouaix inria rocquencourt extensions ml type system overloading object oriented programming abstract types type operators modularity erik ruf microsoft research design implementation optimization programming languages use program analysis support program understanding transformation barbara ryder rutgers compile time program analyses software tools parallel sequential programming environments chair acm sigplan amr sabry university oregon compilers data flow analysis abstract interpretation programming language calculi semantic foundations david sands diku university copenhagen programming language semantics applications abstract interpretation related semantics based analysis techniques sannella edinburgh lfcs formal development modular software specifications modularization mechanisms machine assisted proof semantics patrick sansom glasgow implementation runtime support pure functional languages including compiler analysis optimisation garbage collection profiling joao saraiva universidade minho compilers attribute grammars parallel compilation andre scedrov university pennsylvania mathematical logic mathematical aspects programming structures bill scherlis carnegie mellon semantics based program analysis manipulation information structures david schmidt kansas state denotational semantics intuitionistic type theory michael schwartzbach brics university aarhus programming languages type systems type inference static program analysis data types language design implementation cotton seed mit motorola cambridge research center computer architecture compilers mpps dataflow implicitly parallel languages program analysis auto parallelization peter sestoft royal veterinary agricultural university denmark functional programming languages implementation program analysis transformation partial evaluation zhong shao yale efficient compilation high level languages interaction languages compilers modern architectures programming environments formal methods tim sheard oregon graduate institute compile time reflection type parametric programming program transformation algebraic programming olin shivers mit advanced programming languages scheme ml systems personal user interfaces duncan sinclair university strathclyde functional programming particular hci research could used make creation graphical user interfaces functional programs easier satnam singh glasgow using functional languages hardware specification synthesis analysis anthony sloane james cook university generation programming language implementations tools environments high level specifications scott f smith johns hopkins operational semantics imperative object oriented concurrent programming languages operational equivalence programs logics programs ellen spertus mit value dependence graph ir code generation register allocation superscalar superpipelined architectures vugranam c sreedhar mcgill university data flow analysis compiler optimization instruction level parallelism multithreaded architecture optimizing explicit parallel programs memory consistency models bjarne steensgaard microsoft research static program analysis program transformation value dependence graph ir data flow analyses store splitting partial evaluation patrick steyaert brussels free university reflection object oriented programming languages systems user interfaces user interface building application building allen stoughton kansas state programming language semantics full abstraction models applied typed lambda calculus pcf logical relations lambda definability david stoutamire international computer science institute compiling distribution compiling locality garbage collection sather dave wj stringer calvert university york uk compiler verification pvs verification system walid taha oregon graduate institute transformational programming systems functional programming object oriented programming software engineering compilers carolyn talcott stanford formal reasoning semantics programming languages open distributed systems reflection domenico talia isi cnr rende italy parallel computing architectures concurrent programming languages distributed systems bob tennent edinburgh semantics design programming languages logics george k thiruvathukal lake shore labs metromail corp illinois institute technology object oriented languages enhanced actors programming model virtual machines parallel distributed programming languages class libraries typing systems stephen thomas university nottingham use implementation functional languages design abstract architectures functional languages particularly tim frank tip ibm j watson program analysis program transformation restructuring program slicing optimizations object oriented programs mario tokoro keio university object oriented computing concurrent programming distributed open systems cooperative problem solving andrew tolmach portland state university functional language implementation tools david toman kansas state implementation prolog lp languages semantics lp languages semantics expressivity database query languages david n turner glasgow type systems type based program analysis functional programming pi calculus implementation concurrent calculi chau wen tseng stanford compiler support scalable parallel architectures suif franklyn turbak wellesley college programming language semantics implementation deforestation type based compilation visual languages robot languages mark vandevoorde mit optimizing programs specifications eelco visser university amsterdam formalisms tools language design prototyping syntax definition type systems documentation tools grammar formalisms parsing algebraic specification asf sdf german vidal technical university valencia spain integration functional logic programming languages abstract interpretation sematics based program transformation philip wadler glasgow linear logic monads call need type classes parametricity deforestation strictness analysis data abstraction garbage collection william m waite university colorado boulder automation compiler construction mitchell wand northeastern semantics compiler correctness type inference david watt university glasgow action semantics language design semantics directed compiler generation rapid prototyping martin weichert chalmers concurrency william e weihl mit parallel distributed systems programming languages compilers operating systems computer architecture pierre weis inria design implementation functional programming languages particular compilation type systems particular caml language daniel weise microsoft research using advanced representations analysis build better compilers programming tools still seeking holy grail abstraction without cost even though explicitly hack partial evaluation anymore morten welinder diku university copenhagen partial evaluation standard ml binding time analysis hand writing program generator generators david b whalley florida state university compiler optimizations support tools performance evaluation diagnosing compiler errors predicting execution time paul r wilson university texas austin memory management garbage collection allocators persistence texas p store extensible languages compilers rscheme memory hierarchies free software russel winder university college london languages environments developing parallel object oriented systems development information systems including processes techniques tools environments philosophical aspects jeannette wing carnegie mellon formal specifications concurrent distributed systems programming languages programming methodology search retrieval information superhighway michael winikoff melbourne university logic programming linear logic lygon functional programming michael wolfe portland group compiler optimizations compiling parallel machines david wolfram australian national university semantics declarative languages higher order languages meta theories semantics concurrency object based languages effectiveness implementations andrew wright nec research institute soft typing type systems compilation techniques scheme ml limsoon wong university pennsylvania institute systems science singapore interoperable systems multimedia systems programming methodologies query languages programming language semantics gao xiaocheng beijing university aero astro buaa constraint hierarchy object oriented languages linux takashi yamanoue kyushu institute technology visual programming parallel programming compiler compilers attributed grammars katherine yelick u c berkeley programming languages runtime support parallel machines optimizing explicitly parallel programs akinori yonezawa university tokyo parallel computation models programming languages object oriented programming natural language processing guo qiang zhang university georgia athens domain theory semantics programming languages applied logic nonmonotonic reasoning benjamin zorn university colorado boulder programming language design implementation specific emphasis language runtime systems ways support efficient program execution ease programming back language research page additions corrections welcome mark leone mleone cs cmu edu