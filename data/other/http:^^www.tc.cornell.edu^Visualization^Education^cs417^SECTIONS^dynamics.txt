date mon dec gmt server ncsa content type text html last modified wed feb gmt content length dynamics using forces animate objects introduction several good reasons may want compute motion objects based forces rather attempt kinematic description object motion often easier write expression forces object differential equation directly describe motion dynamic systems based forces evolve automatically motion physically correct given correct equations automatic behavior relieves animator attention lots boring detail chaotic systems impossible write kinematic description background basis many particle systems description acceleration particles accelerations given system called second order two integrations must done get positions example consider mass end spring sliding frictionless horizontal table force mass given f k x f force k spring constant x length spring negative sign appears force spring pulls opposite direction spring extension since f m acceleration k m x given acceleration know initial velocity position find position mass later time case linear spring integrate acceleration directly find position sinusoidal function time constant k m determine frequency sinusoidal function initial position x velocity v determine amplitude phase position given simple case solution available one could code kinematic solution plug time sin function notice description system differential form compact straightforward also changed force realistic stiff spring model f k x c x could directly integrate would forced use numerical methods next section consider perform integration numerical integration solving dynamic system means figuring move system forward time set initial conditions compute positions function time instance might want trace trajectory ball fired cannon general direct analytical solutions differential equations governing system hard impossible outline techniques solving system simple perhaps optimal numerical methods disclaimer difficult construct general numerical schemes work various physical systems follows specific approach works systems consider barest introduction topic numerical introduction much detail may obtained many books consider three specific second order systems three body gravitation water waves billards impact system system first introduce physics force law scheme integrate force law produce time dependent positions start integration scheme used intrducing notion numerical integration useful look almost never used actual work euler integration algorithm let state algorithm easy understand inefficient used whem programming effort dominates throughput want start differential equation show integrate numerically start differential equation want solve equation stepping time discretely forward small steps small still needs defined one discrete approximation equation n n refer two time steps sufficiently close together differences approximate derivitive rearranging equation yields gives explicit form stepping system time n time n form thus way step dynamic system forward time given initial state x inefficiency method occurs assumption constant f x across entire time step accurate time step short compared natural time constants system verlet integration algorithm much better alogrithm derived averaging slopes across small time interval integration one formulation called velocity form verlet algorithm algorithm useful second order systems force object specified position desired function time since accelerations specified one integration must done calculate velocity second done calculate position verlet scheme first updates position use old new position information update velocity accelerations calculated force law describing system usually function position note calculated completed calculation xn evaluating equations advances system one time step start solution velocity position known choosing delta requires care generally start time step around fastest time constant system two verlet equations vector equations motion dimensional ready consider specific physical systems gravitation three body problem accleration due gravitating mass g strength contant m mass object pulling r distance m since r actually vectors must derive form equation useful dimensions use d need equations x y components acceleration assuming body one located r body two located r want acceleration body one theta angle measured x axis vector r pointing toward body one body two converting cartesian form acceleration body one vectors calculation procedure time step compute acceleration based positions time n new set positions using verlet method acceleration time n based newly computed positions new velocity verlet method using acclerations times n n gravitational animation given beginning page three masses simulated accleration mass determined vector sum accelerations caused two bodies water waves water wave solver presented based derivation kass miller case shallow water low amplitude non breaking waves form resulting equation motion waves looks like classical linear wave equation propagation velocity proportional depth water h height water surface d depth d x y h x y b x y b vertical position containing vessel ocean bottom x y costant g poroportional force gravity partial differential equation discretized many ways use method stable enough acceptable computer graphics first note partial respect time acceleration small surface element water right side equation put discrete form apply verlet method d grid bodies representing small chunk water solve equation numerically need discretize space two dimensional grid time discrete spatial approximation second derivitives time n j grid indices x y directions n time index note edges array discrete partial derivitives depend values outside array boundary conditions need specified solution one easy boundary condition corresponding transport across coundary copy value edge array whenever value outside array needed seems solution stable minimum depth water limited average value rather letting go zero depth time n given get surface motion first assign initial height vertical velocity grid point j time step compute acceleration based water heights time n new set positions using verlet method j acceleration time n based newly computed heights new velocity verlet method j ensure conservation volume total volume adjusting average water height constant sum heights whole grid correct sum equal initial sum adding small increment grid location j steps repeated generate moving waves disclaimer integration method seems give visually reasonable results used analytical simulations without careful validation wave equation notoriously hard integrate using explicit techniques like one described billards billards hard ball system different two systems described forces balls zero touch become large balls try pass means large impulsive force balls meet times verlet integration scheme fail badly system accelerations large short time thus smooth enough average step billards system forward time calculate total change velocity collision without worrying exactly forces change velocity method described less exact version described method described paper steps time uneven intervals thus unsuitable animation modification steps time uniformly expense exact collision dynamics change velocity impact derived frictionless balls equal mass noting impact force must act direction parallel line connecting centers two impacting balls change velocity must parallel connecting line also velocity component parallel line sign reversed collision velocity component perpendicular line unchanged projecting initial velocity onto line connecting centers negating result resolving back x y velocity components gives velocity change j indices colliding balls define delta v ball given following right term represents projection velocity onto line term converts projection back x y coordinates calculation procedure time step compute delta v based positions balls new set positions using walls present detect collisions modify velocities time step needs small enough balls penetrate much one time step references introduction computer simulation methods part harvey gould jan tobochnik addison wesley rapid stable fluid dynamics computer graphics micheal kass gavin miller computer graphics vol aug pp numerical recipes william press saul teukolsky william vetterling brian flannery cambrige nd edition studies molecular dynamics general method b alder wainwright journal chemical physics vol aug pp physics students science engineering part robert resnick david halliday wiley comments theory center online documents welcome may sent doc comments tc cornell edu last modified b land copyright statement