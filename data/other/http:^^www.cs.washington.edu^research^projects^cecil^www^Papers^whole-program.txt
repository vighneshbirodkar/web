date tue dec gmt server ncsa content type text html cecil paper whole program optimization object oriented languages whole program optimization object oriented languages craig chambers jeffrey dean david grove describe vortex optimizing compiler intended produce high quality code programs written heavily object oriented style achieve end vortex includes number intra interprocedural static analyses exploit knowledge whole program compiled including intraprocedural class analysis class hierarchy analysis exhaustive class testing profile guided optimizations receiver class prediction selective specialization make whole program optimization practical vortex automatically tracks cross file optimization dependencies fine granularity triggering selective recompilation affected compiled files whenever source program changes empirical measurements five purely object oriented benchmark programs written cecil ranging size several hundred lines source code indicate optimization techniques improve performance large programs factor three system intraprocedural static optimizations vortex written cecil used compiler optimizer development past two years vortex optimizations implementation techniques useful language program optimizations reduce cost polymorphism important including object oriented languages currently adding front ends c modula java vortex study effectiveness language styles high level symbolic functional logic languages note document pages long university washington department computer science engineering technical report uw cse get postscript file click return cecil vortex papers page