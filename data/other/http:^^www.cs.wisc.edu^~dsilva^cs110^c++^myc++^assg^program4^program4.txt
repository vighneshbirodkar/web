date mon nov gmt server ncsa content type text html last modified mon oct gmt content length cs program program hailstone series due date final assignment due thursday october accepted friday october pm later assignment tricky may want get started soon possible introduction january issue scientific american contains article describing interesting sequence numbers known hailstone series series formed like pick positive integer odd triple number add one even divide number two although numbers bob eventually reach repeating ground state proven every number e problem statement write program generate hailstone series number chosen user program answer following questions number entered user long series largest number series mean average series information first question stop counting number reached example entered starting place answer question e including initial input fourth number sequence entered answer since sequence simply question simply asks keep track maximum value sequence question using start number average note integer program design hints main program work follows prompt user enter number quit user enters number outside range program must indicate error prompt user another value correct range user enters valid number program must display hailstone series length series maximum value attained within series mean value elements series must prompt user next number process must go user enters indicating would like quit first part program need two nested loops outer loop repeatedly ask user new initial values inner loop control generation hailstone series need devise way terminate outer loop user input indicate wish quit long user enters numbers valid range program must print hailstones series length series maximum value attained series mean value elements series probably find useful define function computes series length series mean value elements series must use arrays store elements hailstone series program must contain several functions solve problem receive almost credit use functions might find helpful write function actually takes number input returns hailstone series array along length series hint look function prototype function generatehailstoneseries skeleton good opportunity write several small functions simple tasks like computing maximum value hailstone series array computing mean final program probably contain least functions finally included bare skeleton program get started job sample run program included include iostream h const int true const int false const int max len function prototypes functions might want write void generatehailstoneseries int number int series int length int even int x prototype already written function int getmaxvalue const int x int length double computeaverage const int x int length void main function determines number even int even int x x return false else return true skeleton definitions additional functions written test cases required turn screen output generated program run user looks hailstone series least three numbers must include cases user incorrectly type number beyond specified range handing assignment please turn electronic copy source code cpp executable program exe testing program test cases receive electronic copy source code executable lose numerous points case program compile run correctly turn get credit program fails test cases receive low score printed copy source code printed copy program run items must stapled together sample run enter number quit error re enter number quit error re enter number quit series length series maximum value attained series mean value enter number quit series length series maximum value attained series mean value enter number quit series length series maximum value attained series mean value enter number quit error re enter number quit series length series maximum value attained series mean value enter number quit grading note program like program worth grade correct output correctly turned output correctly handles test cases user interface aesthetic display program output implementation correct use loops arrays correct use functions parameter passing return calling smart use functions avoiding redundancy code documentation program description meaningful variable names useful section comments