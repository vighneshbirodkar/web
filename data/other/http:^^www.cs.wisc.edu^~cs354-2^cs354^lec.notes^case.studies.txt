date tue nov gmt server ncsa content type text html last modified wed aug gmt content length lecture notes chapter architectures chapter architectures perspective architecture design factors computer design speed fast possible course dependent technology cost cost price profit non profit mass market single use useablility shared single user size machine os software issues power requirements depends intended use intended market mass market scientific research home use multiple users instructional application specific technology price performance curve perf x x want left x higher performance price bang buck x x price technology perspective electromechanical used mechanical relays vacuum tubes space requirement room manchester mark late transistors discrete late space requirement large cabinet room examples cdc b atlas pdp ssi msi mid late transistors space requirement cabinet examples cray vax lsi early transistors space requirement board examples vlsi late today transistors space requirement chip chip set board examples mips r intel transistors sparc risc vs cisc risc reduced instruction set computer term first used name research architecture berkeley risc microprocessor come loosely mean single chip processor following qualities load store architecture addressing modes simple instructions pipelined implementation small instruction set easily decoded instructions fixed size instructions cisc complex instruction set computer term coined distinguish computers risc generally applied computers following qualities complex instructions large instruction set many addressing modes difficulties terms precisely defined term introduced applied earlier machines risc become marketing tool single chip constraint technologies advanced became possible put processor single vlsi chip designs became driven much many transistors could go chip time takes electrical signal cross chip significantly less time signal get driven chip somewhere else number pins available limited desire little interaction chip outside world possible cannot eliminated minimized earliest single processors chip carefully pick choose went chip cutting edge designs today fit everything main memory chip world changed earliest computers greatest difficulties getting hardware work technology difficulties space requirements cooling requirements given working computer scientists would jump whatever hoops necessary use hardware gotten much faster cheaper attention diverted software os compilers optimizers ipc inter process communication instruction time isn enough technology isn keeping one instruction time parallelism instruction level ilp pipelining superscalar one instruction time multis vliw supercomputer best fastest depends program run intended useage family released late early processor chip lot limitations could fit vlsi chip late instructions relatively simple set like mips load store arch two address architecture instructions specified bits fixed size tight encoding difficult distinguish opcode operands m bits always part opcode integer arithmetic different opcode varying size data add b add w add l logical different opcode varying size data control instructions conditional branches jumps condition code mechanism used instructions effect setting condition codes procedure mechanisms call return instructions floating point guess decimal string arithmetic presuming representation binary coded decimal registers bit general purpose registers one general purpose stack pointer pc part general purpose registers registers divided two register files one called d data registers called address registers distinction similar cray stack pointer data types byte word bits longword bits addresses really data type arithmetic registers bit arithmetic however pin limitations vlsi chip required reduced size address addresses travel chip bits memory byte addressable bit address specifies one mbyte memory locations instruction operates fixed data type operand access number operands individual instructions fixed like vax addressing mode operand depend instruction simplify things one operands operand instruction must usually come registers number type addressing modes much larger mips fewer vax text detailed discussion addressing modes read performance got faster new technologies got faster size pin vlsi chip huge number pins time intel iapx late release one two address architecture depending look part chip set pin limitations chips made unusual architectural design decisions compatible earlier chip set memory memory architecture sort bit registers plus accumulator stack pointer pc plus deal segments condition codes set instructions used branching unusual addressing scheme due bit limitation pins used addresses divide memory fixed size k byte pieces call piece segment addresses bits specify offset within one segments extra registers hold segment base addresses effective address computed sort specifying segment register adding bit address contents segment register addressing scheme cramps programmer style code fit segment data stack cray always drive design best fastest computer world whatever computer fastest generally called supercomputer cray earned honor fastest relatively long period time man designed machine semour cray bit eccentric get away good cray exceptionally clean design makes fast probably bit exaggerated due bias cray probably favorite computer mostly opinion make circuitry fast possible cray took paths physical relatively time tested technology used much attention paid making circuits physically close semour aware limits imposed speed light technology pushed limits include necessary spare horses philosophy used means extra hardware used paying attention cost wherever could make machine faster time functionality wasn necessary semour opinion left ll see soon really means remember something seems place functionality computer think essential included cray wasn necessary leaving something made machine faster cray good designed used scientific applications required lots lots floating point manipulations wouldn make good instructional machine want hook lotsa terminals wouldn much fun try implement modern operating system used often separate fast powerful computer hooked commonly called host computer host editing debugging programs host also maintains queue jobs run cray one one jobs run thing cray running final jobs often lots data although operating system would allow multi tasking program running simultaneously ability often used instruction set fixed length instructions either bit variablility depends number operands number operands possible instruction number kind instructions op codes bits long giving instrucitons includes complete integer floating point instructions notice missing instruction set character byte manipulation duplicates anything integer divide etc data representation vastly simpified ve seen far complement integers floating point numbers accesses memory done word chunks word cray bits instructions operate single size data either bit word address bits addressing modes strikingly similar mips register mode instruction op code specifies exactly data base displacement mode used load store instructions registers enormous number registers types registers registers stands scalar bit regs used sorts data addresses registers bit backup registers registers heavy programming cray d find registers useful partially run registers quickly need temporary storage want program store main memory slow also instruction allows load block memory registers instruction bunch loads registers stands address bit regs used addresses rather limited extent integer counters b registers backups regs used manner regs v registers v stands vector sets v regs set bit registers lot used mainly processing large quantities array data use makes cray fast single instruction uses vector register set cause something happen registers within set simd hardware stack support stack accesses special stack pointer register cache none many registers isn really need one size machine bit bigger refridgerators speed machine significantly faster vax fastest machine around price machine analogy pricey restaurants need see prices menu afford eat probably million basic machine first came cray came full time hardware engineer field service person time cray expensive due way expected used waiting field service come considered expensive many instructions get executed one time debatable instruction point execution time pipelined machine go far new instruction started clock cycle complexity alu actually quite alu machine cray calls functional units one specialized piece hardware job fast done could conceivably working time vax vax popular commercially successful computer put early dec digital equipment corp might characterized term cisc risc reduced instruction set computer cisc complex instruction set computer cisc computer often characterized many instructions lots addressing modes one debatable variable length instructions memory memory architecture details lots instructions integer arithmetic different opcode varying size data logical different opcode varying size data address manipulations bit manipulations control instructions conditional branches jumps looping instructions procedure mechanisms call return instructions floating point character string manipulations crc cyclic redundancy check decimal string arithmetic presuming representation binary coded decimal string edit overall instructions opcodes variable length always multiple opcodes specified first bits instruction registers bit general purpose registers except really weren general purpose r pc note user change pc r stack pointer r frame pointer r argument pointer address procedure parameters stored sometimes stack sometimes main memory data types byte word bits longword bits quadword bits octaword bits f floating point bits bits exponent d floating point bits bits exponent g floating point bits bits exponent h floating point bits bits exponent character string consecutive bytes memory specified always starting address length bytes numeric string ascii codes represent integer packed decimal string consecutive sequence bytes memory represent bcd integer bcd digits bit quantities nibble example integer represented numbering instruction operates fixed data type operand access number operands individual instructions fixed location operands definitely fixed memory registers variety addressing modes specify location operand large equivalent mips add addl r r r operands operate bit quantity also addb addw addb addw addl complement addition simple use addressing modes syntax operand specification allows many possible addressing modes every one discussed chapter plus example addl r r r uses register direct addressing mode first operand operation address first operand r load operand address add contents r place result r addressing mode operand often different one type addressing mode discussed text sticks auto increment auto decrement side effect changing address used get operand well specifying address addl r r r operation address first operand r load operand address increment contents r address add data loaded memory contents r place result r amount added contents r depends size data operated case longwords bytes machine code together operand addressing mode specification operand specification requires least byte format simple addl r r r bit opcode mode register register format addl r r r bit opcode mode register instruction bit opcode bit operand specifier operand instruction specifies large number variety addressing modes operand specification much byte example immediates placed directly specification within code performance term mips millions instructions per second really came vax vax ran mips note term misleading instructions take variable times fetch execute performance depends program size one version vax size large capacity washing machine another version vax size refridgerators standing side side