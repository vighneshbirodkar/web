mime version server cern date sunday dec gmt content type text html content length last modified tuesday aug gmt viewing system viewing system master engineering project eric young sang shim computer science department cornell university advisor professor bruce land table contents introduction equations implementation program works conclusion acknowledgements references introduction although various three dimentional display devices exist computer graphics view surfaces two dimentional thus three dimentional pipeline jargon term used describe various processes converting three dimentional world coordinate space two dimentional representation must contain projective transformation viewing transformation minimum requirements convert three dimentional scene two dimentional projection designed implemented viewing system iv carefully explained d computer graphics alan watt using java objects created world coordinate system conventionally represented right handed system consider transformation tview world coordinate system viewing coordinate system xv yv zv viewing coordinate system vertices expressed left handed coordinate system origin sometimes known view point view reference point represented position viewer eye position virtual camera placed second transformation tpers applied project three dimensional points view space onto three dimensional screen space xs ys zs projected vertices screen space onto projection space two dimentional view plane simulate camera transformation full viewing system also determine view volume truncated view frustum subset world coordinate space included transformation process far general three dimensional rendering pipeline concerned needed define view volume define view volume needed specify near plane far plane view plane window specific plane formula presented equations section report since hard create view frustum world coordinate system created view frustum viewing coordinate space apply inverse tview matrix view frustum created viewing coordinate system able create view frustum world coordinate system also three dimentional clipping performed viewing coordinate space equations need viewing direction vector n vector v optional vector u following equations showing obtain vectors n vector viewing direction vector obtained calculating camera position subtract camera position n vector used calculate tview matrix v vector vector b must perpendicular n need strategy take care care user entered n perpendicular m since user entered v vector estimated v vector need calculate v vector apply equation v vector also used calculate tview matrix u vector optional vector could obtained cross product n v vector resulting left handed coordinate system also u vector used calculate tview matrix tview matrix obtained simply calculating equation tview transform points world coordinate system viewing coordinate system matrix translates object b matrix roates object b followings someway transform viewing coordinate system world coordinate system case view frustum created viewing coordinate system needed transformed world coordinate system tview inverse matrix obtained simply calculating equation tview inverse transform points viewing coordinate system world coordinate system b transpose matrix translates object x matrix roates object create object world coordinate system transform points viewing coordinate system need transform points viewing coordinate system screen coordinate system finally able simulate camera transformation world coordinate system screen coordinate system tpers matrix obtained simply calculating equation tpers matrix consists d f h values user entered user interface d distance camera near plane incidently view plane near plane viewing system f distance camera far plane finally h value half height view plane window create view frustum able specify six planes xv yv two zv values xv specifies two planes view frustum yv specifies top bottom planes view frustum zv specifies front near plane view plane plane far plane implementation project implemented classes represents objects viewing system introduce classes briefly go class class definition section class definitions cameratransformation main program class creates buttons canvases text fields class contains user input data tview tpers matrixs also class initialize necessary variables handle events user entered mouse click enter value camera location camera v vector v h f values viewer d class converts d coordinates d coordinates draw canvases show d effect d case class rotates object little bit y z axis user see object d effected polygon d class base class objects would displayed canvases view frustum cube class contains vertices three coordinate systems points would displayed canvases called view coordinates class viewfrustum class contains necessary information view frustum extended class polygon d class means contains every thing polygon d plus whatever view frustum need also class creates view frustum viewing coordinate system according value d f h camera location camera value cube class contains necessary information cube class extended class polygon d class also class creates cube origin world coordinate system according length edge tview class contains necessary information tview also class creates tview followings find v u n vectors create matrix create b matrix create tview matrix calculating tb create tview inv matrix calculating btrnasposet x tpers class contains necessary information tpers also class creates tpers according d h f values user entered worldcanvas class contains necessary information world canvas paints objects world coordinate system handle rotation objects draging mouse world coordinate system viewcanvas class contains necessary information view canvas paints objects viewing coordinate system handle rotation objects draging mouse viewing coordinate system screencanvas class contains necessary information screen canvas paints objects screen coordinate system handle rotation objects draging mouse screen coordinate system projectioncanvas class contains necessary information projection canvas paints objects projection canvas two dimentional manner matrix x class contains matrix calculation methods class partially referenced code awwwesome webware vectorf class contains general vector calculation methods class base class vector vector classes class partially referenced code awwwesome webware vector class contains four element vector calculation methods class derived vectorf class class partially referenced code awwwesome webware detailed code project obtained clicking program works like simulate camera transformation see viewing system works may press viewing system viewing system see four canvases viewing system world coordinate canvas viewing coordinate canvas screen coordinate canvas projection coordinate canvas user changes approximated v vector camera location vector camera vector d f h values program redraws objects according values variables user entered four canvas appropreately user needed press view button changed values variables simulate camera transformation conclusion able simulate camera transformation viewing system project simulating viewing system iv less restriction view object world coordinate since could change camera position look also view frustum didn relying two dimentional clipping algorithm eliminate information view plane falls outside view plane window eventhough project performs fine initial design could think features could make project works even better first adding objects view could make better understand going viewing object second diminishing line brightness draw object gets deeper z axis could help user lot tell line front one back acknowledgements would difficult finish project without greatest guidence professor bruce land would like thank deep heart would like thank mother yeon ja shim helping praying survive darkest period life thanks brother sister andy shim julie shim supporting understanding financially mentally also would like thank friends cyber friends hana kids would like dedicate work father han yong shim heaven giving strength courage continue learn complete masters degree cornell university references alan watt d computer graphics addison wesley publishing company