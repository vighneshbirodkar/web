date wed nov gmt server apache ssl b content type text html content length last modified tue oct gmt frameworks algorithms analysis transformation scientific programs omega project frameworks algorithms analysis transformation scientific programs part high performance software systems laboratory computer science department univ maryland college park release petit omega library omega calculator william pugh entire omega project team omega project technical reports omega project two major components one component omega test system manipulating sets affine constraints integer variables started work omega test dependence testing designed decision test existence integer solutions affine constraints found omega test return symbolic answers rather yes answers could perform standard data dependence analysis quicker explored difficult issues analysis transformation scientific programs extended omega test point complete system simplifying verifying presburger formulas presburger formulas contain affine constraints usual logical connectives quantifiers course omega test cannot simplify presburger formulas efficiently nondeterministic lower bound deterministic upper bound time required verify presburger formulas however practice omega test reasonably efficient tasks currently use component research developing frameworks analyzing transforming programs utilized omega test research asking sophisticated questions usually asked analyzing programs using information pinpoint parallelism unexploited conventional techniques developing unified framework reordering transformations methods described using simple cases presburger formulas descriptions implementations techniques simple clear since need concerned techniques used omega test simplify formulas general philosophy ve tried develop exact methods frameworks efficient enough practical opposed developing inexact methods may faster accurate enough practical use find studying exact methods gives better insight problems study easier extend exact methods make faster extend inexact methods make exact exact methods easily applied new problems research group done limited studies efficiency effectiveness methods real fortran codes important studies well requires robust optimizing fortran compiler access substantial effort also applying techniques real codes requires extensions still development procedure calls arbitrary control flow number research groups incorporate omega test software hope get feedback pursue collaborative research array data dependence analysis value based dependence analysis static analysis upper lower bounds dependences parallelism omega test eliminate existentially quantified variables verify existence solutions remove redundant constraints verify implications simplify formulas involving negation related work framework unifying reordering transformations code generation related work implementation users future directions references document next array data dependence get omega project software omega project software available anonymous ftp version petit omega calculator library binaries sources array dataflow benchmark programs either fortran tiny omega cs umd edu