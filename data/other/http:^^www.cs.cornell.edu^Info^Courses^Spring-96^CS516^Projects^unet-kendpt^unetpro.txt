mime version server cern date sunday dec gmt content type text html content length last modified monday may gmt project report u net kernel endpoint cs high performance computer architecture final project kernel endpoint u net march may ankit patel gerry toll apatel cs cornell edu gtoll tc cornell edu project description kernel endpoint u net one drawback u net doesn allow existing applications kernel facilities e g tcp ip easily share underlying network hardware u net based user level applications least two ways problem solved one idea implement required services library user level functions use u net transport mechanism another approach actually construct endpoint inside kernel allow access network hardware via u net device driver decided latter long run provide flexibility library based implementation kernel endpoint place type data transmitted across network regardless protocol additionally may even able communicate non u net hosts re careful using compatible header formats idea take advantage virtual network interface provided u net driver treat real network card inside kernel communication using kernel endpoint doubt slower user level endpoints idea allow many applications multiplex one kernel endpoint existing socket based apps least run idea implement ip high level protocols essentially replace low level kernel functions sending data atm ethernet card routines read write kernel endpoint project milestones march project proposal met matt welsh get better idea project involve believe best platform project pc running linux using fast ethernet hardware ideally abstraction provided u net allow code also work across atm hardware whether proves true remains seen beyond scope project time permits would natural extension work understanding basic idea project provide ability kernel access u net interface via already written u net driver therefore writing code bridge gap ip u net device driver understanding diagrams look network architectures april checkpoint meeting setup hardware two pentium pcs interconnected fast ethernet using null modem setup software linux well u net software loaded machines kernel code compiled u net pingpong application tested run properly however sometimes crc errors received possibly due absence fast ethernet hub also expected latency obtained basic setup divided project two basic parts us concentrate one kendpt lib kernel level implementation devtulip libunet kendpt dev pseudo ethernet driver implemented using kendpt lib major issues decided solved issue create kernel level endpoint driver accept ip icmp etc datagrams passes u net driver handles transmission receipt issue make one u net endpoints behave kernel endpoint requires changes made u net code force kernel endpoint kernel space issue requires thorough understanding u net architecture driver code issue solve problem kernel endpoint receive packets u net hand ip receiving end kernel code needs scanned find right place changes also efficient method needs implemented issue u net requires channel created two communicating hosts exchange data need devise efficient mechanism activating deactivating channels needed additionally need able map channels corresponding ip addresses large network maintain channel per host overhead activating channel probably substantial us activate deactivate every transmitted packet solutions issues april getting code wanna hackers kernel code u net code go man hack issue kernel uses generic device structure represent network devices construct new device struct trick kernel believing talking real network card need large portion functionality provided libunet since re kernel use current form ll rewrite need work inside kernel add module order get stuff need tulip ioctl tulip devs made global inside kernel issue april process kernel mode still access user space memory macros get fs memcpy fromfs put fs memcpy tofs verify area used write protection allowed kernel mode checking area safe write kernel endpoint works kernel space hence functions called creating deleting endpoints channels issue april u net uses polling receiving end u net need pick packets pass ip april considered polling cpu time wasting signals useful kernels ipc methods useful communication two processes problem still remains april tried implementing wake wait queue upcall function pass buffer sleep wait queue april however turned sleep wake mechanism also required simply upcall packet received almost time waste efficiency increase april stuck problem devtulip uses device structure oh look higher level code think layers ip need worry network devices problems april hey still increase efficiency pick incoming packets directly rx rings ip instead passing endpoints e bypass endpoint handover data directly ip consulted matt welsh wishes use modified code later extensions u net sure need code portable atm plus later matt plans provide interface would let user processes multiplex via kernel endpoint without ip flexible interface looks like u net conclusion use endpoint thus extra overhead involved copying buffer issue hey need leave something next cs class may poster presentation project status well semester whether re done project unfortunately ran many difficulties never finished majority code written major issues seem resolved expected overhead future extensions thanks lot instructor thorsten von eicken providing us opportunity hardware work project matt welsh maintaining patience explaining re explaining u net driver internals well providing us guidance throughout project additional thanks go alan cox michael k johnson linux kernel mailing list assistance solving linux namei problems related links information u net u net home page information linux linux documentation project information related tcp ip maintained ohio state online list internet rfc