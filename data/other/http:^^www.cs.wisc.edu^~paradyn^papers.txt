date tue nov gmt server ncsa content type text html last modified thu sep gmt content length paradyn project papers paradyn project papers papers listed page produced paradyn project retrieve postscript copy papers listed clicking paper title work automatically must postscript previewer system cases document html paradyn parallel performance measurement tools barton p miller mark d callaghan jonathan m cargille jeffrey k hollingsworth r bruce irvin karen l karavanic krishna kunchithapadam tia newhall ieee computer november special issue performance evaluation tools parallel distributed computer systems note paper contains several color postscript pages print acceptably b w printers paradyn performance measurement tool parallel distributed programs paradyn uses several novel technologies scales long running programs hours days large thousand node systems automates much search performance bottlenecks provide precise performance data procedure statement level paradyn based dynamic notion performance instrumentation measurement unmodified executable files placed execution performance instrumentation inserted application program modified execution instrumentation controlled performance consultant module automatically directs placement instrumentation performance consultant well defined notion performance bottlenecks program structure associate bottlenecks specific causes specific parts program paradyn controls instrumentation overhead monitoring cost data collection limiting instrumentation user controllable threshold instrumentation paradyn easily configured accept new operating system hardware application specific performance data also provides open interface performance visualization simple programming library allow visualizations interface paradyn paradyn gather present performance data terms high level parallel languages data parallel fortran measure programs massively parallel computers workstation clusters heterogeneous combinations systems dynamic instrumentation api proposed jeffrey k hollingsworth barton p miller adaptive cost model parallel program instrumentation jeffrey k hollingsworth barton p miller europar lyon france august software based instrumentation frequently used measure performance parallel distributed programs however using software instrumentation introduce serious perturbation program measured paper present new data collection cost system provides programmers feedback impact data collection application addition introduce technique permits programmers define perturbation application tolerate able regulate amount instrumentation ensure threshold exceeded also describe implementation cost model presents results using measure instrumentation overhead several real applications dynamic program instrumentation scalable performance tools jeffrey k hollingsworth barton p miller jon cargille shpcc knoxville tn may paper present new technique called dynamic instrumentation provides efficient scaleable yet detailed data collection large scale parallel applications approach unique defers inserting instrumentation application execution insert change instrumentation time execution instrumentation inserted modifying application binary image permits us insert instrumentation necessary current analysis performed visualization presented result technique collects several orders magnitude less data traditional data collection approaches implemented prototype dynamic instrumentation thinking machines cm present results several real applications addition include recommendations operating system designers compiler writers computer architects features necessary permit efficient monitoring large scale parallel systems dynamic control performance monitoring large scale parallel systems jeffrey k hollingsworth barton p miller international conference supercomputing tokyo july performance monitoring large scale parallel computers creates dilemma need collect detailed information find performance bottlenecks yet collecting data introduce serious data collection bottlenecks time users inundated volumes complex graphs tables require performance expert interpret present new approach called w cubed search model addresses problems combining dynamic fly selection performance data collect decision support assist users selection presentation performance data goal provide users answers performance questions time dramatically reduce volume performance data need collect present case study describing prototype implementation technique able identify bottlenecks three real programs addition able reduce amount performance data collected factor ranging compared traditional sampling trace based instrumentation techniques finding bottlenecks large scale parallel programs jeffrey k hollingsworth ph d thesis august note paper contains several color postscript pages thesis addresses problem trying locate source performance bottlenecks large scale parallel distributed applications performance monitoring creates dilemma identifying bottleneck necessitates collecting detailed information yet collecting data introduce serious data collection bottlenecks time users inundated volumes complex graphs tables require performance expert interpret developed new approach addresses problems combining dynamic fly selection performance data collect decision support assist users selection presentation performance data approach called w search model pronounced w cubed make possible implement w search model developed new monitoring technique parallel programs called dynamic instrumentation premise work possible line performance debugging large scale parallelism mandatory w search model closes loop data collection analysis searching performance problem iterative process refining answers three questions application performing poorly bottleneck problem occur answer question tests conducted identify type bottleneck e g synchronization o computation answering question isolates performance bottleneck specific resource used program e g disk system synchronization variable procedure answering problem occurs tries isolate bottleneck specific phase program execution dynamic instrumentation differs traditional data collection defers selecting data collect program running permits insertion alteration instrumentation program execution also features new type data collection combines low data volume sampling accuracy tracing instrumentation precisely count time events inserted dynamically modifying binary program counters timers periodically sampled provide intermediate values w search model based intermediate data changes made instrumentation collect information isolate bottleneck built prototype implementation w search model dynamic instrumentation prototype runs thinking machine cm network workstations running pvm one study tools identified bottlenecks several real programs using two three orders magnitude less data traditional techniques another study dynamic instrumentation used monitor long running programs introduced less perturbation w search model dynamic instrumentation complement also useful individually w search model applied existing post mortem performance tools even simulated machines environments dynamic instrumentation used collect performance data uses including visualization w search model dynamic instrumentation incorporated paradyn performance tools mapping performance data high level data views parallel program performance r bruce irvin barton p miller international conference supercomputing philadelphia may note paper contains several color postscript pages print acceptably b w printers programs written high level parallel languages need profiling tools provide performance data terms semantics high level language high level performance data incomplete cause performance problem cannot explained terms semantics language also need ability view performance underlying mechanisms used language correlate underlying activity language source code key techniques providing performance views ability map low level performance data language abstractions identify various kinds mapping information needs gathered support multiple views performance data describe mine mapping information compiler run time environment also describe use information produce performance data higher levels present data terms code parallel data structures developed implementation mapping techniques data parallel cm fortran language running tmc cm augmented paradyn parallel performance tools mapping high level language facilities used study several real data parallel fortran cm fortran applications mapping high level language techniques allowed us quickly understand applications modify obtain significant performance improvements mechanisms mapping high level parallel performance data r bruce irvin barton p miller icpp workshop challenges parallel processing chicago august note paper contains several color postscript pages print acceptably b w printers primary problem performance measurement high level parallel programming languages map low level events high level programming constructs discuss several aspects problem presents three methods performance tools map performance data provide accurate performance information programmers particular discuss static mapping dynamic mapping new technique uses data structure called set active sentences methods requires coopera tion compilers performance tools describe nature amount cooperation required three mapping methods orthogonal describe combined complete tool although concentrate mapping upward layers abstraction techniques independent mapping direction performance tool high level parallel programming languages r bruce irvin barton p miller ifip wg working conference programming environments massively parallel distributed systems ascona switzerland april users high level parallel programming languages require accurate performance information relevant source code furthermore programs cause performance problems lowest levels hardware software systems programmers need able peel back layers abstraction examine low level problems maintaining references high level source code ultimately caused problem paper present nv model explanation performance information programs built multiple levels abstraction nv level abstraction includes collection nouns code data objects verbs activities performance information measured nouns verbs performance information mapped level level maintain relationships low level activities high level code even relationships implicit used nv model build paramap performance tool cm fortran language practice guided us substantial improvements real cm fortran applications describe design implementation tool show simple tabular graphical performance displays helped us find performance problems two applications case found performance information levels useful related parallel cm fortran arrays could subsequently reduce application execution time half integrated visualization parallel program performance data karen l karavanic jussi myllymaki miron livny barton p miller appear environments tools parallel scientific computing siam press j dongarra b tourancheau eds performance tuning parallel application involves integrating performance data many components system including message passing library performance monitoring tool resource manager operating system application current practice visualizing data streams using separate customized tool source inconvenient usability perspective easy way visualize data integrated fashion demonstrate solution problem using devise generic visualization tool designed allow arbitrary number different related data streams integrated explored visually flexible manner display data emanating variety sources side side three case studies first interface paradyn parallel performance tool devise using two simple data export modules paradyn simple visualization interface show several devise paradyn visualizations useful performance tuning parallel codes incorporate data unix utilities application output next describe visualization trace data parallel application running condor cluster workstations finally demonstrate utility devise visualizations study condor cluster activity paradyn parallel performance tools pvm barton p miller jeffrey k hollingsworth mark d callaghan environments tools parallel scientific computing siam press j dongarra b tourancheau eds paradyn performance tool large scale parallel applications using dynamic instrumentation automating search bottlenecks measure long running applications production sized data sets paradyn recently ported measure native pvm applications programmers run unmodified pvm application programs paradyn paradyn automatically inserts modifies instrumentation execution application systematically searching causes performance problems cases paradyn isolate major causes performance problems part program responsible problem paradyn currently runs thinking machine cm sun workstations pvm currently suns measure heterogeneous programs across platforms paper presents overview paradyn describes new facility pvm supports paradyn reports experience pvm applications optimizing array distributions data parallel programs krishna kunchithapadam barton p miller languages compilers parallel computing august data parallel programs sensitive distribution data across processor nodes formulate reduction inter node communication optimization colored graph present technique records run time inter node communication caused movement array data nodes execution builds colored graph provide simple algorithm optimizes coloring graph describe new data distributions would result less inter node communication distribution information write compiler pragmas used application program using techniques traced execution real data parallel application written cm fortran collected array access information computed new distributions provide overall reduction program execution time however compiler optimizations poor interfaces compiler runtime systems counteracted potential benefit new data layouts context provide set recommendations compiler writers think needed write efficient programs build next generation tools parallel systems techniques developed form basis future work monitoring array access patterns generate fly redistributions arrays performance measurement tools high level parallel programming languages r bruce irvin ph d thesis october note paper contains several color postscript pages users high level parallel programming languages require accurate performance information relevant source code furthermore programs experience performance problems lowest levels hardware software systems programmers need able peel back layers abstraction examine low level problems maintaining references high level source code ultimately caused problem dissertation addresses problems associated providing useful performance data users high level parallel programming languages particular describes techniques providing source level performance data programmers mapping performance data among multiple layers abstraction providing data oriented views performance present nv model explanation performance information high level parallel language programs nv level abstraction includes collection nouns code data objects verbs activities performance information measured nouns verbs performance information mapped level level maintain relationships low level activities high level code even relationships implicit nv model helped us implement support performance measurement high level parallel language applications two performance measurement tools paramap paradyn describe design implementation tools show provide performance information cm fortran programmers finally present results measurement studies used paramap paradyn improve performance variety real cm fortran applications running cm parallel computers case found overall performance trends could observed source code level data views code views performance useful found performance problems could explained source code level cases used performance tools examine lower levels abstraction find performance problems found low level information useful related source level code structures especially data structures finally made relatively small changes applications source code achieve substantial performance improvements integrating debugger performance tool steering krishna kunchithapadam barton p miller steering performance optimization idiom applicable many problem domains allows control performance tuning take place program execution steering emphasizes optimization control performance program using mechanisms external program performance measurement tools symbolic debuggers already independently provide mechanisms needed implement steering tool paper describe configuration integrates performance tool paradyn debugger build steering environment steering configuration allows fast prototyping steering policies provides support interactive automated steering last modified thu sep cdt