date mon dec gmt server ncsa content type text html cecil language reference manual next cecil language specification rationale version craig chambers department computer science engineering university washington box seattle washington usa september abstract cecil purely object oriented language intended support rapid construction high quality extensible software cecil combines multi methods simple classless object model kind dynamic inheritance modules optional static type checking instance variables cecil accessed solely messages allowing instance variables replaced overridden methods vice versa cecil predicate objects mechanism allows object classified automatically based run time mutable state cecil static type system distinguishes subtyping code inheritance cecil enables two graphs described single set declarations streamlining common case two graphs parallel cecil includes fairly flexible form parameterization including explicitly parameterized objects types methods well implicitly parameterized methods related polymorphic functions commonly found functional languages making type declarations optional cecil aims allow mixing migration exploratory production programming styles cecil supports module mechanism enables independently developed subsystems encapsulated allowing type checked reasoned isolation despite presence multi methods subclassing objects extended externally additional methods instance variables often encapsulated separate modules supporting kind role based subject oriented programming style document describes design cecil language december mixes specification language discussions design issues explanations reasoning led various design decisions table contents introduction design goals major features overview dynamically typed core objects inheritance inheritance object instantiation extension declarations predefined objects closures methods argument specializers multi methods method bodies primitive methods fields read vs mutable fields fields methods copy vs shared fields field initialization predicate objects predicate objects inheritance predicate objects fields statements expressions declaration blocks variable declarations variable references assignment statements literals message sends object constructors vector constructors closures parenthetical subexpressions precedence declarations previous approaches precedence associativity declarations cecil method lookup philosophy semantics examples strengths limitations multiple inheritance fields cyclic inheritance method lookup lexical scoping method invocation resends files include declarations pragmas static types goals types signatures type signature declarations type declarations representation object declarations type object extension declarations signature declarations implementation method declarations field implementation declarations type declarations discussion special types type constructors named types closure types least upper bound types greatest lower bound types object role annotations type checking messages checking messages signatures checking signatures method implementations comparison type systems type checking inherited methods type checking expressions statements declarations type checking subtyping declarations type checking predicate objects mixed statically dynamically typed code parameterization parametric polymorphism explicit parameterization parameterized declarations formal type parameters instantiating parameterized declarations parameterized objects types method lookup type checking instantiations implicit parameterization matching type patterns method formal type patterns upper bound type patterns matching algorithm static vs dynamic matching constraints supertype graphs matching matching bounded formal type parameters implicit type parameters extension declarations parameterized objects method lookup parameterization syntactic sugars f bounded polymorphism motivation f bounded polymorphism singly dispatched languages f bounded polymorphism cecil f bounded polymorphism among multiple types modules related work conclusion acknowledgments references appendix annotated cecil syntax grammar tokens white space cecil language reference manual sep next