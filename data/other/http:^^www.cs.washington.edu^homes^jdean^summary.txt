date tue dec gmt server ncsa content type text html last modified fri jun gmt content length research teaching summary research summary jeffrey dean past four years pursued research programming language implementation programming language design software engineering research driven belief programmer productivity significantly improved use high level programming languages languages aid rapid development robust software incorporating advanced language features garbage collection flexible type systems closures inheritance message passing however programmers reluctant adopt languages implementations imposed severe performance penalties combat research developed techniques permit high level languages particular object oriented languages implemented efficiently enlarging set problems languages realistically applied object oriented languages promote development flexible software decoupling clients abstractions implementations decoupling happens use dynamic dispatches e virtual function calls c message sends smalltalk delay selection appropriate implementation behavior run time however implementation details burden programmer essential compiler generate efficient code absence implementation knowledge imposes direct indirect costs language implementation direct cost simply due overhead determining implementation behavior invoked run time often much significant however indirect cost lost opportunity apply traditional compiler optimizations inlining due lack implementation information costs exacerbated frequent use dynamic dispatching decomposition programs many small routines key improving performance object oriented programs enable compiler discover implementation details abstractions languages c allow programmers expose implementation information compiler foregoing flexibility dynamic dispatching call sites problem approach programmers must decide priori want flexibility program decisions always obvious advance performing hand optimization decisions detracts programmers attention real task hand writing software better approach motivation research obtain high performance without compromising flexibility programming model done applying compiler analyses transformations discover implementations invoked dynamic dispatches compiler prove single implementation invoked dynamic dispatch site converted direct procedure call amenable optimizations inlining unfortunately traditional separate compilation model hinders analyses compiler must assume implementations might exist modules making impossible cases know complete set implementations might invoked particular dynamic dispatch support efficient implementations research explored use whole program analysis optimization improve information available compiler opens many opportunities optimization compiler example complete inheritance hierarchy program known compiler optimize away dynamic dispatches single implementation behavior exists program remaining dynamic dispatches places programmers really might use flexibility multiple implementations particular behavior defined program attack cases explored selective specialization profile guided optimization dynamic dispatches developed algorithm detects beneficial compile multiple specialized versions single source routine applicable different set inputs often technique effect moving dynamic dispatches program hot spots less frequently executed portions program final technique applies profile feedback program optimize remaining dynamic dispatches common cases issue techniques perform optimizations based current structure program introduce complex dependencies generated code various aspects program source code order practical use interactive development environment ability incremental compilation must preserved accomplish developed techniques managing intermodule dependencies selectively invalidating pieces compiled code must regenerated programming change experimentally validate ideas ensure remain focused practical techniques co designed implemented vortex optimizing compiler object oriented languages vortex relatively language independent currently compiling programs written cecil c modula implements optimization techniques developed part dissertation since vortex written entirely cecil language many high level features espouse also serves demonstration languages practical given appropriate implementation techniques performance sufficient put daily use interactive development environment techniques developed embodied implementation vortex remarkably successful optimizations found vortex improve performance large cecil programs factor four optimizing baseline without techniques experiments currently underway assess effectiveness c modula programs despite success techniques many potential areas research remain future envision three areas focus research efforts first continue investigate implementation issues related object oriented languages many avenues still remain unexplored area one possibility develop techniques rearrange layout objects cluster frequently used objects together order improve locality sort transformation likely become important program performance becomes increasingly dependent effective utilization memory system another interesting area exploring powerful forms interprocedural analyses serious challenge developing interprocedural algorithms incremental scale realistically sized programs second would like explore synergistic interaction language design language implementation development new implementation techniques make potential language features much less expensive spurring language designers explore new areas similarly introduction new language features provide challenges language implementors example starting viewpoint compiler access entire program allows many compromises made existing language designs avoided explore issues interested designing new systems programming language includes features closures multi methods garbage collection yet excellent performance mechanisms needed low level control data representations finally gap source language implementation language widens becomes difficult programmers identify understand performance bottlenecks lower level languages simple profiling tools coupled understanding implementation costs source language constructs sufficient identify code needed performance tuning high level languages implementations perform sophisticated optimizations longer obvious source constructs expensive pieces code require tuning would like explore means providing informative feedback programmer precisely identify performance bottlenecks directions common goal improving programmer productivity use high level languages making languages faster expressive therefore applicable wider range problems teaching summary jeffrey dean one primary reasons chosen academic career ability profound influence students educating knowledge skills need go understand solve problems faced computer scientists today beyond process hope impart enthusiasm field graduate student university washington ve teaching assistant ta introductory undergraduate computer science courses three quarters graduate courses compilers programming languages one quarter furthermore end first year graduate school instructor second course introductory computer science sequence data abstraction ada although course since converted using c provided valuable experience developing course curriculum exams projects giving course lectures experience ta instructor discovered teaching challenging also rewarding see students learn prosper given proper stimulation feel teaching skills would best utilized courses compilers programming languages software engineering philosophy truly engage students types courses essential get hands experience building systems course projects level subtleties glossed text course lecture become apparent enhancing student understanding often projects group projects also teach students effectively communicate ideas essential skill regardless career path also firm believer involving advanced undergraduates research projects important part education undergraduate involvement research provided valuable experience major factor decision go graduate school graduate student advised worked closely several undergraduates projects related research would hope continue involvement undergraduate research faculty member consistently received good excellent ratings teaching evaluations ratings shown improvement every quarter taught excerpts evaluations instructor splendid absolutely splendid really enjoyed course even though required lot work jeff dean excellent instructor knowledge enthusiasm organization preparedness lectures encouragement way answered questions especially good jeez every aspect course good jeff clear communicator ideas pointers linked lists etc pretty hard grasp jeff gave good explanations examples thorough clear teaching good teaching manner e easy follow threatening intimidating boring either well excerpts evaluations teaching assistant dozens tas interacted ve taed well taed jeff perhaps best frequently better job explaining material professor excellent ta best ever thank patience desire us learn probably greatest asset jdean cs washington edu