date tue dec gmt server ncsa content type text html zpl overview zpl overview zpl new array programming language designed engineering scientific programs would previously written fortran design goals machine independence high performance zpl programs run fast sequential parallel computers implicitly parallel e programmer express parallelism zpl programs simple easy write page zpl described high level answering obvious questions implementation page concludes zpl fact sheet array language scalar languages like fortran c pascal ada operations apply single values b expresses addition two numbers languages adding two arrays requires indexing looping n ltn j n j j ltn j j j b j j j b j fortran c need loop index perform operations arrays tedious error prone zpl operations generalized apply scalars arrays thus b expresses sum two scalars b declared scalars arrays declared arrays applied arrays operations act corresponding elements illustrated loops indeed zpl compiler encounters statement b b two dimensional arrays generates code effectively c loops shown array language therefore simplifies programming create new array language programming languages created time computer science widespread adoption new programming language extremely rare event recent use object oriented languages shows occur time time nevertheless cardinal rule want research applied practice invent new language much better extend enhance existing language established user base parallelism opinion zpl designers phenomenon cannot fully exploited medium existing programming languages even existing array languages fortran apl greenlaw case case demonstrates effective parallel computations typically accomplished paradigm shift away sequential solutions shift frequently discontinuous term shift implies inhibited languages designed sequential computers new language avoid problems facilitate paradigm shift choosing primitives carefully new research parallel compilation apply zpl designed first principles see realize goals isn programming arrays hard programmers unfamiliar may find array languages little different initially technical programmers meaning scientists engineers mathematicians statisticians etc generally find natural indeed many science engineering problems formulated way perhaps closer array languages scalar languages trivial example consider computation mean standard deviation sample n items textbook definitions quantities zpl mu sigma computed single statements mirror definitions mu sample n mean sigma sqrt sqr sample mu n std deviation array sample contains items operator sums m direct translation computation analogous illustrates several features zpl including subtracting mu item sample called promoting scalar array promoting scalar function sqr array function applying item array etc properties zpl e g promotion simply programming language terminology natural concepts technically educated people already know using zpl months graduate student research assistant civil engineering rebelled told program c high performance widely claimed believe zpl languages high performance part name zpl high performance part description backed experimental evidence dikaiakos lewis lin evidence takes different forms always relative means achieving good performance example fortran programs run sequentially c programs customized parallel platforms user specified communication regarded reasonable ways establish good baselines since usually represent best alternatives achieving good performance evidence zpl high performance derives several types experiments lin lin one mentioned simple fluid dynamics program developed lawrence livermore national laboratories benchmark new computers compilers computation widely used study parallel computing parallel version original line fortran program developed gannon panetta gannon high quality variable grain version written c requires approximately lines lee c program customized intel paragon kendal square research ksr compared line zpl program simple lin speedups programs shown experiments involving iterations x size problem experiments indicate high level zpl performs well low level c program two machines information suggests similar behavior expected mimd parallel computer lin zpl good performance zpl parallel directives forms explicit parallelism instead exploits fact programmers describe computations terms arrays many scalar operations must performed implement array operations implied computation parceled different processors get concurrency thus parallelism comes simply semantics array operations zpl designed first principles mean zpl actually dataparallel sublanguage powerful parallel programming language called advanced zpl lin zpl zpl fully general parallel language power users e programmers extreme performance requirements sophistication use demanding technology zpl yet implemented completion expected least two years advanced zpl known previously orca c implements programming model called phase abstractions griswold phase abstractions model capable expressing task parallelism pipelined parallelism parallel programming paradigms data parallelism phase abstractions programming model built generalizes parallel machine model called cta snyder cta abstracts family multiple instruction multiple data mimd computers two models mechanism benefits costs parallel computation succinctly conveyed zpl programmers snyder models balance conflicting requirements write efficient code programmer needs make decisions based program executed machine independent portable programmer must avoid reliance particular machine facilities relationships approach others described snyder feasibility studies indicate approach works lin phase abstractions programming model recognizes three different programming levels process x level composition instructions phase y level composition processes parallel algorithm problem z level composition phases solve overall application letter name highest problem solving programming level motivates language name learning language simple introduction basic zpl concepts available online walk zpl program tutorial introduction programming zpl available zpl programmer guide zpl language manual defines language specifics sample programs scientific research papers also available writing first program perhaps simplest way write run zpl program unix machine use web compiler paste zpl program one window click compile program packaged sent machine uw cse department compiled ansi c returned make file result executable run sequential computer parallel use zpl run parallel computer zpl must first targeted parallel computer operation typically performed zpl applications programmers straightforward parallel computer systems administrators present platforms zpl runs intel paragon cray research d kendal square research ksr pvm running scientific workstation sequential unix platforms information targeting new platform click zpl targeted type parallel computer libraries installed facility ready use zpl parallel necessary install zpl compiler workstation near term zpl compilation performed university washington assist rapidly disseminating compiler improvements user community stale version compiler however provide software want install workstation simplify remote compilation give convenience similar compiling locally learn running zpl parallel click zpl fact sheet name zpl short z level programming language see discussion programming model origin zpl designed implemented orca project computer science engineering department university washington type zpl uses array abstraction implement dataparallel programming model standalone subset advanced zpl history implementation zpl compiler began march generated code approximately months later zpl officially released fourth quarter approach zpl translated conventional abstract syntax tree representation program analysis optimizations performed ansi c code generated object code c program machine independent implements certain operations abstract form code compiled using native c compiler target machine custom libraries second compilation abstract operations customized specific platform team creators zpl brad chamberlain sung eun choi marios dikaiakos george forman e christopher lewis calvin lin larry snyder w derrick weathersby assistance ruth anderson kurt partridge funding foundational research zpl compiler funded part office naval research n j compiler funded part advanced research projects agency n j references dikaiakos m d dikaiakos c lin d manoussaki d woodward portable parallel implementation two novel mathematical biology algorithms zpl th int l conference supercomputing pp gannon d gannon j panetta restructuring simple chip architecture parallel computing greenlaw r greenlaw l snyder achieving speedups apl simd distributed memory machine int l j parallel programming griswold w g griswold g harrison d notkin l snyder scalable abstractions parallel programming proc th distributed memory computer conference ieee pp lee j lee c lin l snyder programming simple parallel portability languages compilers parallel computing uptal banerjee david gelernter alexamdru nicolau david padua eds pp lewis e lewis c lin l snyder g turkiyyah portable parallel n body solver th siam conference parallel processing scientific computing pp lin c lin portability parallel programs across mimd computers ph d dissertation university washington lin c lin l snyder comparison programming models shared memory multiprocessors proceedings international conference parallel processing pp ii lin c lin l snyder simple performance results zpl languages compilers parallel computing k pingali u banerjee d gelernter nicolau d padua eds pp lin c lin l snyder r anderson b chamberlain choi g forman e lewis w d weathersby zpl vs hpf comparison performance programming style cse technical report university washington snyder l snyder foundations practical parallel programming languages j ferrante j g hey eds portability performance parallel processing john wiley sons ltd pp snyder l snyder type architecture shared memory corollary modest potential annual review computer science pp snyder l snyder experimental validation models parallel computation hofmann j van leeuwen lecture notes computers science v springer verlag zpl uw cse uw zpl info cs washington edu