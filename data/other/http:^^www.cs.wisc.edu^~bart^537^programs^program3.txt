date mon nov gmt server ncsa content type text html last modified fri apr gmt content length cs programming assignment university wisconsin madison computer sciences department cs spring bart miller programming assignment due wednesday may pm simulating cpu scheduling algorithms goal assignment evaluate several cpu scheduling algorithms use trace data local unix systems test algorithms assignment write program reads trace data simulates cpu scheduling keep track various performance statistics print completion trace file trace files trace files look similar ones used program line trace file form commandname starttime cputime iocount three pieces separated number blank characters spaces tabs commandname character string maximum length characters contains name program starttime time millisecond increments ths second since midnight time program arrived system cputime total cpu time seconds used program iocount records total number bytes disk o done program disk o always occurs full blocks blocks k bytes ignore types o network keyboard display lines trace files sorted program starting time program information program structured continuous loop reads trace records advances time important events program maintain notion current time clock simulator variable holds value current time clock tick ms clock start time advances time program runs simulated cpu idle waiting several things happen simulator running process currently running could complete case need update various performance statistics see remove process run ready queues process start disk o case need block process o completed disk o complete process completed o placed back appropriate run ready queue new process arrive ready start case current time simulator matches arrival time one jobs trace file jobs need placed appropriate ready queues scheduling algorithms details particular scheduling algorithm implement several isolated single class program except scheduling algorithm different versions first version program implement round robin scheduling process runs completes time slice blocks disk o terminates disk o completes another job arrives e new process arrives disk o completes running process time slice running process interrupted test time slices ms ms ms second version program implement exponential queues rr process runs completes time slice blocks disk o terminates disk o completes another job arrives time process interrupted new process o completion placed back queues end queue correct priority priority levels base smallest time slice ms process uses full time slice descrease priority double slice process uses less half time slice increase priority half slice third version program implement stcp scheduling version sorting ready queue according much total cpu time remains process newly arrived process disk o completing preempt running process currently running interrupted placed back queue according much cpu time remaining simulator details important details three versions context switch takes ms taking process execution takes ms starting process execute also takes ms process o operation blocks operation completed process perform certain number o operations based iocount field trace record since o always done blocks k round iocount next multiple k iooperations trunc iocount use iooperations count cputime field calculate often process block o divide value cputime field number o operations round near millisecond note assuming o operations evenly distributed throughout execution program o operation always occurs end cpu burst cputime divide evenly number o operations last cpu burst smaller ones followed disk o number o operations greater number milliseconds cputime excess o operations done end process extra context switches operation examples cputime number o operations process need start o operation ms execution process execute ms o execute another ms o cputime number o operations process execute exactly case additional ms cpu burst last disk o cputime number o operations process start one o operation ms exectution o operations done together end last cpu burst disk o operations take exactly amount time ms computer one disk one disk operation time soon one operation completed next start time performance data simulator keep trace several performance statistics print results simulator completes statistics average completion time act job calculate took run time difference completion time arrival time act average value jobs trace file minimum maximum completion time also compute minimum maximum completion times jobs throughput number jobs per second divide number jobs executed total running time simulator utilization amount time spent useful computation include idle time time spent context switches print total percentage running time simulator software design issues good design assignment save literally thousands lines code crucial class version program class queuing one version program simple fifo queuing another version priority queue sorted one priority levels last version priority queue sorted remaining cpu time parts program re use different versions plenty time assignment delay getting started work design initial structure classes come talk ta deliverables hand print program makefile program listing include copy code scheduling algorithm one copy code rest program clearly labeled simulator print statistics described simulator run last modified fri apr cdt bart