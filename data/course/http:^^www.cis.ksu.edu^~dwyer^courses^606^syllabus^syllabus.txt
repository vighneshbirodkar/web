date wed nov gmt server ncsa last modified wed nov gmt content type text html content length cis translator design fall cis translator design fall new web pages phase assignment online phase solution online overview course explores basic problems construction programming language translators study theoretical foundations translators common implementation techniques course focus compilers high level languages also look applying translation techniques variety little languages lectures nichols mwf instructor prof matt dwyer office nichols e email dwyer cis ksu edu www http www cis ksu edu dwyer phone office hours mw thu text compilers principles techniques tools aho sethi ullman addison wesley additional resources web pages course include tool documentation assignments solutions test cases lecture notes prerequisites cis requirements course consist mixture different kinds assignments major component grade determined large multi part compiler implementation project open book open note class final exam occasional short homework assignments closed book closed note class quizzes given goal assignments provide feedback progressing understanding course material also provides valuable feedback tailor course maximize benefit class weighting used final grade project final exam homeworks quizes project consists implementing compiler pascal like language classes may write compiler c c pascal ada really want write another language come talk expect code clearly organized documented serious use either c c ada write lexical analyzer using scanner generator flex see man flexdoc details use another language build lexical analyzer hand regardless implementation language build top recursive descent parser parser produce abstract syntax tree intermediate representation code generated may use vcg tool quickly easily produce postscript depictions syntax trees compiler generate assembly code mips r r generated programs executed mips simulator called spim already know machine architecture assembly language programming might start browse spim document compiler implemented four phase scanner identifier table parser type checking embellish parser build ir optimize ir code generator project implemented either independently pairs chose work pairs expected perform local optimization generated code involve building additional phase perform ir optimization part exercise building large software system reasonably complicated component interactions graded quality generated code correctness code however important make number test files available prior due date stage encouraged use test implementation may execute projects test files may also create tests sufficient interest create class wide collection test cases use students encouraged talk compiler concepts design alternatives implementation details etc final product creation copy work prepared exam maximize benefit get course schedule academic honesty assignments expected work provost office plagiarism cheating serious offenses may punished failure exam paper project failure course expulsion university information refer academic dishonesty policy inside ksu matt dwyer dwyer cis ksu edu last updated aug