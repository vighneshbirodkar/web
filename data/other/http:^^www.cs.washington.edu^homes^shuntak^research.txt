date tue dec gmt server ncsa content type text html last modified tue jan gmt content length research summary shun tak leung research summary current research centers compiler directed program restructuring techniques improve cache locality array accesses loops specifically studying use array restructuring optimize spatial locality parallel execution reduce false sharing also worked improving performance applicability runtime parallelization earlier project advisor prof john zahorjan list publications subjects click array restructuring current research focuses compiler directed program restructuring techniques improve cache locality specifically studying use array restructuring optimize array accesses loops work combines development algorithms within formal framework implementation prototype compiler extensive experimentation benchmark loops shows array restructuring applied automatically efficiently wide class applications array restructuring approach enhancing locality array accesses loops accesses targeted account major portion memory traffic many array based scientific computations moreover since typically executed many times effort spent optimizing program text yield huge benefits execution performance array restructuring approach compiler analyzes array accessed lays array appropriately according access pattern trivial example two dimensional array accessed rows compiler may decide store row major order whereas accessed columns compiler would choose column major storage contrast traditionally storage order fixed arrays forcing programmers concerned program performance write programs way data access pattern matches fixed data layout far possible research array restructuring motivated part observation array restructuring many ways complements loop restructuring alternative approach changes execution order loop iterations rather storage order array elements received much less attention example array restructuring easily applied complicated loops may hamper many automatic loop restructuring techniques also array restructuring improve spatial locality without jeopardizing temporal locality whereas loop restructuring affects types locality however loop restructuring widely studied relatively little known apply array restructuring automatically efficiently research shows array restructuring applied automatically efficiently wide class programs provides new set techniques complement existing loop restructuring techniques also produces insights experience believe contribute integrated approach combining strengths two specifically work makes four contributions framework represent array transformations algorithms automate array restructuring within framework prototype compiler implement algorithms experiments evaluate effectiveness framework formulated framework represent general class array transformations framework array restructured original array replaced another array restructured array contains elements different order correspondence elements two arrays defined invertible linear transformation index vectors words instead using index vector find element original array apply linear transformation vector use result find corresponding element restructured array may appear extra transformation imposes significant overhead fact case following reason traditionally memory address array element linear function indices condition basis compiler optimizations reducing indexing overhead applying extra linear transformation index vectors invalidate condition therefore entail extra indexing overhead property essential efficiency thus viability array restructuring algorithms developed algorithms within framework key steps array restructuring algorithms solve problems simple linear algebraic techniques common case array indices linear functions loop variables algorithms also adapted deal general access patterns well first step array restructuring analyze access pattern array choose transformation optimize locality represent array access linear mapping relate access locality properties mapping mathematical properties select linear transformation effect desired changes mapping thus access second need compute set elements accessed loop determine elements restructured array must contain achieved representing loop array bounds sets linear inequalities geometrically convex polyhedra manipulated known mathematical techniques third elements restructured array laid memory way element efficiently located given indices non trivial problem example case two dimensional arrays general array transformations may cause rows restructured array different lengths start different column positions violating basic assumptions traditional way laying array elements solution apply transformation reduces problem traditional form without jeopardizing locality improvement achieved prior transformations finally program code transformed appropriately transformed array accesses generated linear mapping representations computed earlier prototype implemented prototype compiler perform array restructuring automatically based suif compiler stanford university suif comprises number compiler passes intermediate program representation implementation consists array restructuring pass lines c added suif optimization passes runtime library lines c c results performed series experiments using nasa kernels spec benchmarks loops literature experiments designed study array restructuring affects performance range problem sizes well compares interacts various loop restructuring techniques carried four different platforms representing two types machines single processor workstations alpha based dec powerpc based ibm rs shared memory multiprocessors r based sgi power challenge kendall square research ksr proprietary processor experimental results encouraging dec workstation array restructuring decreased execution time loops cases increased none average improvement including loops compiler apply array restructuring occurred wide range problem sizes results ibm rs similar platforms performance improved array restructuring led better spatial locality reason performance ksr sgi power challenge showed similar improvements execution number processors moreover several cases false sharing existed array restructuring removed performance bottleneck producing performance benefits increased number processors experiments also showed applicability performance array restructuring techniques complemented many common loop restructuring techniques including performed production quality optimizing compiler sgi successfully applied loops techniques could automatically transform achieved comparable often better performance applicable cases perform well simple forms loop restructuring would sufficed suggesting loop array restructuring complementary found technical report concise version runtime parallelization runtime parallelization two step strategy parallelizing loops may contain substantial parallelism cannot parallelized compile time insufficient dependence information parallelize loop compiler generates two code fragments inspector executor run time inspector computes parallel schedule iterations based dependence information available compile time executor performs iterations parallel using schedule research runtime parallelization touched inspector executor proposed two ways speed inspector work appeared fourth acm sigplan symposium principles practice parallel programming paper also available technical report also studied various forms executor improve performance extend applicability complex dependence patterns research reported technical report experiments ksr shared address space multiprocessor show false sharing poor spatial locality could seriously degrade executor performance proposed experimentally evaluated two simple techniques address problems restructuring arrays according parallel execution schedule research reported technical report shun tak leung department computer science engineering university washington box seattle wa email shuntak cs washington edu fax last modified january