date mon nov gmt server ncsa content type text html last modified thu feb gmt content length cs quiz university wisconsin madison computer sciences department cs spring bart miller quiz wednesday february messages readers writers revisited write code implement access control n readers writer problem use message passing defined class notes lecture synchronization mechanism e cannot use monitors semaphores client process wants read write shared database use startread endread startwrite endwrite appropriate procedures described write four client procedures plus code server process startread procedure called client process wants read access shared database procedure return safe read data note actual reading data done procedure endread procedure called client process done reading shared database startwrite procedure called client process wants write access shared database procedure return safe write data note actual writing data done procedure endwrite procedure called client process done writing shared database might useful refer section lecture notes problem concerned whether readers writers get priority solution version good general solution may bit complex used useful characteristics interesting characteristic client mailbox response separate client mailboxes allows clients run different hosts network note didn write queuing routines code clever use message system example using two message sends start request able use implicit queuing provided mailboxes void startread char mboxname maxnamesize makemboxname mboxname send request startread send start read mboxname receive mboxname buff void endread send request endread void startwrite char mboxname maxnamesize makemboxname mboxname send request startwrite send start write mboxname receive mboxname buff void endwrite send request endwrite void makemboxname char mboxname sprintf mboxname mbox d getpid createmailboxname mboxname void readerwriterserver int value int ar wr aw ww char mboxname maxnamesize createmailboxname request createmailboxname start read createmailboxname start write receive request value value startread aw ww ar receive start read mboxname send mboxname else wr else value startwrite aw aw receive start write mboxname send mboxname else ww else value endread ar ar ww aw ww receive start write mboxname send mboxname else value endwrite aw ww aw ww receive start write mboxname send mboxname else wr ar wr receive start read mboxname send mboxname solution version slightly simpler one version client processes sharing mailboxes type approach valid useful since work work client processes different hosts network void startread send request startread receive oktoread void endread send request endread void startwrite makemboxname mboxname send request startwrite receive oktowrite void endwrite send request endwrite void readerwriterserver int value int ar wr aw ww char mboxname maxnamesize createmailboxname request createmailboxname oktoread createmailboxname oktowrite receive request value value startread aw ww ar send oktoread else wr else value startwrite aw aw send oktowrite else ww else value endread ar ar ww aw ww send oktowrite else value endwrite aw ww aw ww send oktowrite else wr ar wr send oktoread last modified thu feb cst bart