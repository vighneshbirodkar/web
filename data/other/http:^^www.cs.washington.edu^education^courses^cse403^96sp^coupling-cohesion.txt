date tue dec gmt server ncsa content type text html coupling cohesion coupling cohesion coupling indication strength interconnections program units highly coupled program units dependent loosely coupled made units independent almost independent modules independent function completely without presence obviously modules completely independent must interact produce desired outputs connections modules dependent sense info one modules required understand module three factors number interfaces complexity interfaces type info flow along interfaces want minimize number interfaces modules minimize complexity interface control type info flow interface module used pass information modules general modules tightly coupled use shared variables exchange control info loose coupling info held within unit interface units via parameter lists tight coupling shared global data need one field record pass entire record keep interface simple small possible two types info flow data control passing receiving back control info means action module depend control info makes difficult understand module interfaces data communication result lowest degree coupling followed interfaces transfer control data highest data hybrid ranked highest lowest content coupling one directly references contents one module modifies local data values instructions another module happen assembly language one refers local data another module one branches local label another common coupling access global data modules bound together global data structures control coupling passing control flags parameters globals one module controls sequence processing steps another module stamp coupling similar common coupling except global variables shared selectively among routines require data e g packages ada desirable common coupling fewer modules modified shared data structure modified pass entire data structure need parts data coupling use parameter lists pass data items routines cohesion measure well module fits together component implement single logical function single logical entity parts contribute implementation many levels cohesion coincidental cohesion parts component related simply bundled single component harder understand reusable logical association similar functions input error handling etc put together functions fall logical class may pass flag determine ones executed interface difficult understand code one function may intertwined leading severe maintenance problems difficult reuse temporal cohesion statements activated single time start shut brought together initialization clean functions weakly related one another strongly related functions modules may need change lots modules maintenance procedural cohesion single control sequence e g loop sequence decision statements often cuts across functional lines may contain part complete function parts several functions functions still weakly connected unlikely reusable another product communicational cohesion operate input data produce output data may performing one function generally acceptable alternate structures higher cohesion cannot easily identified still problems reusability sequential cohesion output one part serves input another part may contain several functions parts different functions informational cohesion performs number functions entry point independent code function performed data structure different logical cohesion functions intertwined functional cohesion part necessary execution single function e g compute square root sort array usually reusable contexts maintenance easier type cohesion modules support data abstraction strictly linear scale functional much stronger rest first two much weaker others often many levels may applicable considering two elements module cohesion module considered highest level cohesion applicable elements module adam carlson