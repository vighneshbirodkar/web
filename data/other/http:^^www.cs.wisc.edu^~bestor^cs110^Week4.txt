date wed nov gmt server ncsa content type text html last modified thu apr gmt content length cs section lecture notes week lecture notes week topic repetition loops end end continue statement text chp notes repetition loops conditional execution allows optionally execute different sections code repetition looping allows re execute section code several times example add numbers entered one per line sum read num sum sum num read num sum sum num read num sum sum num print total sum sum simply sum re execute following times read num sum sum num print total sum sum repetition efficient flexible continue statement fortran re execute one statements use continue statement label count start end inc statements re execute label continue ctr read num sum sum num continue inc defaults specified ctr use negative value inc count ctr count must integer real variable loops work count initialized start first iteration iteration count incremented inc loop terminates count end note start end inc may literals variables expressions max ctr max sqrt normally use integer values start end inc end start inc number iterations inc start end loop isn executed min ctr min start end inc changed inside loop min max ctr min max max ctr print spam continue start end inc evaluated beginning initial values important labels label line number continue statement indicate end loop every statement continue re executed ctr continue label written columns though continue statements start column multiple loops keep labels ascending order use multiples different numbers foo continue bar continue conditional loops statement re executes statements pre determined number times know number iterations ahead time sum read num following num equals sum sum num read num print total sum sum statement fortran tests condition iteration condition true re execute loop condition statements re execute end num ne sum sum num read num end condition logical expression like statement re write continue loop loop count min max print count continue functionally count min count le max print count count count end condition must contain variable value changed inside loop otherwise condition always remains true e infinite loop right num ne print num read num end wrong num ne print num sum sum num end fortran loop statement standard fortran may available compilers sometimes cannot use fortran continue loop implement equivalent loop fortran use statement goto statement num ne end written num ne goto end goto statement jumps resume executing statement specified label warning never use goto statements anywhere program except strict fortran compiler implement loops second warning anyone caught using goto statements class automatically receive mark zero assignment say gotos nested loops statements nested inside continue loops x fact count x fact fact count continue print x fact continue outer loop executed times x inner loop executed x number times depending current value x nested loops must use different counter variables inner loop continue statement comes outer loop continue statement indenting statement indent re executed statements additional spaces fortran loops repitition loops vital programming languages useful standard fortran continue loop fortran provides powerful looping mechanisms aside loop also supported many non standard fortran compilers microsoft fortran end loop fortran fortran continue loop without continue statement label end loop indicated end statement add read num sum sum num continue add read num sum sum num end end nested like loops counter must integer variable important always use end loop instead continue loop class also supported microsoft fortran loop use use end fortran instead continue fortran possible use end fortran instead goto fortran unless strict fortran compiler copyright copy gareth bestor bestor cs wisc edu last modified april