date mon nov gmt server ncsa content type text html last modified mon may gmt content length computing distributed objects computing distributed objects steven fought talk sources essential distributed objects survival guide r orfali d harkey j edwards wiley usenet news object oriented programming review objects individual sets data coupled related procedures used access alter data important features encapsulation data hidden behind methods polymorphism objects interchangeable different inheritance objects extended altered remain interchangeable older models related features early late binding frameworks opendoc opendoc compound document programming model documents divided parts parts consist typed data persistent store associated part editor part editors subclassed method superclass standard implementations methods need overloaded many parts nest within parts opendoc frameworks two competing drawing frameworks opendoc development framework apple rendering facilities instead prebuilt editor parts subclassed opendoc framework ibm built openclass cross platform rendering library currently available os windows mac aix later clearly rendering currently opendoc weak point opendoc compound documents document shells used interact documents create session object provide parts information manage geometries retrieve documents storage dynamically bind load part editors dispatch events manage global document data bento opendoc persistent storage bento used store compound documents system structured files references files concurrent multiuser access currently internal versioning system drafts persistent references bit ids used identify individual parts opendoc data transfers drag drop clipboard cut copy paste copy links persistent references recursively located within parts determine copy copy links push new data documents updated scripting extensions part editor superclasses designed part operations scripted semantic level event system extends os event model standardized registered extra interfaces parts called extensions also possible ole com ole based strictly object model interfaces individually instantiated therefore unique associated state inheritance supported instead aggregation available object location transparent communications mechanisms differ depending environment object process local servers remote servers remote servers currently unimplemented might nt beta ole interfaces interfaces called vtables laid ms visual c format programmers using compilers different vtables must currently lay ole tables hand process servers implemented dlls loaded process address space local servers contacted using ms lightweight rpc interfaces client server communication starts iunknown interface new interfaces discovered queryinterface method iunknown allows multiple interfaces supported via aggregation ole features ole features similar opendoc scripting automation support data transfer via drag drop clipboard linking change advisories compound documents addition storage architecture supports locked regions commit revert transactions product currently monikers monikers aliases objects including files items within files anti monikers negate previous monikers pointers volatile storage composite groups monikers ole nested data handled monikers ole compound documents container application main purpose e g word contain servers server smaller program either loaded address space lrpc allows editing sub document pixelmaps sub documents cached allow document display without full server activation ocxs ocxs ole custom controls microsoft replacement visual basic controls generally applicable ole purpose provide standard architecture servers consists process server aggregated automation server allows scripting biggest weakness ocxs cannot containers corba overview common object request broker architecture distributed objects distributed computing object oriented principles corba objects exist anywhere network location transparent objects object request broker orb marshals communication objects object interfaces defined pl independent interface definition language idl corba history corba spec controlled object management group omg consortium companies corba published specified compliant behaviors individual orbs corba published specified interoperability orbs well updating aspects spec five sub specifications different standardized services orbs must implement issued three exist rfc form interface definition language idl completely specifies communication client server client server relationship arbitrary generally linked initiating object idl defines modules sets class descriptions grouped one namespace interfaces sets method invocations like class definition implementation operations corba term methods data types include simple types short long unsigned short unsigned long float double char boolean octet constructed types enum string struct array union sequence aggregate types constructed typedefs idl example module myanimals interface dog pet animal attribute integer age exception notinterested string explanation void bark short long raises notinterested void sit string raises notinterested attributes provide automatic get set operations object request brokers orbs also called object buses requests objects go orb orb single process set processes set services protocols orbs compared plumbing orbs client side client idl stubs pack information transport server created idl compiler dynamic invocation interface dii allows run time binding object interfaces interface repository apis stored run time database allowing dii discover object methods orb interface provides commonly needed services converting object reference objects strings orbs server side server idl stubs created idl compiler dynamic skeleton interface dsi server equivalent dii allowing receive non idl marshaled requests object adapter provides runtime environment corba objects including assigning ids object references instantiation message passing implementation repository provides place store administrative data including location executable servers orb interface provides commonly needed services client side steps creating corba service create idl definitions precompile create interface skeletons add server implementation code compile compile add apis interface repository create client idl stubs executable server objects register executable implementation repository client opens connection server object adapter check implementation repository compatible executable instantiate dynamic invocations allow interface discovery client dynamically invoke object methods dii steps obtain method description create argument list create request invoke method using rpc send receive datagram depending method description library routines provided aid process object adapters object adapters registers server classes ir instantiates new objects manages object references broadcasts presence object servers handles incoming client calls oa effectively inherited interface although implemented procedural languages standardized basic object adapters boas provided common cases shared server unshared server server per method persistent server common object service specifications number standardized services established worked grouped together common object service specifications cosss coss life cycle naming persistence event notification coss transactions concurrency relationships externalization coss security time coss query licensing properties coss trader collections change management discuss following slides naming events life cycle trader naming standardized hierarchical name service designed encapsulate services dce cds iso x sun nis trader provides way finding object suited task based set criteria life cycle allows creation copying deleting moving objects also allows relationships objects defined terms graphs events allows semantic level events defined distributed transactions concurrency transaction object allows nested commit abort style transaction defined object interface inherited objects support transactions concurrency service includes locking facilities allow mutual exclusion synchronization persistence object databases persistence object allows seamless access one two level stores implementation complex three basic interfaces provided direct access da protocol provides direct access persistent data using data definition language odmg protocol provides access object c using odmg ddl dynamic data object protocol used define structure contains data object latter used two level stores relational databases filesystems notes corba orbs different vendors compatible implement half bridges reference protocol runs top tcp ip corba orb vendors great flexibility determining transport packaging server calling mechanisms flexibility intended encourage high performance systems performance varies widely implementation relative object location interesting issues parallelism breaking applications smaller objects cooperate increases potential parallelism objects designed work across networks forced exploit concurrency avoid excessive blocking programming languages smaller size objects encourages inter procedural analysis new languages use existing object components