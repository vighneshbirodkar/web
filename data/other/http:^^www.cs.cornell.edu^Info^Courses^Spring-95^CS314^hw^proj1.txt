mime version server cern date monday dec gmt content type text html content length last modified monday mar gmt project martix products back cs home page project martix products date assigned february date due february introduction project involves writing small assembly language program multiplying matrices program gets input send output basepak runtime window specs overview compute matrix product ab technically ab mod b matrices bit unsigned integers minimum matrix size x maximum matrix size x input parameters m x n matrix bit unsigned integers first matrix product b n x p matrix bit unsigned integers b second matrix product m unsigned bit integer m number rows n unsigned bit integer n number columns number rows b p unsigned bit integer p number columns b m n p satisfy m n p output parameters c m x p matrix bit unsigned integers c ab mod arithmetic arithmetic integers mod e use unsigned bit integer multiplication addition take low order word multiplication results user interface user interface program minimal assembly language program program prompt user parameters m n p successively allow user enter values elements matrix values matrix b values entered program output matrices b output result matrix c numerical input output base matrices output standard order e row elements matrix correspond row numbers screen example x matrix elements would output matrices input prompting user elements one time order would output text prompt include matrix name indices element currently prompted example matrix given would entered via following exchange underlined text indicates program output non underlined text indicates user input sample run run program look something like following m n p b b b b b b b b b b b b b result b corresponds documentation usual documentation guidelines always explain re using registers use symbolic constants whenever possible state input output parameters subroutines etc apply program least subroutines one inputting matrices one printing matrices one multiplying matrices subroutine begin header looks like name function synopsis brief description function calls exceptional conditions hll description put high level language e g c pascal pseudo code description routine register usage map registers used input conditions format registers stack entry routine output conditions format registers stack routine returns stack frame stack frame look like example saved registers old return address param param subroutine code immediately follow subroutine header try comment line use block comments blank spaces separate logical sections subroutine example code routine swaps two registers d d d d swap prolog save registers set stack frame link set frame pointer locals movem l d sp save registers ll use compare d d see need anything jump epilog leave cmp d d blt done get d d swap contents d d using d scratch register move l d d tmp d move l d d d d move l d d d tmp epilog restore registers clean stack frame return done movem l sp d restore registers etc unlk rts try give high level description function header detailed description block comments blow blow individual line comments repeat code says possible addition project sure document following aspects program method laying matrices memory indexing conventions misc program check values m n p supplied user fall within allowable range ll probably need adapt bit signed decimal o routines basepak library use bit unsigned routines project simply taking low order word return decin long would acceptable inputting bit unsigned integers though wouldn great idea real program using decout long work outputting bit unsigned integers long remember clear high word d submitting hand following consulting office hardcopy program hardcopy sample run program electronic copy program diskette back cs home page