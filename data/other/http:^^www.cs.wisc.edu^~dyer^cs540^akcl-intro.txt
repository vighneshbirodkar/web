date mon nov gmt server ncsa content type text html last modified sun sep gmt content length using gnu common lisp department workstations using gnu common lisp gcl already created instructional account one departmental workstations used class log newuser set following instructions given takes half hour account created ready use log account open two xterm windows two windows see default unix prompt one window used run version common lisp using called gcl window used edit unix files containing lisp functions programs write run gcl interpreter using command gcl first window invoked gcl initializes system prints message enters top level prompt read eval print loop using prompt enter expression evaluation prompt since gcl prompt default unix prompt workstations might want change unix prompt something else run shell command put command cshrc local file avoid every time set prompt whatever like gcl line help facilities example within gcl help introductory help message help symbol documentation everything associated symbol e g help load help step help trace help compile file help dribble help lisp function interested help string documentation symbols containing string sub string e g help remove describes functions remove remove remove duplicates remove apropos string like help except lists names documentation symbol type prints online documentation string symbol given type available also use gnu info facility access documentation www version available addition material may accessed unix program info type info unix prompt within emacs typing esc x info edit program file using text editor vi emacs example following creates file named functions lisp defines single lisp function named welcome unix vi functions lisp defun welcome format hello welcome emacs commands editing lisp since emacs written lisp command c h f function name work describe general lisp functions well editing actions emacs three lisp modes emacs lisp mode lisp mode lisp interaction mode complexities emacs lisp modes beyond scope introductory document however emacs editor choice powerful lisp modes worth investigating see tips editing lisp code ideas vi commands editing lisp since many lisp programs set vi aid entering lisp functions readably correctly three options interest lisp changes commands move backward forward expressions autoindent automatic indenting showmatch shows matching typed set either set time enter vi se ai sm lisp settings set every time enter vi edit exrc file home directory include line set ai sm lisp finally also operator vi realigns existing lines though typed lisp autoindent set operator using command beginning function realign lines function see also use commands moving around within lisp functions brief explanation help try commands move backward forward expressions commands like stop atoms used skip next list comment quickly commands advance retreat lines beginning useful dealing entire function definitions call vi within gcl alternative keeping separate windows vi gcl define lisp function vi allow us call vi within gcl automatically load changes re done editing save contents dyer public html cs lisp vi lisp file directory load file gcl gcl window load functions defined file gcl load functions lisp gcl loading functions file simple syntax checking unmatched parentheses misused punctuation functions loaded successfully syntax errors case go back vi window edit functions reload file gcl window run program gcl welcome hello welcome runtime errors use vi window modify program gcl window reload file containing program run compile program compile file functions lisp load functions o welcome compiling executable file functions o created current directory debug program using interpreter first compile optimized executable code everything debugged make typescript terminal session one way use dribble dribble file name given string start typescript run programs plus anything else want saved dribble stop typescript everything displayed screen saved given file including type lisp interpreter responds also use unix command script filename starting gcl unix command exit ending gcl session appears give slightly better looking output trace single step program trace func name trace named function untrace func name stop tracing named function step func name parameters single step mode exit gcl bye control d also stop gcl lisp break package lisp invokes break package whenever encounters error user aborts execution break package recognizable prompt changes many options choose package break loop command summary indicates optional arg help summary bl j show local variables values segment vs compiled j stack frames starting current one bt n backtrace n steps frames one env describe environment stack frame interpreted fr n show frame n loc return th local frame function compiled si loc r resume return current break loop frames one example print backtrace last frames bt note use fast links nil makes non system function calls recorded stack use fast links default low level commands p make current th previous frame list show b n make current th next frame list show b go ihs index make current frame corresponding ihs index m print last break message c show function current ihs frame q quit top level r resume break loop b full backtrace functions special forms bs name backward search frame named name fs name search frame named name vs show value stack ihs show invocation history stack bds v v show previous special bindings v v v sure log workstation leave hold left mouse button click logout