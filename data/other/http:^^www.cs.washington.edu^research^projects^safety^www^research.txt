date tue dec gmt server ncsa content type text html software safety uw research research currently centered building cad environment safety critical software development environment contains set support analysis tools work system software specifications written language believe support communication among various development groups including system engineers software engineers application experts human factors cognitive engineers specification language rsml requirements state machine language formal foundation suitable automated analysis also found readable application experts little training minimal mathematical background one unique aspect approach analysis performed directly system specification approaches formally evaluating systems require extra often difficult step translating system design mathematical modeling language executable model specification system specification identified hazards control requirements traceable directions early preliminary hazard identification design implementation system development proceeds analyses evaluations performed appropriate particular development stage information see original rsml paper requirements specification process control systems paper updates rsml preparation rsml originally developed specify system requirements tcas ii aircraft collision avoidance system since first demonstration approach real system extending modeling language include intent design rationale improving readability usability models developing suite automated tools assist evaluating model specification safety major changes rsml made assist dealing complexity real systems understanding specification crucial human detection errors also experimenting various types visualization techniques assist analyst understanding model analysis results approach safety evaluation based system safety engineering concepts use standard safety engineering approaches extend deal software human error use automation enhance ability cope complex systems identification classification evaluation hazards done using modeling analysis effective models analysis tools must consider hardware software human components also need include variety analysis techniques orthogonal approaches exists single safety analysis evaluation technique handle aspects complex systems safety analysis tools currently prototyping evaluating include simulator rsml specifications executed using analyst supplied scenarios test cases simulator operational limitations language need relax backward simulation fault tree generation backward simulation starts particular system configuration identifies paths could led configuration starting particular hazard analyst use backward simulation determine whether hazard could occur information states preceding hazard used eliminate hazard design results backward analysis presented form fault tree consistency completeness checking tool checks rsml specifications two properties completeness respect set criteria related robustness response specified every possible input input sequence consistency specification free conflicting requirements undesired nondeterminism method scales large systems decomposing specification smaller analyzable parts using functional composition rules ensure verified properties hold entire specification tool used tcas specification others information see paper titled completeness consistency analysis state based requirements deviation analysis deviation analysis new safety analysis technique aid identifying specified behavior may lead hazardous system states procedure based underlying systems theory accidents caused deviations system paramenters using formal software system requirements specification analyst provides assumptions particular deviations software inputs procedure automatically generates scenarios analyst assumptions lead deviations identified safety critical outputs software deviation analysis incorporates many beneficial features hazop automates manual hazard analysis technique extends handle complexity logical nature computer software deviation analysis interface gui aid use software deviation anlaysis human computer interface safety analysis tools still development goal extend rsml include human computer interface apply hazard analysis techniques augmented model timing analysis professor alan shaw exmining add timing analysis tools toolset screen snapshot requirements engineering environment requirements engineering environment supports support graphical user interface creating editing browsing specifications graphical textual interfaces analysis methods listed affords interactive exploration well automated batch processing graphical textual specification representations pretty printer produces printed specifications addition tcas ii several realistic test beds analyses toolkit include model automated highway system ucb path project aircraft flight guidance system nasa ames nasa robot planned human computer interface analysis improved new hazard analysis techniques testing tools completeness analyses timing analysis improved modeling language demonstration part u air traffic control system