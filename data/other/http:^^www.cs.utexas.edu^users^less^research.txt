mime version server cern date tuesday jan gmt content type text html content length last modified friday dec gmt less research agenda laboratory experimental software systems research agenda laboratory experimental software systems less university texas austin department computer sciences formed september four new faculty members lorenzo alvisi robert blumofe mike dahlin calvin lin aggregate resources promote collaboration research experimental software systems particularly areas programming support fault tolerance cluster web based applications document gives brief overview research conducted less lab fault tolerant parallel computing distributed shared memory alvisi blumofe prior work shown combination well structured parallel programming model randomized work stealing scheduling algorithm dag consistency coherence model distributed shared memory combination form basis cilk parallel language runtime system yields efficient predictable performance theory practice furthermore claim using end end design algorithmic properties combination leveraged make system fault tolerant extremely low overhead without redundant computation except recovery propose use combination two new techniques return transactions causal logging reconciles take advantage following key algorithmic property well structuring work stealing dag consistency combination procedure activation stolen modifications made shared memory stolen activation descendants need seen extant activation except stolen activation parent moreover modifications need seen parent stolen activation returns return transactions technique uses fact turn stolen activation atomic transaction technique coupled uncoordinated checkpoints already shown effective functional programming model general however distributed shared memory technique sufficient requires modifications shared memory made stolen activation descendants buffered create atomic transaction stolen activation returns avoid potentially huge amounts buffering causal logging reconciles use causal message logging techniques allow modifications shared memory flushed reconciled backing store even stolen activation returns general causal message logging requires extra information fixed size piggy backed message effectively logs message without requiring synchronous write stable storage well structuring work stealing dag consistency however logging needs done specific subset reconcile messages overhead amortized cost work stealing reliable parallel scientific subroutine libraries blumofe traditionally parallel scientific subroutine libraries various parallel implementations basic linear algebra subroutines blas coded statically partitioning work among static set processes threads approach successful traditional parallel platforms program runs static set effectively dedicated processors growing use acceptance smps clusters parallel computation however assumption dedicated resources longer valid shown applications libraries coded static partitioning unreliable performance run non dedicated resources hand shown using wait free synchronization techniques dynamic partitioning work stealing performance becomes reliable make point propose code make available set libraries including blas smps later clusters use techniques deliver reliable predictable performance shared resources wfs adaptive data framework web computing dahlin although increasing amount valuable data resides web current browser centric data access protocols limit use project seeks provide stronger cache consistency data update guarantees enable new classes web based applications physical characteristics internet make expensive provide guarantees wfs pursue adaptive application specific approach system provide range consistency update options different guarantees different costs applications pay guarantees require example web browser may emphasize scalability continue use current read weak cache consistency approach conversely distributed parallel computation may require transactional updates strict cache consistency even guarantees limit scalability hundred nodes two key aspects project providing framework instantiating different consistency update algorithms common interface providing quantitative criteria applications use select appropriate algorithms lightweight fault tolerance alvisi vin objective research support enable new class truly distributed fault tolerant applications distributed agents communicate messages well files proposed lightweight fault tolerance following properties integrate applications way transparent application programmer use require additional resources negligible impact performance failure free executions cost low common failures scale depending severity number failures need tolerated address software generated faults effectively achieve transparency plan engineer solution middleware minimize dedicated resources plan use rollback recovery techniques minimize impact application performance scale cost solution number failures need tolerated plan use causal logging using current techniques tolerating hardware generated faults possible cost potentially forcing application block every o operation data critical recovery logged stable storage specifically one cannot assume file read execution still available original form recovery hence input file system must synchronously logged stable storage furthermore since file system general cannot roll back application must delay output file system executes output commit protocol requires synchronous logging stable storage tolerating transient software generated faults called heisenbugs rollback based techniques becomes problematic well since frequent writes file system limit extent process roll back address problems middleware plan build present file system application detached component external environment integrated partner trusted provide data needed recovery expect drastically reduce costs incurred application performing file o specifically solution following benefits avoid synchronous logging input data client fails middleware file system cooperate guarantee recovery client receive data received failing avoid synchronous writes file server due file sharing solution clients pass dirty data directly without using file server make data stable middleware guarantees dirty data kept volatile memory client c passed another client without first saved file server regenerated recovery c fails avoid synchronous output commit protocol writing file middleware file system cooperate guarantee client crashes application state output generated never rolled back enhance effectiveness rollback based techniques software fault tolerance middleware allows client experiences heisenbug roll back past last write file system increasing likelihood successful recovery parallel computing world wide web java alvisi blumofe dahlin lin project use java basis new parallel computing infrastructure called jem pronounced gem world wide web jem language augment java simple primitives express parallelism maintaining well structured property jem virtual machine runtime system use work stealing dag consistency provide transparent light weight fault tolerance described properties combination existing java technology allow jem programs run across heterogeneous resources untrusting resources thus applications national international importance climate modeling coded jem run reliably aggregated resources entire world wide web applications corporate importance scheduling data mining simulation coded jem run reliably aggregated resources enterprise intranet back less last modified december robert blumofe rdb cs utexas edu