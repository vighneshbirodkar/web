date wed nov gmt server ncsa last modified fri may gmt content type text html content length cis se ks software validation verification spring cis se ks software validation verification spring new web pages final exam online homework assignment part b online someone asked clarification regarding data flow criteria appears mis spoke discussing hint collecting data assignment part clarification du paths criteria requires paths defs uses reaches exercised uses criteria requires path defs uses reaches exercised defs criteria requires path defs uses reaches exercised summarize definitions criteria num uses paths uses du uses defs note satisfied one know significant technical problems course mean delays receiving tapes receiving blank tapes variability audio quality tapes d like try assess wide spread find problem significant number plan complaining ntu m sure good worth try send feedback comments way course taught please feel free let know affect grade overview software systems increase size complexity difficulty assuring function intended increases rapidly variety approaches proposed potential enable development organizations individual developers produce higher quality software general single technique capable providing incontrovertable proof software always behaves intended course examine different verification validation approaches capable providing us evidence software quality using combination techniques provide high degree confidence quality software construct lectures durland mw pm exams held nichols instructor prof matt dwyer prerequisites cis requirements course consist lectures readings homework assignments examinations bulk concepts course presented explained illustrated way extended examples lectures readings serve provide details depth selected concepts homework designed develop student abilities apply concepts synthesize solutions new problems based concepts lectures readings lectures readings function integrated presentation course material expected readings read prior appropriate lecture homework four homework assignments assignments involve applying extending concepts presented lectures readings homeworks required apply specific techniques actual code assignments make samples code available use alternatively use piece code developed homeworks completed individually work person assignments due beginning class deducted late assignments additional day late campus students may either email solutions fax solutions using examinations comprehensive take home final exam final grades assigned based following weighting homeworks mid term final readings required readings course selected papers literature references access papers collected available copy co phone number cost addition required readings may find following texts useful contain material course range general software engineering texts depth treatments issues related particular verification validation approaches number general software engineering text text good job software quaility issues fundamentals software engineering c ghezzi m jazayeri d mandrioli prentice hall following two texts cover broad range testing techniques contain significant practical information testers software testing techniques b beizer van nostrand reinhold craft software testing b marick prentice hall representations algorithms data flow analysis covered compiler books good example compilers principles techniques tools v aho r sethi j d ullman addison wesley additional resources web pages course linked home page include assignments solutions lecture notes links validation verification pages organization schedule course broken following parts foundations program analysis cover mathematical preliminaries validation verification activities relate software development activities present discuss variety models used represent reason possible behavior program specification intended program behavior say program variety different specification formalisms course focus finite state automata specifications static techniques examine text designs specifications code one view static techniques kind abstract execution program execution produces different kinds output normal program execution output used drive validation verification efforts execution accomplished variety different substrates study manual techniques use developers perform program analyses automated techniques algorithmically perform program analyses dynamic techniques involve executing implementation respect semantics language written validation verification efforts based observing behaviour software executes include observing normal program output well probing state software different points execution well look techniques based assertion based analyses involve periodic checking intended behavior program execution testing involves checking software input output relationships software processes support verification validation provide infrastructure quality assurance activities organized monitored controlled software safety life critical systems emerging increasingly important area quality assurance concurrency used increasingly distributed parallel software along increased performance comes increase complexity already difficult problem quality assurance consider impact concurrency static dynamic analysis approaches dwyer cis ksu edu