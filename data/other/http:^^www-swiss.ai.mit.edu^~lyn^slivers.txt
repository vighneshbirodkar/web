mime version date tuesday jan gmt server naviserver gnnserver b content type text html content length last modified monday dec gmt slivers computational modularity via synchronized lazy aggregates franklyn turbak mit doctoral dissertation februrary abstract slivers new approach expressing computations combinations mix match operators aggregate data unlike aggregate data models slivers enable programmers control fine grained operational aspects modular programs particular slivers guarantee networks operators exhibit desirable storage behavior operation scheduling intricate loops recursions example slivers preserve space efficiency complex tree algorithm expressed superposition simpler tree walks sliver technique based dynamic model lock step processing enables combinations list tree operators simulate operational behavior single recursive procedure operational control achieved synchronized lazy aggregates dynamically unfolding data structures constrain processing separate operators interwoven key technique synchron novel first class object allows dynamically determined number concurrently executing operators participate barrier synchronization slivers embody notion computational shape specifies operational patterns process composed patterns components utility slivers illustrated context synapse simple language expressing linear tree shaped computations synapse built top opera new concurrent dialect scheme incorporates concurrency synchronization non strictness required lock step processing model semantics opera explained terms edgar novel graph reduction model based explicit demand propagation contents links individual chapters disseration concise overview key aspects thesis research please see papers synchronized lazy aggregates synchrons table contents acknowledgments chapter overview overview dissertation chapter slivers motivation sliver decomposition context two monolithic programs employee database program alpha renaming program chapter signal processing style programming detailed analysis existing sps techniques fail express desirable operational characteristics programs chapter computational shape presentation simple notion computational shape shapes described terms time based ordering induced call return events execution recursive procedure chapter synchronized lazy aggregates explanation lock step processing model underlying sliver technique synchronized lazy aggregates introduced mechanism guaranteeing networks slivers simulate behavior corresponding monolithic procedure chapter synapse programming slivers slags illustration power slivers slags context synapse simple language manipulating synchronized lists trees chapter opera controlling operational behavior presentation opera concurrent dialect scheme synapse embedded informal description opera concurrency synchronization non strictness features followed explanation synapse implemented opera chapter edgar explicit demand graph reduction overview edgar explicit demand graph reduction model provides operational semantics opera opera concurrency synchronization non strictness mechanisms formally described chapter experience discussion experimental aspects research including implementation testing edgar opera synapse chapter also describes dynamator graphical program animator proved invaluable development systems chapter conclusion summary research including contributions future work bibliography appendix glossary dissertation introduces large number new terms uses existing terms non standard way glossary provided help reader adjust terminology select postscript viewer entire dissertation document warning pages long lots figures feedback send questions comments work lyn zurich ai mit edu