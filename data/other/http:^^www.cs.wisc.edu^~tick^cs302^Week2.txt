date wed dec gmt server ncsa content type text html last modified mon sep gmt content length cs section lecture notes week lecture notes week topic program structure constants variables arithmetic expressions assignment statement built functions binary representation unformatted input output errors text chp notes fortran line structure fortran programs composed lines one statement per line line four sections column comment field columns line label column continuation marker columns actual fortran statement c label statement comment field comments indicated c column comments take whole line everything line ignored compiler comments explain program code plain english c compute total cost c unit cost quantity ordered totcst untcst quanty continuation marker statement long fit columns split two lines put column indicate line continuation previous line c display total cost print total cost totcst dollars fortran statements fortran statements must start least column helpful hint change tab setting characters write fortran statements starting columns right totcst untcst quanty wrong totcst untcst quanty anything past column ignored compiler lines long split two lines continuation marker fortran program structure fortran programs overall structure program header variable declarations main executable section stop end program header gives name program program enciph stop tells program stop running return ms dos end tells compiler last statement program stop compiling fortran variables variable names variables store important values program use hold intermediate results totcst untcst quanty variable names must start letter contain uppercase letters digits longer six characters right totcst quanty index wrong totalcost b b variable types must explicitly specify type variable e sort value store common variable types real real number decimal point fractional part integer positive negative integer number decimal places character one characters e g word name variable declarations specify variable type followed variable name real totcst untcst integer quanty integer index character variables must also specify maximum length character string optional one character long character name character char warning explicitly specify type variable declared default type according n rule see pg must always explicitly declare every variable constants value variable known write program never changes e g pi turn constant parameter statement real pi parameter pi variable turned constant cannot re assigned new value later parameter statement immediately follows variable declaration assignment statement store value variable declared use assignment statement variablename expression variable always left hand side assignment statement right totcst untcst wrong untcst totcst variable assigned also part expression right hand side count count first whole expression evaluated get result result stored variable assignment statement mean variable equals expression rather variable gets assigned value expression subtle important difference arithmetic expressions aritmetic operators fortran supports standard mathematical operators multiplication division addition subtraction also exponential e g b written b example translate following quadratic equation fortran x x y written y x x operator precedence operators evaluated order precedence several operators precedence evaluated left right first exponental second multiplication division last addition subtraction ride default precedence use parenthesis b c d e right b c d e wrong b c d e exception consecutive exponents evaluated right left example y x z written y x z arithmetic functions fortran many built arithmetic functions see pg appendix sqrt square root sin sine root cos cosine tan tangent exp e x alog natural logarithm alog logarithm base nint round real number nearest integer functions used arithmetic expression y exp tan x sqrt x arguments function either values variables even arithmetic expressions enclosed parentheses functions one argument separated commas b mod c type matching type expression match type variable result going stored integer variable integer expression real variable real expression types mismatch expression automatically converted match type variable truncating decimal places necessary real x integer x x operators operands type integer result also type integer either operand type real result type real warning division operands type integer result automatically truncated integer also important always check argument return types functions know whether results truncated real numbers real numbers written either decimal scientific notation decimal scientific e e default real numbers printed decimal notation rounding errors numbers stored inside computer binary format e powers base base fractions cannot represented precisely binary e g instead closest approximimation base stored therefore real numbers stored precisely computer equal e g important always use integer values variables whenever possible stored precisely use real values absolutely storing binary integers binary string abcde converts b c d e characters convert ascii code value example stored e reals stored binary version scientific notation ab cd binary b c d ab cd decimal b c d recall decimal becomes x sci notation moving decimal point multiplies divides two binary since two possibilities per digit moving decimal point multiplies divides becomes x write completely binary x also remember sci notation decimal form bcde x f binary since every time convert sci notation binary ll therefore even need store know ll always gives us storage space represented digits suppose re given told re given digits mantissa digits exponent think complete binary x converts x character strings assign value character variable must either another character variable string enclosed single apostrophes character name name name john doe name name apostrophes stored variable store apostrophe inside string type two apostrophes name john dog john dog string shorter variable variable padded blanks denoted name john doe john doe string longer variable excess characters ignored e string truncated name john doesnt john doesn input output unformatted output display results screen use print statement print totcst print multiple items line separate commas print x plus y equals x y print values variables arithmetic expressions character strings next print statement prints next line end previous one always prompt user asking type something otherwise run program know computer waiting enter value print please enter cost item read untcst unformatted input read data entered keyboard user use read statement read untcst always read variable specifying value stored never read expressions literal values user must press enter return key finished entering line data keyboard enter read multiple values entered line specify several variable separate commas read day month year user enters multiple values line separate commas uses spaces instead enter values user types must entered order type variables read statement reading character strings reading character strings keyboard user must surround apostrophes gareth bestor enter may undesirable avoided using formatted input discuss later see program example types errors syntax error compile time problem computer idea translate part program misspelling words starting first line problam instead program example using keywords real variable name nonsense characters lines common examples semantic error compile time problem lines translated individually doesn make sense regard entire program example typing implicit none trying use variable name delcared yet run time error run time problem everything translates fine running certain steps computer cannot saying y z example legal statement computer cannot divide compile fail running program reached point line position error type error none occurs line rules obeyed result many things example read ad nauseum b c b nd column rest line would ignored d still legal statement reading c may cause problem later program though b st column however c would ignored d syntax error read cannot end comma logical error occurs run time sort nothing wrong program wanted computer told ve written program incorrectly hardest annoying correct important algorithm correct head paper start typing copyright copy modified gareth bestor bestor cs wisc edu last modified september